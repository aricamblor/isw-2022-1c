

----STARTUP---- (16 May 2022 19:32:33) as /home/clinux01/Documentos/Portfolio/linux64/CuisUniversity-5096.image!


----End fileIn of /media/clinux01/ARI/Ingenieria 1/2022-1c/05-Portfolio 1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/16/2022 19:51:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 19:51:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 19:51:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/16/2022 19:51:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/16/2022 19:51:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/16/2022 19:51:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/16/2022 19:51:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 19:51:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/16/2022 20:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:03:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/16/2022 20:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/16/2022 20:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/16/2022 20:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/16/2022 20:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:03:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/16/2022 20:04:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:04:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:04:02'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/16/2022 20:04:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/16/2022 20:04:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/16/2022 20:04:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/16/2022 20:04:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:04:02'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/16/2022 20:04:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:04:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:04:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/16/2022 20:04:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/16/2022 20:04:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/16/2022 20:04:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/16/2022 20:04:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:04:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:04:17'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:09:26' prior: 50474307!
balance

	|deposits withdrawals|
	
	deposits := transactions collect: [:aTransaction | aTransaction isDeposit ] andFold: [:a :b | a value + b value].
	withdrawals  := transactions collect: [:aTransaction | aTransaction isWithdrawal ] andFold: [:a :b | a value + b value].
	
	^deposits - withdrawals! !
!AccountTransaction methodsFor: 'value' stamp: 'AEC 5/16/2022 20:10:18'!
isDeposit

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'value' stamp: 'AEC 5/16/2022 20:10:22'!
isWithdrawal

	self subclassResponsibility ! !
!Deposit methodsFor: 'initialization' stamp: 'AEC 5/16/2022 20:10:45' overrides: 50474458!
isDeposit

	^true! !
!Deposit methodsFor: 'initialization' stamp: 'AEC 5/16/2022 20:11:01' overrides: 50474462!
isWithdrawal

	^false! !
!Withdraw methodsFor: 'initialization' stamp: 'AEC 5/16/2022 20:11:09' overrides: 50474462!
isWithdrawal

	^true! !
!Withdraw methodsFor: 'initialization' stamp: 'AEC 5/16/2022 20:11:15' overrides: 50474458!
isDeposit

	^false! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:11:57'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:11:57'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:12:55' prior: 50474446!
balance

	|deposits withdrawals|
	
	deposits := transactions select: [:aTransaction | aTransaction isDeposit ].
	withdrawals  := transactions select: [:aTransaction | aTransaction isWithdrawal ].
	
	^deposits sum - withdrawals sum! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/16/2022 20:13:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:13:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:13:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/16/2022 20:13:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/16/2022 20:13:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/16/2022 20:13:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/16/2022 20:13:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:14:47'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:14:47'!
ERROR!

self sum!

self collect: [:e | e value]!

self sum: [:e | e value]!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:17:28' prior: 50474491!
balance

	|deposits withdrawals|
	
	deposits := transactions select: [:aTransaction | aTransaction isDeposit ].
	withdrawals  := transactions select: [:aTransaction | aTransaction isWithdrawal ].
	
	^(deposits sum: [:aDeposit | aDeposit value]) - (withdrawals sum: [:aWithdrawal | aWithdrawal value])! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:17:29'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:17:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/16/2022 20:17:42'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:17:42'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:17:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/16/2022 20:17:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/16/2022 20:17:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/16/2022 20:17:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/16/2022 20:17:42'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:18:13' prior: 50474538!
balance

	|deposits withdrawals|
	
	deposits := transactions select: [:aTransaction | aTransaction isDeposit ].
	withdrawals  := transactions select: [:aTransaction | aTransaction isWithdrawal ].
	
	^(deposits sum: [:aDeposit | aDeposit value] ifEmpty: [0]) - (withdrawals sum: [:aWithdrawal | aWithdrawal value] ifEmpty: [0])! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/16/2022 20:18:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:18:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:18:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/16/2022 20:18:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/16/2022 20:18:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/16/2022 20:18:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/16/2022 20:18:15'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:19:05'!
totalValueOf: deposits

	^ deposits sum: [:aDeposit | aDeposit value] ifEmpty: [0]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:19:05' prior: 50474585!
balance

	|deposits withdrawals|
	
	deposits := transactions select: [:aTransaction | aTransaction isDeposit ].
	withdrawals  := transactions select: [:aTransaction | aTransaction isWithdrawal ].
	
	^(self totalValueOf: deposits) - (withdrawals sum: [:aWithdrawal | aWithdrawal value] ifEmpty: [0])! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:19:24' prior: 50474631!
balance

	|deposits withdrawals|
	
	deposits := transactions select: [:aTransaction | aTransaction isDeposit ].
	withdrawals  := transactions select: [:aTransaction | aTransaction isWithdrawal ].
	
	^(self totalValueOf: deposits) - (self totalValueOf: withdrawals)! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/16/2022 20:19:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:19:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:19:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/16/2022 20:19:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/16/2022 20:19:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/16/2022 20:19:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/16/2022 20:19:27'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32' prior: 50474644!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:25:17' prior: 50474682!
balance

	^transactions sum: [ :aTransaction | aTransaction valueInBalance ] ifEmpty: [ 0 ]! !

!methodRemoval: Withdraw #isWithdrawal stamp: 'AEC 5/16/2022 20:25:20'!
isWithdrawal

	^true!

!methodRemoval: Withdraw #isDeposit stamp: 'AEC 5/16/2022 20:25:21'!
isDeposit

	^false!

!methodRemoval: Deposit #isDeposit stamp: 'AEC 5/16/2022 20:25:23'!
isDeposit

	^true!

!methodRemoval: Deposit #isWithdrawal stamp: 'AEC 5/16/2022 20:25:24'!
isWithdrawal

	^false!

!methodRemoval: AccountTransaction #isWithdrawal stamp: 'AEC 5/16/2022 20:25:25'!
isWithdrawal

	self subclassResponsibility !

!methodRemoval: AccountTransaction #isDeposit stamp: 'AEC 5/16/2022 20:25:25'!
isDeposit

	self subclassResponsibility !
!AccountTransaction methodsFor: 'value' stamp: 'AEC 5/16/2022 20:25:38'!
valueInBalance

	self subclassResponsibility! !
!Deposit methodsFor: 'nil' stamp: 'AEC 5/16/2022 20:26:30' overrides: 50474713!
valueInBalance

	^ value! !
!Withdraw methodsFor: 'nil' stamp: 'AEC 5/16/2022 20:26:43' overrides: 50474713!
valueInBalance

	^ value negated! !
!Withdraw methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:41:37'!
valueInBalanceOf: anAccount

	^ anAccount subtractFromBalance: self value! !

!methodRemoval: Withdraw #valueInBalanceOf: stamp: 'AEC 5/16/2022 20:41:41'!
valueInBalanceOf: anAccount

	^ anAccount subtractFromBalance: self value!
!Withdraw methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:41:46'!
valueInBalanceOf: anAccount

	^ anAccount subtractFromBalance: self value! !

!methodRemoval: Withdraw #valueInBalance stamp: 'AEC 5/16/2022 20:41:49'!
valueInBalance

	^ value negated!
!Deposit methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:42:06'!
valueInBalanceOf: anAccount

	^ anAccount addToBalance: self value! !

!methodRemoval: Deposit #valueInBalance stamp: 'AEC 5/16/2022 20:42:09'!
valueInBalance

	^ value!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:42:21' prior: 50474688!
balance

	^transactions sum: [ :aTransaction | aTransaction valueInBalanceOf: self ] ifEmpty: [ 0 ]! !
!Deposit methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:42:42'!
updateBalanceOf: anAccount

	^ anAccount addToBalance: self value! !
!Withdraw methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:42:42'!
updateBalanceOf: anAccount

	^ anAccount subtractFromBalance: self value! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 20:42:42' prior: 50474752!
balance

	^transactions sum: [ :aTransaction | aTransaction updateBalanceOf: self ] ifEmpty: [ 0 ]! !

!methodRemoval: Deposit #valueInBalanceOf: stamp: 'AEC 5/16/2022 20:42:43'!
valueInBalanceOf: anAccount

	^ anAccount addToBalance: self value!

!methodRemoval: Withdraw #valueInBalanceOf: stamp: 'AEC 5/16/2022 20:42:43'!
valueInBalanceOf: anAccount

	^ anAccount subtractFromBalance: self value!
!ReceptiveAccount methodsFor: 'balance - private' stamp: 'AEC 5/16/2022 20:43:16'!
addToBalance: anAmount

	^anAmount! !
!ReceptiveAccount methodsFor: 'balance - private' stamp: 'AEC 5/16/2022 20:43:24'!
subtractFromBalance: anAmount

	^anAmount negated! !
!Deposit methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:47:42'!
impactInBalance: anAccount

	^ anAccount addToBalance: self value! !
!Withdraw methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:47:42'!
impactInBalance: anAccount

	^ anAccount subtractFromBalance: self value! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 20:47:42' prior: 50474769!
balance

	^transactions sum: [ :aTransaction | aTransaction impactInBalance: self ] ifEmpty: [ 0 ]! !

!methodRemoval: Deposit #updateBalanceOf: stamp: 'AEC 5/16/2022 20:47:42'!
updateBalanceOf: anAccount

	^ anAccount addToBalance: self value!

!methodRemoval: Withdraw #updateBalanceOf: stamp: 'AEC 5/16/2022 20:47:42'!
updateBalanceOf: anAccount

	^ anAccount subtractFromBalance: self value!
!Deposit methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:48:22'!
impactInBalanceOf: anAccount

	^ anAccount addToBalance: self value! !
!Withdraw methodsFor: 'balance' stamp: 'AEC 5/16/2022 20:48:22'!
impactInBalanceOf: anAccount

	^ anAccount subtractFromBalance: self value! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 20:48:22' prior: 50474804!
balance

	^transactions sum: [ :aTransaction | aTransaction impactInBalanceOf: self ] ifEmpty: [ 0 ]! !

!methodRemoval: Deposit #impactInBalance: stamp: 'AEC 5/16/2022 20:48:22'!
impactInBalance: anAccount

	^ anAccount addToBalance: self value!

!methodRemoval: Withdraw #impactInBalance: stamp: 'AEC 5/16/2022 20:48:22'!
impactInBalance: anAccount

	^ anAccount subtractFromBalance: self value!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/16/2022 20:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 20:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/16/2022 20:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/16/2022 20:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/16/2022 20:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/16/2022 20:50:56'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:02:52' prior: 50474830!
balance

	^transactions inject: 0 into: [:balance :transaction | transaction updateBalance: balance]! !
!Withdraw methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:03:20'!
updateBalance: aBalance

	^ aBalance - self value! !

!methodRemoval: Withdraw #impactInBalanceOf: stamp: 'AEC 5/16/2022 21:03:22'!
impactInBalanceOf: anAccount

	^ anAccount subtractFromBalance: self value!
!Deposit methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:03:29'!
updateBalance: aBalance

	^ aBalance + self value! !

!methodRemoval: Deposit #impactInBalanceOf: stamp: 'AEC 5/16/2022 21:03:31'!
impactInBalanceOf: anAccount

	^ anAccount addToBalance: self value!

!methodRemoval: AccountTransaction #valueInBalance stamp: 'AEC 5/16/2022 21:03:38'!
valueInBalance

	self subclassResponsibility!
!AccountTransaction methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:03:43'!
updateBalance: aBalance

	^ self subclassResponsibility ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/16/2022 21:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 21:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 21:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/16/2022 21:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/16/2022 21:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/16/2022 21:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/16/2022 21:03:49'!
PASSED!

!methodRemoval: ReceptiveAccount #addToBalance: stamp: 'AEC 5/16/2022 21:03:57'!
addToBalance: anAmount

	^anAmount!

!methodRemoval: ReceptiveAccount #subtractFromBalance: stamp: 'AEC 5/16/2022 21:03:58'!
subtractFromBalance: anAmount

	^anAmount negated!

!methodRemoval: ReceptiveAccount #totalValueOf: stamp: 'AEC 5/16/2022 21:04:18'!
totalValueOf: deposits

	^ deposits sum: [:aDeposit | aDeposit value] ifEmpty: [0]!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/16/2022 21:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 21:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/16/2022 21:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/16/2022 21:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/16/2022 21:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/16/2022 21:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/16/2022 21:04:25'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'AEC 5/16/2022 21:05:18'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/16/2022 21:16:25'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'AEC 5/16/2022 21:16:17'!
test01

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0! !

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:16:27'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:16:44'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:16:53' prior: 50474998!
balance
	
	^ 0! !

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:16:54'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:16:54'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 21:19:59'!
test02

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 21:20:34' prior: 50475010!
test02

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	self assert: portfolio balance equals: 100! !

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:20:39'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/16/2022 21:21:14'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/16/2022 21:22:20'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/16/2022 21:22:18' prior: 50475033!
addAccount: aReceptiveAccount 
	
	account := aReceptiveAccount ! !

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:22:23'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:22:40' prior: 50475002!
balance
	
	^ account balance! !

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:22:42'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:22:42'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:22:42'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:22:42'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:23:47' prior: 50475053!
balance
	
	account ifNotNil: [^account balance].
	
	^0! !

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:23:49'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:23:49'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:23:49'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 21:24:13'!
test03

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 21:24:19' prior: 50475078!
test03

	| portfolio firstAccount |
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	portfolio addAccount: firstAccount.
	
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 21:24:59' prior: 50475088!
test03

	| portfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	Deposit register: 100 on: secondAccount.
	
	portfolio addAccount: firstAccount.
	portfolio addAccount: secondAccount.
	
	self assert: portfolio balance equals: 200! !

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:25:05'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:25:14'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:25:14'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:25:14'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:25:14'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/16/2022 21:25:50'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 21:25:50' prior: 50475045!
addAccount: aReceptiveAccount 
	
	accounts := aReceptiveAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 21:25:50' prior: 50475066!
balance
	
	accounts ifNotNil: [^accounts balance].
	
	^0! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/16/2022 21:25:54' prior: 50475133!
addAccount: aReceptiveAccount 
	
	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/16/2022 21:26:32' overrides: 16920235!
initialize

	accounts := Set new! !
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:27:14' prior: 50475139!
balance
	
	accounts sum: [:account | account balance] ifEmpty: [0]! !
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:27:18' prior: 50475153!
balance
	
	^ accounts sum: [:account | account balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:28:01'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:28:01'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:28:01'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:28:01'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:28:09' prior: 50475099!
test03

	| portfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAccount: firstAccount.
	portfolio addAccount: secondAccount.
	
	self assert: portfolio balance equals: 300! !

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:28:11'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:28:11'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:28:11'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:28:11'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:28:47'!
test04

	| portfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAccount: firstAccount.
	portfolio addAccount: secondAccount.
	
	self assert: portfolio balance equals: 300! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:29:18' prior: 50475197!
test04

	| portfolio anotherPortfolio secondAccount|
	
	portfolio := Portfolio new.
	anotherPortfolio := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: anotherPortfolio.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAccount: anotherPortfolio.
	portfolio addAccount: secondAccount.
	
	self assert: portfolio balance equals: 300! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:30:12' prior: 50475212!
test04

	| portfolio portfolioToAdd |
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	
	portfolio addAccount: portfolioToAdd.
	
	self assert: portfolio balance equals: 0! !

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:30:14'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:30:14'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:30:14'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:30:14'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:30:14'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:30:48' prior: 50475227!
test04

	| portfolio portfolioToAdd |
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: portfolio balance equals: 0! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/16/2022 21:31:35'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/16/2022 21:31:33'!
addPortfolio: aPortfolio 
	
	portfolios := aPortfolio! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:33:40' prior: 50475248!
test04

	| portfolio portfolioToAdd account |
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolioToAdd addAccount: account.
	
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: portfolio balance equals: 0! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:33:43' prior: 50475269!
test04

	| portfolio portfolioToAdd account |
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolioToAdd addAccount: account.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: portfolio balance equals: 0! !

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:33:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:33:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:33:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:33:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:33:46'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:33:53' prior: 50475282!
test04

	| portfolio portfolioToAdd account |
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolioToAdd addAccount: account.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: portfolio balance equals: 100! !

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:33:54'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:35:37' prior: 50475158!
balance
	
	| accountsBalance |
	
	accountsBalance := 	accounts sum: [:account | account balance] ifEmpty: [0].
	
	^accountsBalance + portfolios balance! !

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:35:43'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:35:51'!
ERROR!

portfolios balance!
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:38:16' prior: 50475322!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance := 	accounts sum: [:account | account balance] ifEmpty: [0].
	portfoliosBalance := 0 + portfolios ifNotNil: [:portfolio | portfolio balance ].
	
	^accountsBalance + portfoliosBalance! !

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:38:19'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:38:31' prior: 50475335!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance := 	accounts sum: [:account | account balance] ifEmpty: [0].
	portfoliosBalance := 0 + (portfolios ifNotNil: [:portfolio | portfolio balance ]).
	
	^accountsBalance + portfoliosBalance! !

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:38:33'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:38:38'!
ERROR!

portfolio balance!
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:40:21' prior: 50475348!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance := 	accounts sum: [:account | account balance] ifEmpty: [0].
	(portfolios isNil) ifTrue: [ portfoliosBalance := 0] ifFalse: [portfoliosBalance := portfolios balance].
	
	^accountsBalance + portfoliosBalance! !

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:40:22'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:40:22'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:40:22'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:40:22'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:40:22'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:40:25'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:40:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:40:25'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:40:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:40:25'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:43:01' prior: 50475021!
test02

	| portfolio account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	
	portfolio addAccount: account.
	
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:43:47'!
accountWithDepositOf: anAmount

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	^account ! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:44:25' prior: 50475173!
test03

	| portfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstAccount := self accountWithDepositOf: 100.
	secondAccount := self accountWithDepositOf: 200.
	
	portfolio addAccount: firstAccount.
	portfolio addAccount: secondAccount.
	
	self assert: portfolio balance equals: 300! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:44:36' prior: 50475307!
test04

	| portfolio portfolioToAdd account |
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := self accountWithDepositOf: 100.
	
	portfolioToAdd addAccount: account.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: portfolio balance equals: 100! !

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:44:40'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:44:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:44:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:44:40'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:44:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:44:40'!
FAILURE!
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/16/2022 21:44:55' prior: 50475408!
accountWithDepositOf: anAmount

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: anAmount on: account.
	^account ! !

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:44:56'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:44:56'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:44:56'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:44:56'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:46:01' prior: 50475428!
test04

	| portfolio portfolioToAdd account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	portfolioToAdd := self portfolioWithAccount: account.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:47:27'!
portfolioWithAccount: anAccount

	| portfolio |
	portfolio := Portfolio new.
	portfolio addAccount: anAccount.
	^portfolio! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:47:31' prior: 50475482!
portfolioWithAccount: anAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio addAccount: anAccount.
	^portfolio! !

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:47:44'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:47:44'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:47:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:47:44'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:47:44'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:47:54'!
test05

	| portfolio portfolioToAdd account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	portfolioToAdd := self portfolioWithAccount: account.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:48:14' prior: 50475507!
test05

	| portfolio firstPortfolioToAdd account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	firstPortfolioToAdd := self portfolioWithAccount: account.
	portfolio addPortfolio: firstPortfolioToAdd.
	
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:48:54' prior: 50475518!
test05

	| portfolio firstPortfolioToAdd secondPortfolioToAdd account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	firstPortfolioToAdd := self portfolioWithAccount: account.
	secondPortfolioToAdd := self portfolioWithAccount: account.
	
	portfolio addPortfolio: firstPortfolioToAdd.
	portfolio addPortfolio: secondPortfolioToAdd.
	
	self assert: portfolio balance equals: 200! !

!testRun: #PortfolioTest #test05 stamp: 'AEC 5/16/2022 21:48:56'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:49:51' prior: 50475530!
test05

	| portfolio firstPortfolioToAdd secondPortfolioToAdd firstAccount |
	
	portfolio := Portfolio new.
	firstAccount := self accountWithDepositOf: 100.
	firstPortfolioToAdd := self portfolioWithAccount: firstAccount.
	secondPortfolioToAdd := self portfolioWithAccount: firstAccount.
	
	portfolio addPortfolio: firstPortfolioToAdd.
	portfolio addPortfolio: secondPortfolioToAdd.
	
	self assert: portfolio balance equals: 200! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:50:11' prior: 50475548!
test05

	| portfolio firstPortfolioToAdd secondPortfolioToAdd firstAccount secondAccount |
	
	portfolio := Portfolio new.
	firstAccount := self accountWithDepositOf: 100.
	secondAccount := self accountWithDepositOf: 200.
	firstPortfolioToAdd := self portfolioWithAccount: firstAccount.
	secondPortfolioToAdd := self portfolioWithAccount: secondAccount.
	
	portfolio addPortfolio: firstPortfolioToAdd.
	portfolio addPortfolio: secondPortfolioToAdd.
	
	self assert: portfolio balance equals: 300! !

!testRun: #PortfolioTest #test05 stamp: 'AEC 5/16/2022 21:50:13'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/16/2022 21:50:27' prior: 50475264!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/16/2022 21:50:34' prior: 50475149 overrides: 16920235!
initialize

	accounts := Set new.
	portfolios := Set new.! !
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:51:37' prior: 50475364!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance := 	accounts sum: [:account | account balance] ifEmpty: [0].
	portfoliosBalance := 	portfolios sum: [:portfolio | portfolio balance] ifEmpty: [0].
	
	^accountsBalance + portfoliosBalance! !

!testRun: #PortfolioTest #test05 stamp: 'AEC 5/16/2022 21:51:50'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:51:50'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:51:50'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:51:50'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:51:50'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AEC 5/16/2022 21:51:50'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/16/2022 21:52:29'!
Object subclass: #Portfolio
	instanceVariableNames: 'items portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 21:52:29' prior: 50475144!
addAccount: aReceptiveAccount 
	
	items add: aReceptiveAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 21:52:29' prior: 50475591 overrides: 16920235!
initialize

	items := Set new.
	portfolios := Set new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/16/2022 21:52:29' prior: 50475596!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance := 	items sum: [:account | account balance] ifEmpty: [0].
	portfoliosBalance := 	portfolios sum: [:portfolio | portfolio balance] ifEmpty: [0].
	
	^accountsBalance + portfoliosBalance! !
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:52:43' prior: 50475640!
balance
	
	^ items sum: [:account | account balance] ifEmpty: [0].! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/16/2022 21:52:49' prior: 50475586!
addPortfolio: aPortfolio 
	
	items add: aPortfolio! !

Object subclass: #Portfolio
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/16/2022 21:52:53'!
Object subclass: #Portfolio
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test05 stamp: 'AEC 5/16/2022 21:52:58'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:52:58'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:52:58'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:52:58'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:52:58'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AEC 5/16/2022 21:52:58'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:53:09' prior: 50475651!
balance
	
	^ items sum: [:item | item balance] ifEmpty: [0].! !

!testRun: #PortfolioTest #test05 stamp: 'AEC 5/16/2022 21:53:14'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:53:14'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:53:14'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AEC 5/16/2022 21:53:14'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AEC 5/16/2022 21:53:14'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AEC 5/16/2022 21:53:14'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:53:51'!
test01EmptyPortfolioHasNoBalance

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0! !

!methodRemoval: PortfolioTest #test01 stamp: 'AEC 5/16/2022 21:53:51'!
test01

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:54:06'!
test01EmptyPortfolioBalanceIs0

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0! !

!methodRemoval: PortfolioTest #test01EmptyPortfolioHasNoBalance stamp: 'AEC 5/16/2022 21:54:06'!
test01EmptyPortfolioHasNoBalance

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:54:36'!
test02PortfolioWithAccountBalanceIsAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	
	portfolio addAccount: account.
	
	self assert: portfolio balance equals: 100! !

!methodRemoval: PortfolioTest #test02 stamp: 'AEC 5/16/2022 21:54:36'!
test02

	| portfolio account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	
	portfolio addAccount: account.
	
	self assert: portfolio balance equals: 100!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/16/2022 21:57:08'!
test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	
	portfolio addAccount: account.
	
	self assert: portfolio balance equals: 100! !

!methodRemoval: PortfolioTest #test02PortfolioWithAccountBalanceIsAccountBalance stamp: 'AEC 5/16/2022 21:57:08'!
test02PortfolioWithAccountBalanceIsAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	
	portfolio addAccount: account.
	
	self assert: portfolio balance equals: 100!

----SNAPSHOT----(16 May 2022 21:57:38) CuisUniversity-5096.image priorSource: 4557982!

----QUIT----(16 May 2022 21:57:46) CuisUniversity-5096.image priorSource: 4611853!

----STARTUP---- (19 May 2022 20:07:37) as /home/clinux01/Documentos/Portfolio/linux64/CuisUniversity-5096.image!

!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:07:44'!
test01EmptyPortfolioBalanceIsZero

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0! !

!methodRemoval: PortfolioTest #test01EmptyPortfolioBalanceIs0 stamp: 'AEC 5/19/2022 20:07:44'!
test01EmptyPortfolioBalanceIs0

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0!
!ProgressInitiationExceptionTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:08:33'!
test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances
	| countStorage |
	countStorage _ {0}.
	self
		should: [
			[self sampleProgress: countStorage]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
		raise: Error.
	self assert: countStorage first = 5.
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:08:33'!
test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances

	| portfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstAccount := self accountWithDepositOf: 100.
	secondAccount := self accountWithDepositOf: 200.
	
	portfolio addAccount: firstAccount.
	portfolio addAccount: secondAccount.
	
	self assert: portfolio balance equals: 300! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/19/2022 20:08:33' prior: 50461559!
test12WhenAnotherTestIsChangedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	
	self logChangesWhile: [
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'test03 self assert: false' in: #TestClassA.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/19/2022 20:08:33' prior: 50461673!
test17WhenAnotherTestIsRenamedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self compileMethod: 'test03 self assert: true' in: #TestClassA.
		self compileMethod: 'test01bla self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test01 from: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances class: #TestClassA)! !

!methodRemoval: ProgressInitiationExceptionTest #test03 stamp: 'AEC 5/19/2022 20:08:33'!
test03
	| countStorage |
	countStorage _ {0}.
	self
		should: [
			[self sampleProgress: countStorage]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
		raise: Error.
	self assert: countStorage first = 5.
	!

!methodRemoval: PortfolioTest #test03 stamp: 'AEC 5/19/2022 20:08:33'!
test03

	| portfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstAccount := self accountWithDepositOf: 100.
	secondAccount := self accountWithDepositOf: 200.
	
	portfolio addAccount: firstAccount.
	portfolio addAccount: secondAccount.
	
	self assert: portfolio balance equals: 300!
!ProgressInitiationExceptionTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:09:52'!
test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance
	| countStorage |
	countStorage _ {0}.
	self
		shouldnt: [
			[
				[self sampleProgress: countStorage]
				on: ZeroDivide
				do: [ :ex | ex resume]
			]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
		raise: Error.
	self assert: countStorage first = 10.
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:09:52'!
test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance

	| portfolio portfolioToAdd account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	portfolioToAdd := self portfolioWithAccount: account.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: portfolio balance equals: 100! !

!methodRemoval: ProgressInitiationExceptionTest #test04 stamp: 'AEC 5/19/2022 20:09:52'!
test04
	| countStorage |
	countStorage _ {0}.
	self
		shouldnt: [
			[
				[self sampleProgress: countStorage]
				on: ZeroDivide
				do: [ :ex | ex resume]
			]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
		raise: Error.
	self assert: countStorage first = 10.
	!

!methodRemoval: PortfolioTest #test04 stamp: 'AEC 5/19/2022 20:09:52'!
test04

	| portfolio portfolioToAdd account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	portfolioToAdd := self portfolioWithAccount: account.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: portfolio balance equals: 100!
!ProgressInitiationExceptionTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:10:33'!
test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances
	| countStorage |
	countStorage _ {0}.
	self
		shouldnt: [
			[
				[self sampleProgress: countStorage]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
				on: ZeroDivide
				do: [ :ex | ex resume]
			]
		raise: Error.
	self assert: countStorage first = 10.
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:10:33'!
test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances

	| portfolio firstPortfolioToAdd secondPortfolioToAdd firstAccount secondAccount |
	
	portfolio := Portfolio new.
	firstAccount := self accountWithDepositOf: 100.
	secondAccount := self accountWithDepositOf: 200.
	firstPortfolioToAdd := self portfolioWithAccount: firstAccount.
	secondPortfolioToAdd := self portfolioWithAccount: secondAccount.
	
	portfolio addPortfolio: firstPortfolioToAdd.
	portfolio addPortfolio: secondPortfolioToAdd.
	
	self assert: portfolio balance equals: 300! !

!methodRemoval: ProgressInitiationExceptionTest #test05 stamp: 'AEC 5/19/2022 20:10:33'!
test05
	| countStorage |
	countStorage _ {0}.
	self
		shouldnt: [
			[
				[self sampleProgress: countStorage]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
				on: ZeroDivide
				do: [ :ex | ex resume]
			]
		raise: Error.
	self assert: countStorage first = 10.
	!

!methodRemoval: PortfolioTest #test05 stamp: 'AEC 5/19/2022 20:10:33'!
test05

	| portfolio firstPortfolioToAdd secondPortfolioToAdd firstAccount secondAccount |
	
	portfolio := Portfolio new.
	firstAccount := self accountWithDepositOf: 100.
	secondAccount := self accountWithDepositOf: 200.
	firstPortfolioToAdd := self portfolioWithAccount: firstAccount.
	secondPortfolioToAdd := self portfolioWithAccount: secondAccount.
	
	portfolio addPortfolio: firstPortfolioToAdd.
	portfolio addPortfolio: secondPortfolioToAdd.
	
	self assert: portfolio balance equals: 300!
!ProgressInitiationExceptionTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:10:43'!
test05
	| countStorage |
	countStorage _ {0}.
	self
		shouldnt: [
			[
				[self sampleProgress: countStorage]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
				on: ZeroDivide
				do: [ :ex | ex resume]
			]
		raise: Error.
	self assert: countStorage first = 10.
	! !

!methodRemoval: ProgressInitiationExceptionTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:10:43'!
test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances
	| countStorage |
	countStorage _ {0}.
	self
		shouldnt: [
			[
				[self sampleProgress: countStorage]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
				on: ZeroDivide
				do: [ :ex | ex resume]
			]
		raise: Error.
	self assert: countStorage first = 10.
	!
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/16/2022 21:52:29' prior: 50475687!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance := 	items sum: [:account | account balance] ifEmpty: [0].
	portfoliosBalance := 	portfolios sum: [:portfolio | portfolio balance] ifEmpty: [0].
	
	^accountsBalance + portfoliosBalance! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/19/2022 20:12:09'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/19/2022 20:12:09' prior: 50475635 overrides: 16920235!
initialize

	accounts := Set new.
	portfolios := Set new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/19/2022 20:12:09' prior: 50476073!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance := 	accounts sum: [:account | account balance] ifEmpty: [0].
	portfoliosBalance := 	portfolios sum: [:portfolio | portfolio balance] ifEmpty: [0].
	
	^accountsBalance + portfoliosBalance! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/19/2022 20:12:09' prior: 50475656!
addPortfolio: aPortfolio 
	
	accounts add: aPortfolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/19/2022 20:12:09' prior: 50475629!
addAccount: aReceptiveAccount 
	
	accounts add: aReceptiveAccount ! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/19/2022 20:12:17'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/19/2022 20:12:37' prior: 50476108!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:20:33'!
test06XXX
	
	| account portfolio transaction |
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	portfolio := Portfolio new.
	
	self deny: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:20:39' prior: 50476136!
test06XXX
	
	| account portfolio transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	portfolio := Portfolio new.
	
	self deny: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:20:51'!
ERROR!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:21:13'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:21:32' prior: 50476158!
hasRegistered: aTransaction
	
	^false! !

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:21:35'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:21:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:21:35'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:21:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:21:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:21:35'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:21:35'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:22:14'!
test07XXX
	
	| account portfolio transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	portfolio := self portfolioWithAccount: account.
	
	self assert: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:22:16'!
FAILURE!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:23:53' prior: 50476163!
hasRegistered: aTransaction
	
	^accounts notEmpty! !

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:23:55'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:23:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:23:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:23:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:23:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:23:55'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:23:55'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:23:55'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:24:57'!
test08XXX
	
	| account portfolio transaction account2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 200.
	
	portfolio := self portfolioWithAccount: account2.
	
	self deny: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:25:01'!
FAILURE!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:26:23' prior: 50476205!
hasRegistered: aTransaction
	
	^accounts notEmpty ifTrue:[ accounts first hasRegistered: aTransaction ]! !

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:26:28'!
ERROR!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:28:52' prior: 50476252!
hasRegistered: aTransaction
	
	^accounts notEmpty ifTrue:[ accounts anyOne hasRegistered: aTransaction ]! !

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:28:55'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:28:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:28:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:28:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:28:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:28:55'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:28:55'!
ERROR!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:28:55'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:28:55'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:28:55'!
ERROR!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:29:42' prior: 50476261!
hasRegistered: aTransaction
	
	accounts notEmpty ifTrue:[ ^accounts anyOne hasRegistered: aTransaction ].
	
	^false! !

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:29:44'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:29:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:29:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:29:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:29:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:29:44'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:29:44'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:29:44'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:29:44'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:30:14' prior: 50476237!
test08XXX
	
	| account portfolio transaction account2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 200.
	
	portfolio := self portfolioWithAccount: account2.
	
	self deny: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:31:02' prior: 50476337!
test08XXX
	
	| account portfolio transaction account2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 200.
	
	portfolio := self portfolioWithAccount: account2.
	
	self deny: (portfolio hasRegistered: transaction)! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/19/2022 20:31:23' prior: 50476092 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:31:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:31:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:31:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:31:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:31:33'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:31:33'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:31:33'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:31:33'!
PASSED!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:31:48' prior: 50476300!
hasRegistered: aTransaction
	
	accounts notEmpty ifTrue:[ ^accounts first hasRegistered: aTransaction ].
	
	^false! !

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:31:50'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:31:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:31:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:31:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:31:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:31:50'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:31:50'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:31:50'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:31:50'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:33:45'!
test09XXX
	
	| accountRegisteringTransaction portfolio transaction otherAccount |
	
	accountRegisteringTransaction := ReceptiveAccount new.
	transaction := Deposit register: 100 on: accountRegisteringTransaction.
	
	otherAccount := self accountWithDepositOf: 200.
	
	portfolio := Portfolio new.
	portfolio addAccount: otherAccount.
	portfolio addAccount: accountRegisteringTransaction.
	
	self assert: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 20:33:47'!
FAILURE!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:34:40' prior: 50476396!
hasRegistered: aTransaction
	
	accounts anySatisfy:[ :account | account hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:34:44' prior: 50476451!
hasRegistered: aTransaction
	
	^accounts anySatisfy:[ :account | account hasRegistered: aTransaction ]! !

!testRun: #PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 20:35:09'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:35:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:35:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:35:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:35:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:35:09'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:35:09'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:35:09'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:35:09'!
PASSED!

!testRun: #PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 20:35:09'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:36:55'!
test10XXX
	
	| account portfolio portfolioToAdd transaction |
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolioToAdd := self portfolioWithAccount: account.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:37:01' prior: 50476495!
test10XXX
	
	| account portfolio portfolioToAdd transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolioToAdd := self portfolioWithAccount: account.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:37:02'!
FAILURE!
!ProgressInitiationExceptionTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:43:04'!
test03
	| countStorage |
	countStorage _ {0}.
	self
		should: [
			[self sampleProgress: countStorage]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
		raise: Error.
	self assert: countStorage first = 5.
	! !

!methodRemoval: ProgressInitiationExceptionTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:43:04'!
test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances
	| countStorage |
	countStorage _ {0}.
	self
		should: [
			[self sampleProgress: countStorage]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
		raise: Error.
	self assert: countStorage first = 5.
	!
!ProgressInitiationExceptionTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:43:11'!
test04
	| countStorage |
	countStorage _ {0}.
	self
		shouldnt: [
			[
				[self sampleProgress: countStorage]
				on: ZeroDivide
				do: [ :ex | ex resume]
			]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
		raise: Error.
	self assert: countStorage first = 10.
	! !

!methodRemoval: ProgressInitiationExceptionTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:43:11'!
test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance
	| countStorage |
	countStorage _ {0}.
	self
		shouldnt: [
			[
				[self sampleProgress: countStorage]
				on: ZeroDivide
				do: [ :ex | ex resume]
			]
				on: ProgressInitiationException
				do: [ :ex | ex sendNotificationsTo: [ :min :max :curr | Transcript show: min printString, '  ', max printString, '  ', curr printString; newLine ]]
			]
		raise: Error.
	self assert: countStorage first = 10.
	!

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:46:12'!
FAILURE!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:47:46' prior: 50476457!
hasRegistered: aTransaction
	
	(accounts anySatisfy:[ :account | account hasRegistered: aTransaction ]) ifTrue:[ ^true ] ifFalse:[ ^portfolios first hasRegistered: aTransaction ]! !

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:47:48'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:47:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:47:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:47:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:47:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:47:48'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:47:48'!
ERROR!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:47:48'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:47:48'!
ERROR!

!testRun: #PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 20:47:48'!
PASSED!

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:47:48'!
PASSED!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:49:00' prior: 50476595!
hasRegistered: aTransaction
	
	(accounts anySatisfy:[ :account | account hasRegistered: aTransaction ]) 
	ifTrue:[ ^true ] 
	ifFalse:[ 
		portfolios ifEmpty:[^false].
		^portfolios first hasRegistered: aTransaction 
	]! !

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:49:02'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:49:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:49:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:49:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:49:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:49:02'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:49:02'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:49:02'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:49:02'!
PASSED!

!testRun: #PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 20:49:02'!
PASSED!

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:49:02'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:50:04' prior: 50476509!
test10XXX
	
	| account portfolio portfolioToAdd transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolioToAdd := self portfolioWithAccount: account.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: (portfolio hasRegistered: transaction)! !
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:50:31' prior: 50476638!
hasRegistered: aTransaction
	
	(accounts anySatisfy:[ :account | account hasRegistered: aTransaction ]) 
	ifTrue:[ ^true ] 
	ifFalse:[ ^portfolios notEmpty ]! !

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:50:33'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:50:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:50:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:50:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:50:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:50:33'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:50:33'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:50:33'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:50:33'!
PASSED!

!testRun: #PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 20:50:33'!
PASSED!

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:50:33'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:50:54'!
test11XXX
	
	| account portfolio portfolioToAdd transaction account2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: account2.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	
	self deny: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test11XXX stamp: 'AEC 5/19/2022 20:50:58'!
FAILURE!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:51:08' prior: 50476697!
hasRegistered: aTransaction
	
	(accounts anySatisfy:[ :account | account hasRegistered: aTransaction ]) 
	ifTrue:[ ^true ] 
	ifFalse:[ 
		portfolios ifEmpty:[^false].
		^portfolios first hasRegistered: aTransaction 
	]! !

!testRun: #PortfolioTest #test11XXX stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!

!testRun: #PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!

!testRun: #PortfolioTest #test11XXX stamp: 'AEC 5/19/2022 20:51:09'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:52:03'!
test12XXX
	
	| account portfolio portfolioToAdd transaction account2 portfolioToAdd2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: account2.
	portfolioToAdd2 := self portfolioWithAccount: account.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	portfolio addPortfolio: portfolioToAdd2.
	
	self deny: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test11XXX stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!

!testRun: #PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 20:52:15'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 20:52:35' prior: 50476804!
test12XXX
	
	| account portfolio portfolioToAdd transaction account2 portfolioToAdd2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: account2.
	portfolioToAdd2 := self portfolioWithAccount: account.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	portfolio addPortfolio: portfolioToAdd2.
	
	self assert: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 20:53:12'!
FAILURE!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:54:20' prior: 50476757!
hasRegistered: aTransaction
	
	(accounts anySatisfy:[ :account | account hasRegistered: aTransaction ]) 
	ifTrue:[ ^true ] 
	ifFalse:[ 
		portfolios anySatisfy:[ :portfolio | portfolio hasRegistered: aTransaction ]
	]! !

!testRun: #PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 20:54:33'!
ERROR!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:54:44' prior: 50476884!
hasRegistered: aTransaction
	
	(accounts anySatisfy:[ :account | account hasRegistered: aTransaction ]) 
	ifTrue:[ ^true ] 
	ifFalse:[ 
		^portfolios anySatisfy:[ :portfolio | portfolio hasRegistered: aTransaction ]
	]! !

!testRun: #PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test11XXX stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!

!testRun: #PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 20:55:22'!
PASSED!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:57:01'!
hasAnyAccountRegistered: aTransaction

	^ accounts anySatisfy:[ :account | account hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:57:01' prior: 50476896!
hasRegistered: aTransaction
	
	(self hasAnyAccountRegistered: aTransaction) 
	ifTrue:[ ^true ] 
	ifFalse:[ 
		^portfolios anySatisfy:[ :portfolio | portfolio hasRegistered: aTransaction ]
	]! !
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:57:38'!
hasAnyPortfolioRegistered: aTransaction

	^ portfolios anySatisfy:[ :portfolio | portfolio hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:57:38' prior: 50476952!
hasRegistered: aTransaction
	
	(self hasAnyAccountRegistered: aTransaction) 
	ifTrue:[ ^true ] 
	ifFalse:[ 
		^self hasAnyPortfolioRegistered: aTransaction
	]! !
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:58:17' prior: 50476968!
hasRegistered: aTransaction
	
	(self hasAnyAccountRegistered: aTransaction) or:
	[self hasAnyPortfolioRegistered: aTransaction]! !

!testRun: #PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 20:58:19'!
ERROR!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/19/2022 20:58:26' prior: 50476976!
hasRegistered: aTransaction
	
	^(self hasAnyAccountRegistered: aTransaction) or:
	[self hasAnyPortfolioRegistered: aTransaction]! !

!testRun: #PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test11XXX stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!

!testRun: #PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 20:58:28'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/19/2022 20:58:55'!
sumOfAccountBalances

	^ accounts sum: [:account | account balance] ifEmpty: [0]! !
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/19/2022 20:58:55' prior: 50476097!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance := 	self sumOfAccountBalances.
	portfoliosBalance := 	portfolios sum: [:portfolio | portfolio balance] ifEmpty: [0].
	
	^accountsBalance + portfoliosBalance! !
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/19/2022 20:59:09'!
sumOfPortfolioBalances

	^ portfolios sum: [:portfolio | portfolio balance] ifEmpty: [0]! !
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/19/2022 20:59:09' prior: 50477038!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance := 	self sumOfAccountBalances.
	portfoliosBalance := 	self sumOfPortfolioBalances.
	
	^accountsBalance + portfoliosBalance! !
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/19/2022 20:59:29' prior: 50477054!
balance

	^self sumOfAccountBalances + self sumOfPortfolioBalances! !

!testRun: #PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test11XXX stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 20:59:32'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:00:21'!
test06EmptyPortfolioHasNotRegisteredATransaction
	
	| account portfolio transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	portfolio := Portfolio new.
	
	self deny: (portfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test06XXX stamp: 'AEC 5/19/2022 21:00:21'!
test06XXX
	
	| account portfolio transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	portfolio := Portfolio new.
	
	self deny: (portfolio hasRegistered: transaction)!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:01:18'!
test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount
	
	| account portfolio transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	portfolio := self portfolioWithAccount: account.
	
	self assert: (portfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test07XXX stamp: 'AEC 5/19/2022 21:01:18'!
test07XXX
	
	| account portfolio transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	portfolio := self portfolioWithAccount: account.
	
	self assert: (portfolio hasRegistered: transaction)!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:01:47'!
test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount
	
	| account portfolio transaction account2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 200.
	
	portfolio := self portfolioWithAccount: account2.
	
	self deny: (portfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test08XXX stamp: 'AEC 5/19/2022 21:01:47'!
test08XXX
	
	| account portfolio transaction account2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 200.
	
	portfolio := self portfolioWithAccount: account2.
	
	self deny: (portfolio hasRegistered: transaction)!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:02:21'!
test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount
	
	| accountRegisteringTransaction portfolio transaction otherAccount |
	
	accountRegisteringTransaction := ReceptiveAccount new.
	transaction := Deposit register: 100 on: accountRegisteringTransaction.
	
	otherAccount := self accountWithDepositOf: 200.
	
	portfolio := Portfolio new.
	portfolio addAccount: otherAccount.
	portfolio addAccount: accountRegisteringTransaction.
	
	self assert: (portfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test09XXX stamp: 'AEC 5/19/2022 21:02:21'!
test09XXX
	
	| accountRegisteringTransaction portfolio transaction otherAccount |
	
	accountRegisteringTransaction := ReceptiveAccount new.
	transaction := Deposit register: 100 on: accountRegisteringTransaction.
	
	otherAccount := self accountWithDepositOf: 200.
	
	portfolio := Portfolio new.
	portfolio addAccount: otherAccount.
	portfolio addAccount: accountRegisteringTransaction.
	
	self assert: (portfolio hasRegistered: transaction)!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:04:16'!
test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio
	
	| account portfolio portfolioToAdd transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolioToAdd := self portfolioWithAccount: account.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: (portfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test10XXX stamp: 'AEC 5/19/2022 21:04:16'!
test10XXX
	
	| account portfolio portfolioToAdd transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolioToAdd := self portfolioWithAccount: account.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: (portfolio hasRegistered: transaction)!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:05:14'!
test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio
	
	| account portfolio portfolioToAdd transaction account2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: account2.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	
	self deny: (portfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test11XXX stamp: 'AEC 5/19/2022 21:05:15'!
test11XXX
	
	| account portfolio portfolioToAdd transaction account2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: account2.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	
	self deny: (portfolio hasRegistered: transaction)!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:05:48'!
test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio
	
	| account portfolio portfolioToAdd transaction account2 portfolioToAdd2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: account2.
	portfolioToAdd2 := self portfolioWithAccount: account.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	portfolio addPortfolio: portfolioToAdd2.
	
	self assert: (portfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test12XXX stamp: 'AEC 5/19/2022 21:05:48'!
test12XXX
	
	| account portfolio portfolioToAdd transaction account2 portfolioToAdd2 |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	account2 := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: account2.
	portfolioToAdd2 := self portfolioWithAccount: account.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	portfolio addPortfolio: portfolioToAdd2.
	
	self assert: (portfolio hasRegistered: transaction)!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:05:51'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:05:55'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:06:15' prior: 50477149!
test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount
	
	| accountWithTransaction portfolio transaction account2 |
	
	accountWithTransaction := ReceptiveAccount new.
	transaction := Deposit register: 100 on: accountWithTransaction.
	
	account2 := self accountWithDepositOf: 200.
	
	portfolio := self portfolioWithAccount: account2.
	
	self deny: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:06:24' prior: 50477365!
test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount
	
	| accountWithTransaction portfolio transaction accountWithoutTransaction |
	
	accountWithTransaction := ReceptiveAccount new.
	transaction := Deposit register: 100 on: accountWithTransaction.
	
	accountWithoutTransaction := self accountWithDepositOf: 200.
	
	portfolio := self portfolioWithAccount: accountWithoutTransaction.
	
	self deny: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:06:37' prior: 50477175!
test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount
	
	| accountWithTransaction portfolio transaction otherAccount |
	
	accountWithTransaction := ReceptiveAccount new.
	transaction := Deposit register: 100 on: accountWithTransaction.
	
	otherAccount := self accountWithDepositOf: 200.
	
	portfolio := Portfolio new.
	portfolio addAccount: otherAccount.
	portfolio addAccount: accountWithTransaction.
	
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:07:14' prior: 50477399!
test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount
	
	| accountWithTransactionToAssert portfolio transaction otherAccount |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transaction := Deposit register: 100 on: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 200.
	
	portfolio := Portfolio new.
	portfolio addAccount: otherAccount.
	portfolio addAccount: accountWithTransactionToAssert.
	
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:07:23' prior: 50477417!
test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount
	
	| accountWithTransactionToAssert portfolio transactionToAssert otherAccount |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 200.
	
	portfolio := Portfolio new.
	portfolio addAccount: otherAccount.
	portfolio addAccount: accountWithTransactionToAssert.
	
	self assert: (portfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:08:08' prior: 50477210!
test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio
	
	| account portfolio childPortfolio transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	childPortfolio := self portfolioWithAccount: account.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: childPortfolio.
	
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:08:28' prior: 50477456!
test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio
	
	| account rootPortfolio childPortfolio transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	childPortfolio := self portfolioWithAccount: account.
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	
	self assert: (rootPortfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:08:56' prior: 50477238!
test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio
	
	| accountWithTransactionToAssert portfolio portfolioToAdd transaction account2 |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transaction := Deposit register: 100 on: accountWithTransactionToAssert.
	
	account2 := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: account2.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	
	self deny: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:09:02' prior: 50477488!
test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio
	
	| accountWithTransactionToAssert portfolio portfolioToAdd transactionToAssert account2 |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	account2 := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: account2.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	
	self deny: (portfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:09:09' prior: 50477508!
test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio
	
	| accountWithTransactionToAssert portfolio portfolioToAdd transactionToAssert otherAccount |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: otherAccount.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	
	self deny: (portfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:09:35' prior: 50477529!
test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio
	
	| accountWithTransactionToAssert rootPortfolio childPortfolio transactionToAssert otherAccount |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 300.
	
	childPortfolio := self portfolioWithAccount: otherAccount.
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	
	self deny: (rootPortfolio hasRegistered: transactionToAssert)! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:09:37'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:09:55' prior: 50477270!
test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio
	
	| accountWithTransactionToAssert portfolio portfolioToAdd transaction account2 portfolioToAdd2 |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transaction := Deposit register: 100 on: accountWithTransactionToAssert.
	
	account2 := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: account2.
	portfolioToAdd2 := self portfolioWithAccount: accountWithTransactionToAssert.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	portfolio addPortfolio: portfolioToAdd2.
	
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:10:01' prior: 50477623!
test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio
	
	| accountWithTransactionToAssert portfolio portfolioToAdd transactionToAssert account2 portfolioToAdd2 |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	account2 := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: account2.
	portfolioToAdd2 := self portfolioWithAccount: accountWithTransactionToAssert.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	portfolio addPortfolio: portfolioToAdd2.
	
	self assert: (portfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:10:07' prior: 50477647!
test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio
	
	| accountWithTransactionToAssert portfolio portfolioToAdd transactionToAssert otherAccount portfolioToAdd2 |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 300.
	
	portfolioToAdd := self portfolioWithAccount: otherAccount.
	portfolioToAdd2 := self portfolioWithAccount: accountWithTransactionToAssert.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioToAdd.
	portfolio addPortfolio: portfolioToAdd2.
	
	self assert: (portfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:10:51' prior: 50477672!
test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio
	
	| accountWithTransactionToAssert portfolio otherChildPortfolio transactionToAssert otherAccount childPortfolioWithTransactionToAssert |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 300.
	
	otherChildPortfolio := self portfolioWithAccount: otherAccount.
	childPortfolioWithTransactionToAssert := self portfolioWithAccount: accountWithTransactionToAssert.
	
	portfolio := Portfolio new.
	portfolio addPortfolio: otherChildPortfolio.
	portfolio addPortfolio: childPortfolioWithTransactionToAssert.
	
	self assert: (portfolio hasRegistered: transactionToAssert)! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:10:54'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:11:14' prior: 50477697!
test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio
	
	| accountWithTransactionToAssert rootPortfolio otherChildPortfolio transactionToAssert otherAccount childPortfolioWithTransactionToAssert |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 300.
	
	otherChildPortfolio := self portfolioWithAccount: otherAccount.
	childPortfolioWithTransactionToAssert := self portfolioWithAccount: accountWithTransactionToAssert.
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: otherChildPortfolio.
	rootPortfolio addPortfolio: childPortfolioWithTransactionToAssert.
	
	self assert: (rootPortfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/19/2022 21:13:48'!
portfolioWithPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioWithAccount: anAccount. 
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	
	^rootPortfolio! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:14:33' prior: 50477472!
test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio
	
	| account rootPortfolio transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	rootPortfolio := self portfolioWithPortfolioWithAccount: account. 
	
	self assert: (rootPortfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:14:39'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:15:34' prior: 50477550!
test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio
	
	| accountWithTransactionToAssert rootPortfolio transactionToAssert |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	rootPortfolio := self portfolioWithPortfolioWithAccount: (self accountWithDepositOf: 300).
	
	self deny: (rootPortfolio hasRegistered: transactionToAssert)! !

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:15:45'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:16:41'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:20:02'!
test13XXX

	| portfolio |
	portfolio := Portfolio new.
	
	self assert: portfolio transactions isEmpty! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:20:08' prior: 50478004!
test13XXX

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions isEmpty! !

!testRun: #PortfolioTest #test13XXX stamp: 'AEC 5/19/2022 21:20:08'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'AEC 5/19/2022 21:20:24'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/19/2022 21:21:00' prior: 50478018!
transactions
	
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test13XXX stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!

!testRun: #PortfolioTest #test13XXX stamp: 'AEC 5/19/2022 21:21:02'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:22:36'!
test14XXX

	| portfolio account |
	
	account := self accountWithDepositOf: 300.
	portfolio := self portfolioWithAccount: account.
	
	self assert: portfolio transactions equals: account transactions.! !

!testRun: #PortfolioTest #test14XXX stamp: 'AEC 5/19/2022 21:22:42'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/19/2022 21:24:04' prior: 50478023!
transactions
	
	accounts isEmpty ifTrue: [^OrderedCollection new.].
	^accounts first transactions! !

!testRun: #PortfolioTest #test14XXX stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test13XXX stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!

!testRun: #PortfolioTest #test14XXX stamp: 'AEC 5/19/2022 21:24:07'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:25:34'!
test15XXX

	| portfolio otherAccount account |
	
	account := self accountWithDepositOf: 300.
	otherAccount := self accountWithDepositOf: 300.
	
	portfolio := Portfolio new.
	portfolio addAccount: account.
	portfolio addAccount: otherAccount. 
	
	self assert: portfolio transactions equals: account transactions + otherAccount transactions.! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:25:49' prior: 50478159!
test15XXX

	| portfolio otherAccount account |
	
	account := self accountWithDepositOf: 300.
	otherAccount := self accountWithDepositOf: 300.
	
	portfolio := Portfolio new.
	portfolio addAccount: account.
	portfolio addAccount: otherAccount. 
	
	self assert: portfolio transactions equals: (account transactions + otherAccount transactions).! !

!testRun: #PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:25:50'!
ERROR!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:26:12' prior: 50478173!
test15XXX

	| portfolio otherAccount account |
	
	account := self accountWithDepositOf: 300.
	otherAccount := self accountWithDepositOf: 300.
	
	portfolio := Portfolio new.
	portfolio addAccount: account.
	portfolio addAccount: otherAccount. 
	
	self assert: portfolio transactions equals: (account transactions + (otherAccount transactions)).! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:26:22' prior: 50478189!
test15XXX

	| portfolio otherAccount account |
	
	account := self accountWithDepositOf: 300.
	otherAccount := self accountWithDepositOf: 300.
	
	portfolio := Portfolio new.
	portfolio addAccount: account.
	portfolio addAccount: otherAccount. 
	
	self assert: portfolio transactions equals: account transactions + (otherAccount transactions).! !

!testRun: #PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:26:22'!
ERROR!

!testRun: #PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:26:49'!
ERROR!

!testRun: #PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:26:49'!
ERROR!

account transactions!

otherAccount transactions!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:28:06' prior: 50478203!
test15XXX

	| portfolio otherAccount account |
	
	account := self accountWithDepositOf: 300.
	otherAccount := self accountWithDepositOf: 300.
	
	portfolio := Portfolio new.
	portfolio addAccount: account.
	portfolio addAccount: otherAccount. 
	
	self assert: portfolio transactions equals: account transactions,(otherAccount transactions).! !

!testRun: #PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:28:09'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/19/2022 21:31:35' prior: 50478095!
transactions
	
	^accounts inject: OrderedCollection new
			into: [:transactions :account | transactions,(account transactions)]! !

!testRun: #PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test13XXX stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test14XXX stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!

!testRun: #PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:31:38'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(portfolios _ [
	(OrderedCollection
		cover: (64 to: 80)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{82 to: 84})
		cover: (50 to: 59)
		declaredAt: (50 to: 59).! !
!Behavior method!
balance
	^ [
	([
	(self coverAll:
		{12 to: 15}) sumOfAccountBalances ] valueCoveringAll:
		{17 to: 36}) +
		([
		(self coverAll:
			{40 to: 43}) sumOfPortfolioBalances ] valueCoveringAll:
			{45 to: 66}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
sumOfAccountBalances
	^ [
	(accounts
		cover: (26 to: 33)
		declaredAt: (26 to: 33))
		sum: [ :account |
			[
			(account
				cover: (52 to: 58)
				declaredAt: (42 to: 48)) balance ] valueCoveringAll:
				{60 to: 66} ]
		ifEmpty: [
			0 coverAll:
				{79 to: 79} ]] valueCoveringAll:
		{35 to: 38. 69 to: 76}.! !
!Behavior method!
sumOfPortfolioBalances
	^ [
	(portfolios
		cover: (28 to: 37)
		declaredAt: (28 to: 37))
		sum: [ :portfolio |
			[
			(portfolio
				cover: (58 to: 66)
				declaredAt: (46 to: 54)) balance ] valueCoveringAll:
				{68 to: 74} ]
		ifEmpty: [
			0 coverAll:
				{87 to: 87} ]] valueCoveringAll:
		{39 to: 42. 77 to: 84}.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:32:43'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addAccount: aReceptiveAccount
	[
	(accounts
		cover: (35 to: 42)
		declaredAt: (35 to: 42)) add:
		(aReceptiveAccount
			cover: (49 to: 65)
			declaredAt: (13 to: 29)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{33 to: 33})
		into: [ :balance :transaction |
			[
			(transaction
				cover: (66 to: 76)
				declaredAt: (52 to: 62)) updateBalance:
				(balance
					cover: (93 to: 99)
					declaredAt: (43 to: 49)) ] valueCoveringAll:
				{78 to: 91} ]] valueCoveringAll:
		{25 to: 31. 35 to: 39}.! !
!Behavior method!
updateBalance: aBalance
	^ [
	(aBalance
		cover: (29 to: 36)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{40 to: 43}) value ] valueCoveringAll:
			{45 to: 49}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!
!Behavior method!
addPortfolio: aPortfolio
	[
	(portfolios
		cover: (30 to: 39)
		declaredAt: (30 to: 39)) add:
		(aPortfolio
			cover: (46 to: 55)
			declaredAt: (15 to: 24)) ] valueCoveringAll:
		{41 to: 44}.! !

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	([
	(self coverAll:
		{34 to: 37}) hasAnyAccountRegistered:
		(aTransaction
			cover: (64 to: 75)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{39 to: 62}) or: [
		[
		(self coverAll:
			{84 to: 87}) hasAnyPortfolioRegistered:
			(aTransaction
				cover: (116 to: 127)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{89 to: 114} ]] valueCoveringAll:
		{78 to: 80}.! !
!Behavior method!
hasAnyAccountRegistered: aTransaction
	^ [
	(accounts
		cover: (43 to: 50)
		declaredAt: (43 to: 50)) anySatisfy: [ :account |
		[
		(account
			cover: (76 to: 82)
			declaredAt: (66 to: 72)) hasRegistered:
			(aTransaction
				cover: (99 to: 110)
				declaredAt: (26 to: 37)) ] valueCoveringAll:
			{84 to: 97} ]] valueCoveringAll:
		{52 to: 62}.! !
!Behavior method!
hasAnyPortfolioRegistered: aTransaction
	^ [
	(portfolios
		cover: (45 to: 54)
		declaredAt: (45 to: 54)) anySatisfy: [ :portfolio |
		[
		(portfolio
			cover: (82 to: 90)
			declaredAt: (70 to: 78)) hasRegistered:
			(aTransaction
				cover: (107 to: 118)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{92 to: 105} ]] valueCoveringAll:
		{56 to: 66}.! !

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!
!Behavior method!
transactions
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25))
		inject:
			([
			(OrderedCollection
				cover: (35 to: 51)
				declaredAt: (35 to: 51)) new ] valueCoveringAll:
				{53 to: 55})
		into: [ :transactions :account |
			[
			(transactions
				cover: (92 to: 103)
				declaredAt: (68 to: 79)) ,
				([
				(account
					cover: (106 to: 112)
					declaredAt: (82 to: 88)) transactions ] valueCoveringAll:
					{114 to: 125}) ] valueCoveringAll:
				{104 to: 104} ]] valueCoveringAll:
		{27 to: 33. 60 to: 64}.! !

!testRun: #PortfolioTest #test13XXX stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test14XXX stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!

!testRun: #PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:32:44'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:35:48'!
test16XXX
	
	| childPortfolio portfolio rootPortfolio |
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	
	self assert: portfolio transactions equals: childPortfolio transactions.! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:35:59' prior: 50478559!
test16XXX
	
	| childPortfolio rootPortfolio |
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions.! !

!testRun: #PortfolioTest #test16XXX stamp: 'AEC 5/19/2022 21:36:02'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/19/2022 21:38:40' prior: 50478242!
transactions
	
	| accountTransactions portfolioTransactions |
	accountTransactions := accounts inject: OrderedCollection new into: [:transactions :account | transactions,(account transactions)].
	
	portfolios isEmpty ifFalse: [
		portfolioTransactions := portfolios first transactions.
		^accountTransactions,portfolioTransactions
	].

	^accountTransactions! !

!testRun: #PortfolioTest #test16XXX stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test13XXX stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test14XXX stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!

!testRun: #PortfolioTest #test16XXX stamp: 'AEC 5/19/2022 21:38:47'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:39:33'!
test17XXX
	
	| childPortfolio rootPortfolio childPortfolio2 |
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	childPortfolio2 := self portfolioWithAccount: (self accountWithDepositOf: 300).
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	rootPortfolio addPortfolio: childPortfolio2.
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions,(childPortfolio2 transactions).! !

!testRun: #PortfolioTest #test17XXX stamp: 'AEC 5/19/2022 21:39:36'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:39:44' prior: 50478663!
test17XXX
	
	| childPortfolio rootPortfolio childPortfolio2 |
	
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	childPortfolio2 := self portfolioWithAccount: (self accountWithDepositOf: 300).
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	rootPortfolio addPortfolio: childPortfolio2.
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions,(childPortfolio2 transactions).! !
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/19/2022 21:40:23' prior: 50478586!
transactions
	
	| accountTransactions portfolioTransactions |
	accountTransactions := accounts inject: OrderedCollection new into: [:transactions :account | transactions,(account transactions)].
	
	portfolioTransactions := portfolios inject: OrderedCollection new into: [:transactions :portfolio | transactions,(portfolio transactions)].

	^accountTransactions,portfolioTransactions! !

!testRun: #PortfolioTest #test17XXX stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test13XXX stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test14XXX stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test16XXX stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!

!testRun: #PortfolioTest #test17XXX stamp: 'AEC 5/19/2022 21:40:26'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/19/2022 21:41:20'!
allAccountsTransactions

	^ accounts inject: OrderedCollection new into: [:transactions :account | transactions,(account transactions)]! !
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/19/2022 21:41:20' prior: 50478701!
transactions
	
	| accountTransactions portfolioTransactions |
	accountTransactions := self allAccountsTransactions.
	
	portfolioTransactions := portfolios inject: OrderedCollection new into: [:transactions :portfolio | transactions,(portfolio transactions)].

	^accountTransactions,portfolioTransactions! !
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/19/2022 21:41:31'!
allPortfolioTransactions

	^ portfolios inject: OrderedCollection new into: [:transactions :portfolio | transactions,(portfolio transactions)]! !
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/19/2022 21:41:31' prior: 50478789!
transactions
	
	| accountTransactions portfolioTransactions |
	accountTransactions := self allAccountsTransactions.
	
	portfolioTransactions := self allPortfolioTransactions.

	^accountTransactions,portfolioTransactions! !
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/19/2022 21:41:56' prior: 50478809!
transactions
	
	self allAccountsTransactions, (self allPortfolioTransactions).! !
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/19/2022 21:42:02' prior: 50478819!
transactions
	
	^self allAccountsTransactions,(self allPortfolioTransactions).! !

!testRun: #PortfolioTest #test17XXX stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test13XXX stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test14XXX stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test16XXX stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!

!testRun: #PortfolioTest #test17XXX stamp: 'AEC 5/19/2022 21:42:04'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:42:39'!
test13EmptyPortfolioHasNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions isEmpty! !

!methodRemoval: PortfolioTest #test13XXX stamp: 'AEC 5/19/2022 21:42:39'!
test13XXX

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions isEmpty!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:43:32'!
test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions

	| portfolio account |
	
	account := self accountWithDepositOf: 300.
	portfolio := self portfolioWithAccount: account.
	
	self assert: portfolio transactions equals: account transactions.! !

!methodRemoval: PortfolioTest #test14XXX stamp: 'AEC 5/19/2022 21:43:32'!
test14XXX

	| portfolio account |
	
	account := self accountWithDepositOf: 300.
	portfolio := self portfolioWithAccount: account.
	
	self assert: portfolio transactions equals: account transactions.!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:43:59'!
test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions

	| portfolio otherAccount account |
	
	account := self accountWithDepositOf: 300.
	otherAccount := self accountWithDepositOf: 300.
	
	portfolio := Portfolio new.
	portfolio addAccount: account.
	portfolio addAccount: otherAccount. 
	
	self assert: portfolio transactions equals: account transactions,(otherAccount transactions).! !

!methodRemoval: PortfolioTest #test15XXX stamp: 'AEC 5/19/2022 21:43:59'!
test15XXX

	| portfolio otherAccount account |
	
	account := self accountWithDepositOf: 300.
	otherAccount := self accountWithDepositOf: 300.
	
	portfolio := Portfolio new.
	portfolio addAccount: account.
	portfolio addAccount: otherAccount. 
	
	self assert: portfolio transactions equals: account transactions,(otherAccount transactions).!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:44:39'!
test16PortfolioWithPortfolioTransactionsAreThatPortfolioTransactions
	
	| childPortfolio rootPortfolio |
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions.! !

!methodRemoval: PortfolioTest #test16XXX stamp: 'AEC 5/19/2022 21:44:39'!
test16XXX
	
	| childPortfolio rootPortfolio |
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions.!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:45:05'!
test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions
	
	| childPortfolio rootPortfolio childPortfolio2 |
	
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	childPortfolio2 := self portfolioWithAccount: (self accountWithDepositOf: 300).
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	rootPortfolio addPortfolio: childPortfolio2.
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions,(childPortfolio2 transactions).! !

!methodRemoval: PortfolioTest #test17XXX stamp: 'AEC 5/19/2022 21:45:05'!
test17XXX
	
	| childPortfolio rootPortfolio childPortfolio2 |
	
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	childPortfolio2 := self portfolioWithAccount: (self accountWithDepositOf: 300).
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	rootPortfolio addPortfolio: childPortfolio2.
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions,(childPortfolio2 transactions).!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:45:14'!
test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions
	
	| childPortfolio rootPortfolio |
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions.! !

!methodRemoval: PortfolioTest #test16PortfolioWithPortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/19/2022 21:45:14'!
test16PortfolioWithPortfolioTransactionsAreThatPortfolioTransactions
	
	| childPortfolio rootPortfolio |
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	
	rootPortfolio := Portfolio new.
	rootPortfolio addPortfolio: childPortfolio.
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions.!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/19/2022 21:45:17'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:47:46'!
test18XXX

	| account portfolio |
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioWithAccount: account.
	
	self should: [ portfolio addAccount: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/19/2022 21:47:54' prior: 50479117!
test18XXX

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioWithAccount: account.
	
	self should: [ portfolio addAccount: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/19/2022 21:51:07'!
ERROR!
!Portfolio class methodsFor: 'error-description' stamp: 'AEC 5/19/2022 21:51:19'!
duplicatedAccountErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'error-description' stamp: 'AEC 5/19/2022 21:51:55' prior: 50479141!
duplicatedAccountErrorDescription
	
	^'La cuenta ya existe dentro del portfolio.'! !

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/19/2022 21:51:56'!
FAILURE!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/19/2022 21:52:03'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/19/2022 21:52:03'!
FAILURE!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/19/2022 21:52:03'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/19/2022 21:53:04' prior: 50476113!
addAccount: aReceptiveAccount 
	
	(accounts includes: aReceptiveAccount) ifTrue: [ self error: self class duplicatedAccountErrorDescription ].
	accounts add: aReceptiveAccount ! !

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/19/2022 21:53:07'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/19/2022 21:53:45'!
assertPortfolioDoesNotHave: aReceptiveAccount

	^ (accounts includes: aReceptiveAccount) ifTrue: [ self error: self class duplicatedAccountErrorDescription ]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/19/2022 21:53:45' prior: 50479234!
addAccount: aReceptiveAccount 
	
	self assertPortfolioDoesNotHave: aReceptiveAccount.
	accounts add: aReceptiveAccount ! !

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/19/2022 21:53:51'!
PASSED!

----QUIT----(19 May 2022 21:59:12) CuisUniversity-5096.image priorSource: 4611941!

----STARTUP---- (19 May 2022 21:59:24) as /home/clinux01/Documentos/Portfolio/linux64/CuisUniversity-5096.image!


----QUIT----(19 May 2022 21:59:36) CuisUniversity-5096.image priorSource: 4728299!

----STARTUP---- (22 May 2022 16:42:52) as /mnt/c/Users/Ari/Desktop/Ingenieria/CuisUniversity/Portfolio/linux64/CuisUniversity-5096.image!


!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 16:44:19'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 16:44:23'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 16:58:25'!
test19XXX

	| account childPortfolio rootPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := self portfolioWithAccount: account.
	
	self should: [ rootPortfolio addPortfolio: childPortfolio] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 16:58:45'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 17:07:52' prior: 50479500!
test19XXX

	| account rootPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithPortfolioWithAccount: account.
	
	self should: [ rootPortfolio addAccount: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 17:07:56'!
FAILURE!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 17:08:17'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:09:01' prior: 50479327!
addAccount: aReceptiveAccount 
	
	self assertPortfolioDoesNotHave: aReceptiveAccount.
	self assertChildPortfoliosDontHave: aReceptiveAccount.
	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:10:36'!
assertChildPortfoliosDontHave: aReceptiveAccount 
	
	(portfolios anySatisfy:[ :portfolio | 
		accounts anySatisfy:[:account | portfolio hasRegistered: account ]
	]) ifTrue: [self error: self class duplicatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 17:10:39'!
FAILURE!

portfolios anySatisfy:[ :portfolio | 
		accounts anySatisfy:[:account | portfolio hasRegistered: account ]
	]!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:12:50' prior: 50479541!
assertChildPortfoliosDontHave: aReceptiveAccount 
	
	(portfolios anySatisfy:[ :portfolio | 
		portfolio hasRegistered: aReceptiveAccount ]
	) ifTrue: [self error: self class duplicatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 17:12:54'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 17:12:54'!
FAILURE!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 17:12:54'!
FAILURE!

portfolios anySatisfy:[ :portfolio | 
		portfolio hasRegistered: aReceptiveAccount ]!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:17:26' prior: 50479557!
assertChildPortfoliosDontHave: aReceptiveAccount 
	
	portfolios do:[ :portfolio | 
		portfolio assertPortfolioDoesNotHave: aReceptiveAccount ]! !

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 17:17:30'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 17:19:39'!
test20XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	
	rootPortfolio addPortfolio: childPortfolio.
	
	self should: [ childPortfolio addAccount: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 17:19:53'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:24:19' prior: 50476131!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio.
	aPortfolio addParentPortfolio: self! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/22/2022 17:24:47'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:24:45'!
addParentPortfolio: aPortfolio 
	
	parentPortfolios add: aPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:25:03' prior: 50476363 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	parentPortfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:25:37' prior: 50479533!
addAccount: aReceptiveAccount 
	
	self assertPortfolioDoesNotHave: aReceptiveAccount.
	self assertChildPortfoliosDontHave: aReceptiveAccount.
	self assertParentPortfoliosDontHave: aReceptiveAccount.
	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:26:03'!
assertParentPortfoliosDontHave: aReceptiveAccount 
	
	parentPortfolios do:[ :portfolio | 
		portfolio assertPortfolioDoesNotHave: aReceptiveAccount ]! !

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 17:26:07'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 17:28:19'!
test21XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithPortfolioWithAccount: account.
	childPortfolio := self portfolioWithAccount: account.
	
	self should: [ rootPortfolio addPortfolio: childPortfolio ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 17:28:32'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:40:31' prior: 50479751!
addPortfolio: aPortfolio 
	
	portfolios do: [:portfolio | portfolio assertDoesNotShareAccountsWith: aPortfolio].
	portfolios add: aPortfolio.
	aPortfolio addParentPortfolio: self! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:41:32'!
assertDoesNotShareAccountWith: aPortfolio

	accounts do: [:account | aPortfolio assertPortfolioDoesNotHave: account]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:42:14'!
assertDoesNotHave: aReceptiveAccount

	^ (accounts includes: aReceptiveAccount) ifTrue: [ self error: self class duplicatedAccountErrorDescription ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 17:42:15' prior: 50479648!
assertChildPortfoliosDontHave: aReceptiveAccount 
	
	portfolios do:[ :portfolio | 
		portfolio assertDoesNotHave: aReceptiveAccount ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 17:42:15' prior: 50479788!
assertParentPortfoliosDontHave: aReceptiveAccount 
	
	parentPortfolios do:[ :portfolio | 
		portfolio assertDoesNotHave: aReceptiveAccount ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 17:42:15' prior: 50479902!
assertDoesNotShareAccountWith: aPortfolio

	accounts do: [:account | aPortfolio assertDoesNotHave: account]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 17:42:15' prior: 50479778!
addAccount: aReceptiveAccount 
	
	self assertDoesNotHave: aReceptiveAccount.
	self assertChildPortfoliosDontHave: aReceptiveAccount.
	self assertParentPortfoliosDontHave: aReceptiveAccount.
	accounts add: aReceptiveAccount ! !

!methodRemoval: Portfolio #assertPortfolioDoesNotHave: stamp: 'AEC 5/22/2022 17:42:15'!
assertPortfolioDoesNotHave: aReceptiveAccount

	^ (accounts includes: aReceptiveAccount) ifTrue: [ self error: self class duplicatedAccountErrorDescription ]!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:42:46'!
assertDoesNotShareAccountsWith: aPortfolio

	accounts do: [:account | aPortfolio assertDoesNotHave: account]! !

!methodRemoval: Portfolio #assertDoesNotShareAccountWith: stamp: 'AEC 5/22/2022 17:42:47'!
assertDoesNotShareAccountWith: aPortfolio

	accounts do: [:account | aPortfolio assertDoesNotHave: account]!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 17:42:52'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 17:45:53'!
test22XXX

	| account rootPortfolio childPortfolio grandchildPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := self portfolioWithAccount: account.
	
	portfolioToAdd := self portfolioWithAccount: account.
	
	rootPortfolio addPortfolio: childPortfolio.
	childPortfolio addPortfolio: grandchildPortfolio.
		
	self should: [ rootPortfolio addPortfolio: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 17:46:11'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:48:20' prior: 50479908!
assertDoesNotHave: aReceptiveAccount

	(accounts includes: aReceptiveAccount) ifTrue: [^ self error: self class duplicatedAccountErrorDescription ].
	
	portfolios do:[:portfolio | portfolio assertDoesNotHave: aReceptiveAccount]! !

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 17:48:24'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:49:33' prior: 50480075!
assertDoesNotHave: aReceptiveAccount

	(accounts includes: aReceptiveAccount) ifTrue: [^ self error: self class duplicatedAccountErrorDescription ].! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 17:50:44' prior: 50479956!
assertDoesNotShareAccountsWith: aPortfolio

	accounts do: [:account | aPortfolio assertDoesNotHave: account].
	portfolios do: [:portfolio | portfolio assertDoesNotShareAccountsWith: aPortfolio]! !

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 17:50:49'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 17:55:30'!
test23XXX

	| account rootPortfolio childPortfolio grandchildPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := self portfolioWithAccount: account.
		
	self should: [ rootPortfolio addAccount: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 17:55:51' prior: 50480191!
test23XXX

	| account rootPortfolio childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := self portfolioWithAccount: account.
		
	self should: [ rootPortfolio addAccount: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 17:56:44' prior: 50480206!
test23XXX

	| account rootPortfolio childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := self portfolioWithAccount: account.
	
	rootPortfolio addPortfolio: childPortfolio.
	childPortfolio addPortfolio: grandchildPortfolio.
		
	self should: [ rootPortfolio addAccount: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 17:57:19' prior: 50480221!
test23XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := Portfolio new.
	childPortfolio := self portfolioWithPortfolioWithAccount: account.
	
	rootPortfolio addPortfolio: childPortfolio.
		
	self should: [ rootPortfolio addAccount: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 17:57:24'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:13:46' prior: 50480088!
assertDoesNotHave: aReceptiveAccount

	(accounts includes: aReceptiveAccount) ifTrue: [^ self error: self class duplicatedAccountErrorDescription ].
	
	portfolios do: [:portfolio | portfolio assertDoesNotHave: aReceptiveAccount ]! !

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 18:14:13'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(portfolios _ [
	(OrderedCollection
		cover: (64 to: 80)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{82 to: 84})
		cover: (50 to: 59)
		declaredAt: (50 to: 59).
	(parentPortfolios _ [
	(OrderedCollection
		cover: (108 to: 124)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{126 to: 128})
		cover: (88 to: 103)
		declaredAt: (88 to: 103).! !
!Behavior method!
balance
	^ [
	([
	(self coverAll:
		{12 to: 15}) sumOfAccountBalances ] valueCoveringAll:
		{17 to: 36}) +
		([
		(self coverAll:
			{40 to: 43}) sumOfPortfolioBalances ] valueCoveringAll:
			{45 to: 66}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
sumOfAccountBalances
	^ [
	(accounts
		cover: (26 to: 33)
		declaredAt: (26 to: 33))
		sum: [ :account |
			[
			(account
				cover: (52 to: 58)
				declaredAt: (42 to: 48)) balance ] valueCoveringAll:
				{60 to: 66} ]
		ifEmpty: [
			0 coverAll:
				{79 to: 79} ]] valueCoveringAll:
		{35 to: 38. 69 to: 76}.! !
!Behavior method!
sumOfPortfolioBalances
	^ [
	(portfolios
		cover: (28 to: 37)
		declaredAt: (28 to: 37))
		sum: [ :portfolio |
			[
			(portfolio
				cover: (58 to: 66)
				declaredAt: (46 to: 54)) balance ] valueCoveringAll:
				{68 to: 74} ]
		ifEmpty: [
			0 coverAll:
				{87 to: 87} ]] valueCoveringAll:
		{39 to: 42. 77 to: 84}.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addAccount: aReceptiveAccount
	[
	(self coverAll:
		{35 to: 38}) assertDoesNotHave:
		(aReceptiveAccount
			cover: (59 to: 75)
			declaredAt: (13 to: 29)) ] valueCoveringAll:
		{40 to: 57}.
	[
	(self coverAll:
		{79 to: 82}) assertChildPortfoliosDontHave:
		(aReceptiveAccount
			cover: (115 to: 131)
			declaredAt: (13 to: 29)) ] valueCoveringAll:
		{84 to: 113}.
	[
	(self coverAll:
		{135 to: 138}) assertParentPortfoliosDontHave:
		(aReceptiveAccount
			cover: (172 to: 188)
			declaredAt: (13 to: 29)) ] valueCoveringAll:
		{140 to: 170}.
	[
	(accounts
		cover: (192 to: 199)
		declaredAt: (192 to: 199)) add:
		(aReceptiveAccount
			cover: (206 to: 222)
			declaredAt: (13 to: 29)) ] valueCoveringAll:
		{201 to: 204}.! !
!Behavior method!
assertDoesNotHave: aReceptiveAccount
	[
	([
	(accounts
		cover: (41 to: 48)
		declaredAt: (41 to: 48)) includes:
		(aReceptiveAccount
			cover: (60 to: 76)
			declaredAt: (20 to: 36)) ] valueCoveringAll:
		{50 to: 58}) ifTrue: [ ^ [
		(self coverAll:
			{90 to: 93}) error:
			([
			([
			(self coverAll:
				{102 to: 105}) class ] valueCoveringAll:
				{107 to: 111}) duplicatedAccountErrorDescription ] valueCoveringAll:
				{113 to: 145}) ] valueCoveringAll:
			{95 to: 100} ]] valueCoveringAll:
		{79 to: 85}.
	[
	(portfolios
		cover: (153 to: 162)
		declaredAt: (153 to: 162)) do: [ :portfolio |
		[
		(portfolio
			cover: (182 to: 190)
			declaredAt: (170 to: 178)) assertDoesNotHave:
			(aReceptiveAccount
				cover: (211 to: 227)
				declaredAt: (20 to: 36)) ] valueCoveringAll:
			{192 to: 209} ]] valueCoveringAll:
		{164 to: 166}.! !
!Behavior method!
assertChildPortfoliosDontHave: aReceptiveAccount
	[
	(portfolios
		cover: (54 to: 63)
		declaredAt: (54 to: 63)) do: [ :portfolio |
		[
		(portfolio
			cover: (86 to: 94)
			declaredAt: (71 to: 79)) assertDoesNotHave:
			(aReceptiveAccount
				cover: (115 to: 131)
				declaredAt: (32 to: 48)) ] valueCoveringAll:
			{96 to: 113} ]] valueCoveringAll:
		{65 to: 67}.! !
!Behavior method!
assertParentPortfoliosDontHave: aReceptiveAccount
	[
	(parentPortfolios
		cover: (55 to: 70)
		declaredAt: (55 to: 70)) do: [ :portfolio |
		[
		(portfolio
			cover: (93 to: 101)
			declaredAt: (78 to: 86)) assertDoesNotHave:
			(aReceptiveAccount
				cover: (122 to: 138)
				declaredAt: (33 to: 49)) ] valueCoveringAll:
			{103 to: 120} ]] valueCoveringAll:
		{72 to: 74}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{33 to: 33})
		into: [ :balance :transaction |
			[
			(transaction
				cover: (66 to: 76)
				declaredAt: (52 to: 62)) updateBalance:
				(balance
					cover: (93 to: 99)
					declaredAt: (43 to: 49)) ] valueCoveringAll:
				{78 to: 91} ]] valueCoveringAll:
		{25 to: 31. 35 to: 39}.! !
!Behavior method!
updateBalance: aBalance
	^ [
	(aBalance
		cover: (29 to: 36)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{40 to: 43}) value ] valueCoveringAll:
			{45 to: 49}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!
!Behavior method!
addPortfolio: aPortfolio
	[
	(portfolios
		cover: (30 to: 39)
		declaredAt: (30 to: 39)) do: [ :portfolio |
		[
		(portfolio
			cover: (59 to: 67)
			declaredAt: (47 to: 55)) assertDoesNotShareAccountsWith:
			(aPortfolio
				cover: (101 to: 110)
				declaredAt: (15 to: 24)) ] valueCoveringAll:
			{69 to: 99} ]] valueCoveringAll:
		{41 to: 43}.
	[
	(portfolios
		cover: (115 to: 124)
		declaredAt: (30 to: 39)) add:
		(aPortfolio
			cover: (131 to: 140)
			declaredAt: (15 to: 24)) ] valueCoveringAll:
		{126 to: 129}.
	[
	(aPortfolio
		cover: (144 to: 153)
		declaredAt: (15 to: 24)) addParentPortfolio:
		(self coverAll:
			{175 to: 178}) ] valueCoveringAll:
		{155 to: 173}.! !
!Behavior method!
addParentPortfolio: aPortfolio
	[
	(parentPortfolios
		cover: (36 to: 51)
		declaredAt: (36 to: 51)) add:
		(aPortfolio
			cover: (58 to: 67)
			declaredAt: (21 to: 30)) ] valueCoveringAll:
		{53 to: 56}.! !

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!
!Behavior method!
assertDoesNotShareAccountsWith: aPortfolio
	[
	(accounts
		cover: (46 to: 53)
		declaredAt: (46 to: 53)) do: [ :account |
		[
		(aPortfolio
			cover: (71 to: 80)
			declaredAt: (33 to: 42)) assertDoesNotHave:
			(account
				cover: (101 to: 107)
				declaredAt: (61 to: 67)) ] valueCoveringAll:
			{82 to: 99} ]] valueCoveringAll:
		{55 to: 57}.
	[
	(portfolios
		cover: (112 to: 121)
		declaredAt: (112 to: 121)) do: [ :portfolio |
		[
		(portfolio
			cover: (141 to: 149)
			declaredAt: (129 to: 137)) assertDoesNotShareAccountsWith:
			(aPortfolio
				cover: (183 to: 192)
				declaredAt: (33 to: 42)) ] valueCoveringAll:
			{151 to: 181} ]] valueCoveringAll:
		{123 to: 125}.! !

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	([
	(self coverAll:
		{34 to: 37}) hasAnyAccountRegistered:
		(aTransaction
			cover: (64 to: 75)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{39 to: 62}) or: [
		[
		(self coverAll:
			{84 to: 87}) hasAnyPortfolioRegistered:
			(aTransaction
				cover: (116 to: 127)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{89 to: 114} ]] valueCoveringAll:
		{78 to: 80}.! !
!Behavior method!
hasAnyAccountRegistered: aTransaction
	^ [
	(accounts
		cover: (43 to: 50)
		declaredAt: (43 to: 50)) anySatisfy: [ :account |
		[
		(account
			cover: (76 to: 82)
			declaredAt: (66 to: 72)) hasRegistered:
			(aTransaction
				cover: (99 to: 110)
				declaredAt: (26 to: 37)) ] valueCoveringAll:
			{84 to: 97} ]] valueCoveringAll:
		{52 to: 62}.! !
!Behavior method!
hasAnyPortfolioRegistered: aTransaction
	^ [
	(portfolios
		cover: (45 to: 54)
		declaredAt: (45 to: 54)) anySatisfy: [ :portfolio |
		[
		(portfolio
			cover: (82 to: 90)
			declaredAt: (70 to: 78)) hasRegistered:
			(aTransaction
				cover: (107 to: 118)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{92 to: 105} ]] valueCoveringAll:
		{56 to: 66}.! !

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!
!Behavior method!
transactions
	^ [
	([
	(self coverAll:
		{18 to: 21}) allAccountsTransactions ] valueCoveringAll:
		{23 to: 45}) ,
		([
		(self coverAll:
			{48 to: 51}) allPortfolioTransactions ] valueCoveringAll:
			{53 to: 76}) ] valueCoveringAll:
		{46 to: 46}.! !
!Behavior method!
allAccountsTransactions
	^ [
	(accounts
		cover: (29 to: 36)
		declaredAt: (29 to: 36))
		inject:
			([
			(OrderedCollection
				cover: (46 to: 62)
				declaredAt: (46 to: 62)) new ] valueCoveringAll:
				{64 to: 66})
		into: [ :transactions :account |
			[
			(transactions
				cover: (100 to: 111)
				declaredAt: (76 to: 87)) ,
				([
				(account
					cover: (114 to: 120)
					declaredAt: (90 to: 96)) transactions ] valueCoveringAll:
					{122 to: 133}) ] valueCoveringAll:
				{112 to: 112} ]] valueCoveringAll:
		{38 to: 44. 68 to: 72}.! !
!Behavior method!
allPortfolioTransactions
	^ [
	(portfolios
		cover: (30 to: 39)
		declaredAt: (30 to: 39))
		inject:
			([
			(OrderedCollection
				cover: (49 to: 65)
				declaredAt: (49 to: 65)) new ] valueCoveringAll:
				{67 to: 69})
		into: [ :transactions :portfolio |
			[
			(transactions
				cover: (105 to: 116)
				declaredAt: (79 to: 90)) ,
				([
				(portfolio
					cover: (119 to: 127)
					declaredAt: (93 to: 101)) transactions ] valueCoveringAll:
					{129 to: 140}) ] valueCoveringAll:
				{117 to: 117} ]] valueCoveringAll:
		{41 to: 47. 71 to: 75}.! !

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!
!Behavior method!
duplicatedAccountErrorDescription
	^ 'La cuenta ya existe dentro del portfolio.' coverAll:
		{39 to: 81}.! !

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 18:14:18'!
PASSED!

!methodRemoval: Portfolio #assertChildPortfoliosDontHave: stamp: 'AEC 5/22/2022 18:14:56'!
assertChildPortfoliosDontHave: aReceptiveAccount 
	
	portfolios do:[ :portfolio | 
		portfolio assertDoesNotHave: aReceptiveAccount ]!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:15:14' prior: 50479939!
addAccount: aReceptiveAccount 
	
	self assertDoesNotHave: aReceptiveAccount.
	self assertParentPortfoliosDontHave: aReceptiveAccount.
	accounts add: aReceptiveAccount ! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 18:17:00'!
test24XXX

	| account rootPortfolio childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio addPortfolio: grandchildPortfolio.
	rootPortfolio addPortfolio: childPortfolio.
	
	self should: [ grandchildPortfolio addAccount: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 18:17:04'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:19:16' prior: 50479924!
assertParentPortfoliosDontHave: aReceptiveAccount 
	
	parentPortfolios do:[ :portfolio | 
		portfolio assertParentPortfoliosDontHave: aReceptiveAccount ].
	
	self assertDoesNotHave: aReceptiveAccount.! !

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 18:19:19'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:24:00' prior: 50480793!
addAccount: aReceptiveAccount 

	self assertParentPortfoliosDontHave: aReceptiveAccount.
	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:25:50'!
assertChildPortfoliosDontHave: aReceptiveAccount 
	
	parentPortfolios do:[ :portfolio | 
		portfolio assertParentPortfoliosDontHave: aReceptiveAccount ].
	
	self assertDoesNotHave: aReceptiveAccount.! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:25:54' prior: 50480928!
assertChildPortfoliosDontHave: aReceptiveAccount 
	
	! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:26:05' prior: 50480256!
assertDoesNotHave: aReceptiveAccount

	(accounts includes: aReceptiveAccount) ifTrue: [^ self error: self class duplicatedAccountErrorDescription ]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:26:13' prior: 50480937!
assertChildPortfoliosDontHave: aReceptiveAccount 
	
	portfolios do: [:portfolio | portfolio assertDoesNotHave: aReceptiveAccount ]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:27:08' prior: 50480950!
assertChildPortfoliosDontHave: aReceptiveAccount 
	
	self assertDoesNotHave: aReceptiveAccount.
	
	portfolios do: [:portfolio | portfolio assertChildPortfoliosDontHave: aReceptiveAccount ]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:27:24' prior: 50480821!
assertParentPortfoliosDontHave: aReceptiveAccount 
	
	self assertDoesNotHave: aReceptiveAccount.
	
	parentPortfolios do:[ :portfolio | 
		portfolio assertParentPortfoliosDontHave: aReceptiveAccount ]! !

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 18:28:30'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:28:49' prior: 50480922!
addAccount: aReceptiveAccount 

	self assertChildPortfoliosDontHave: aReceptiveAccount.
	self assertParentPortfoliosDontHave: aReceptiveAccount.
	accounts add: aReceptiveAccount ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 18:28:54'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 18:35:15'!
test25XXX

	| account rootPortfolio childPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	portfolioToAdd := self portfolioWithAccount: account.
	
	rootPortfolio addPortfolio: childPortfolio.
	
	self should: [ childPortfolio addPortfolio: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 18:35:54'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:37:33'!
assertNoChildPortfolioSharesAccountsWith: aPortfolio

	^ portfolios do: [:portfolio | portfolio assertDoesNotShareAccountsWith: aPortfolio]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:37:33' prior: 50480096!
assertDoesNotShareAccountsWith: aPortfolio

	accounts do: [:account | aPortfolio assertDoesNotHave: account].
	self assertNoChildPortfolioSharesAccountsWith: aPortfolio! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:37:33' prior: 50479894!
addPortfolio: aPortfolio 
	
	self assertNoChildPortfolioSharesAccountsWith: aPortfolio.
	portfolios add: aPortfolio.
	aPortfolio addParentPortfolio: self! !

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 18:38:11'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:39:07'!
assertNoParentPortfolioSharesAccountsWith: aPortfolio

	^ parentPortfolios do: [:portfolio | portfolio assertDoesNotShareAccountsWith: aPortfolio]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:41:21' prior: 50481101!
assertDoesNotShareAccountsWith: aPortfolio

	accounts do: [:account | aPortfolio assertDoesNotHave: account].! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:42:08' prior: 50481094!
assertNoChildPortfolioSharesAccountsWith: aPortfolio

	self assertDoesNotShareAccountsWith: aPortfolio.
	portfolios do: [:portfolio | portfolio assertNoChildPortfolioSharesAccountsWith: aPortfolio]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:42:32' prior: 50481119!
assertNoParentPortfolioSharesAccountsWith: aPortfolio

	self assertDoesNotShareAccountsWith: aPortfolio.
	parentPortfolios do: [:portfolio | portfolio assertNoParentPortfolioSharesAccountsWith: aPortfolio]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 18:42:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 18:42:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:42:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 18:42:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:42:39'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 18:42:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 18:42:40'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 18:42:40'!
FAILURE!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 18:42:40'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:42:57' prior: 50481109!
addPortfolio: aPortfolio 
	
	self assertNoChildPortfolioSharesAccountsWith: aPortfolio.
	self assertNoParentPortfolioSharesAccountsWith: aPortfolio.
	portfolios add: aPortfolio.
	aPortfolio addParentPortfolio: self! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 18:43:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 18:43:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:43:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 18:43:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 18:43:02'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 18:43:03'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 18:50:20'!
test26XXX

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithPortfolioWithAccount: account.
	portfolioToAdd := self portfolioWithPortfolioWithAccount: account.
	
	self should: [ rootPortfolio addPortfolio: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 18:53:29' prior: 50481347!
test26XXX

	| account rootPortfolio portfolioToAdd childOfPortfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithPortfolioWithAccount: account.
	portfolioToAdd := Portfolio new.
	childOfPortfolioToAdd := self portfolioWithPortfolioWithAccount: account.
	
	portfolioToAdd addPortfolio: childOfPortfolioToAdd.
	
	self should: [ rootPortfolio addPortfolio: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 18:53:34'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 18:55:09' prior: 50481246!
addPortfolio: aPortfolio 
	
	self assertNoChildPortfolioSharesAccountsWith: aPortfolio.
	self assertNoParentPortfolioSharesAccountsWith: aPortfolio.
	aPortfolio assertNoChildPortfolioSharesAccountsWith: self.
	portfolios add: aPortfolio.
	aPortfolio addParentPortfolio: self! !

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 18:55:12'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:01:19' prior: 50481127!
assertDoesNotShareAccountsWith: aPortfolio

	accounts do: [:account | aPortfolio assertDoesNotHave: account].
	portfolios do: [:portfolio | aPortfolio assertDoesNotShareAccountsWith: portfolio]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:01:27' prior: 50481383!
addPortfolio: aPortfolio 
	
	self assertNoChildPortfolioSharesAccountsWith: aPortfolio.
	self assertNoParentPortfolioSharesAccountsWith: aPortfolio.
	portfolios add: aPortfolio.
	aPortfolio addParentPortfolio: self! !

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 19:01:30'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 19:01:45'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 19:01:45'!
FAILURE!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 19:01:45'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:03:33' prior: 50481397!
assertDoesNotShareAccountsWith: aPortfolio

	accounts do: [:account | aPortfolio assertDoesNotHave: account].
	portfolios do: [:portfolio | aPortfolio assertNoChildPortfolioSharesAccountsWith: portfolio]! !

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 19:03:35'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 19:10:07'!
test27XXX

	| account rootPortfolio portfolioToAdd childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio addPortfolio: grandchildPortfolio.
	rootPortfolio addPortfolio: childPortfolio.
	
	portfolioToAdd := self portfolioWithPortfolioWithAccount: account.
	
	self should: [ rootPortfolio addPortfolio: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 19:10:19'!
FAILURE!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 19:11:54'!
FAILURE!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 19:12:15'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:19:14' prior: 50481514!
assertDoesNotShareAccountsWith: aPortfolio

	accounts do: [:account | aPortfolio assertChildPortfoliosDontHave: account].
	portfolios do: [:portfolio | aPortfolio assertNoChildPortfolioSharesAccountsWith: portfolio]! !

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 19:19:15'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 19:19:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 19:19:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:19:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 19:19:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:19:15'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 19:19:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 19:19:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 19:19:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 19:19:16'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:20:09' prior: 50481647!
assertDoesNotShareAccountsWith: aPortfolio

	accounts do: [:account | aPortfolio assertChildPortfoliosDontHave: account].! !

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 19:20:10'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 19:20:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 19:20:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:20:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 19:20:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:20:10'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 19:20:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 19:20:11'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 19:20:49'!
test28XXX

	| account rootPortfolio portfolioToAdd childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio addPortfolio: grandchildPortfolio.
	rootPortfolio addPortfolio: childPortfolio.
	
	portfolioToAdd := self portfolioWithPortfolioWithAccount: account.
	
	self should: [ grandchildPortfolio addPortfolio: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test28XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!testRun: #PortfolioTest #test28XXX stamp: 'AEC 5/22/2022 19:20:51'!
PASSED!

!methodRemoval: PortfolioTest #test28XXX stamp: 'AEC 5/22/2022 19:21:57'!
test28XXX

	| account rootPortfolio portfolioToAdd childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio addPortfolio: grandchildPortfolio.
	rootPortfolio addPortfolio: childPortfolio.
	
	portfolioToAdd := self portfolioWithPortfolioWithAccount: account.
	
	self should: [ grandchildPortfolio addPortfolio: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 19:22:01'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 19:22:02'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 19:22:02'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 19:22:02'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 19:22:02'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 19:22:02'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 19:22:02'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 19:22:02'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 19:22:02'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 19:22:02'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 19:22:02'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 19:22:02'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/22/2022 19:28:12'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parentPortfolios xxx'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:28:09' prior: 50479771 overrides: 16920235!
initialize

	xxx := OrderedCollection new.
	parentPortfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:28:32' prior: 50480978!
addAccount: aReceptiveAccount 

	self assertChildPortfoliosDontHave: aReceptiveAccount.
	self assertParentPortfoliosDontHave: aReceptiveAccount.
	xxx add: aReceptiveAccount ! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:28:39' prior: 50481406!
addPortfolio: aPortfolio 
	
	self assertNoChildPortfolioSharesAccountsWith: aPortfolio.
	self assertNoParentPortfolioSharesAccountsWith: aPortfolio.
	xxx add: aPortfolio.
	aPortfolio addParentPortfolio: self! !
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/22/2022 19:29:52' prior: 50478825!
transactions
	
	^xxx inject: OrderedCollection new into: [:transactions :account | transactions,(account transactions)]! !
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/22/2022 19:30:24' prior: 50482132!
transactions
	
	^xxx inject: OrderedCollection new into: [:transactions :anXXX | transactions,(anXXX transactions)]! !

!methodRemoval: Portfolio #allPortfolioTransactions stamp: 'AEC 5/22/2022 19:30:42'!
allPortfolioTransactions

	^ portfolios inject: OrderedCollection new into: [:transactions :portfolio | transactions,(portfolio transactions)]!

!methodRemoval: Portfolio #allAccountsTransactions stamp: 'AEC 5/22/2022 19:30:43'!
allAccountsTransactions

	^ accounts inject: OrderedCollection new into: [:transactions :account | transactions,(account transactions)]!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/22/2022 19:31:02' prior: 50476986!
hasRegistered: aTransaction
	
	^xxx anySatisfy:[ :portfolio | portfolio hasRegistered: aTransaction ]! !

!methodRemoval: Portfolio #hasAnyPortfolioRegistered: stamp: 'AEC 5/22/2022 19:31:08'!
hasAnyPortfolioRegistered: aTransaction

	^ portfolios anySatisfy:[ :portfolio | portfolio hasRegistered: aTransaction ]!

!methodRemoval: Portfolio #hasAnyAccountRegistered: stamp: 'AEC 5/22/2022 19:31:09'!
hasAnyAccountRegistered: aTransaction

	^ accounts anySatisfy:[ :account | account hasRegistered: aTransaction ]!
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/22/2022 19:32:04' prior: 50477063!
balance

	^xxx sum: [:anXXX | anXXX balance] ifEmpty: [0]! !

!methodRemoval: Portfolio #sumOfAccountBalances stamp: 'AEC 5/22/2022 19:32:05'!
sumOfAccountBalances

	^ accounts sum: [:account | account balance] ifEmpty: [0]!

!methodRemoval: Portfolio #sumOfPortfolioBalances stamp: 'AEC 5/22/2022 19:32:06'!
sumOfPortfolioBalances

	^ portfolios sum: [:portfolio | portfolio balance] ifEmpty: [0]!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:40:06'!
add: anXXX 

	self assertChildrenDontHave: anXXX.
	self assertParentsDontHave: anXXX.
	xxx add: anXXX ! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/22/2022 19:40:14'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parentPortfolios children'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:40:14' prior: 50482113!
addAccount: aReceptiveAccount 

	self assertChildPortfoliosDontHave: aReceptiveAccount.
	self assertParentPortfoliosDontHave: aReceptiveAccount.
	children add: aReceptiveAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:40:14' prior: 50482122!
addPortfolio: aPortfolio 
	
	self assertNoChildPortfolioSharesAccountsWith: aPortfolio.
	self assertNoParentPortfolioSharesAccountsWith: aPortfolio.
	children add: aPortfolio.
	aPortfolio addParentPortfolio: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:40:14' prior: 50482160!
hasRegistered: aTransaction
	
	^children anySatisfy:[ :portfolio | portfolio hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:40:14' prior: 50482194!
add: anXXX 

	self assertChildrenDontHave: anXXX.
	self assertParentsDontHave: anXXX.
	children add: anXXX ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:40:14' prior: 50482179!
balance

	^children sum: [:anXXX | anXXX balance] ifEmpty: [0]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:40:14' prior: 50482107 overrides: 16920235!
initialize

	children := OrderedCollection new.
	parentPortfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:40:14' prior: 50482139!
transactions
	
	^children inject: OrderedCollection new into: [:transactions :anXXX | transactions,(anXXX transactions)]! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/22/2022 19:40:25'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents children'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:40:25' prior: 50481143!
assertNoParentPortfolioSharesAccountsWith: aPortfolio

	self assertDoesNotShareAccountsWith: aPortfolio.
	parents do: [:portfolio | portfolio assertNoParentPortfolioSharesAccountsWith: aPortfolio]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:40:25' prior: 50482248 overrides: 16920235!
initialize

	children := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:40:25' prior: 50480966!
assertParentPortfoliosDontHave: aReceptiveAccount 
	
	self assertDoesNotHave: aReceptiveAccount.
	
	parents do:[ :portfolio | 
		portfolio assertParentPortfoliosDontHave: aReceptiveAccount ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:40:25' prior: 50479765!
addParentPortfolio: aPortfolio 
	
	parents add: aPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:41:13' prior: 50482235!
add: aChildCandidate 

	self assertChildrenDontHave: aChildCandidate.
	self assertParentsDontHave: aChildCandidate.
	children add: aChildCandidate ! !
!Portfolio methodsFor: 'transactions' stamp: 'AEC 5/22/2022 19:41:36' prior: 50482254!
transactions
	
	^children inject: OrderedCollection new into: [:transactions :child | transactions,(child transactions)]! !
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/22/2022 19:41:58' prior: 50482228!
hasRegistered: aTransaction
	
	^children anySatisfy:[ :child | child hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'balance' stamp: 'AEC 5/22/2022 19:42:13' prior: 50482242!
balance

	^children sum: [:child | child balance] ifEmpty: [0]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:44:00'!
assertChildrenDontHave: aChildCandidate
	
	children do: [:child | child assertChildPortfoliosDontHave: aChildCandidate ]! !

----SNAPSHOT----(22 May 2022 19:44:03) CuisUniversity-5096.image priorSource: 4728498!

----SNAPSHOT----(22 May 2022 19:44:07) CuisUniversity-5096.image priorSource: 4821819!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:45:51' prior: 50482326!
assertChildrenDontHave: aChildCandidate
	
	children do: [:child | child assertDoesNotHave: aChildCandidate ]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:50:03' prior: 50480942!
assertDoesNotHave: aChildCandidate

	children do: [:child | child assertDoesNotHave: aChildCandidate ]! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'AEC 5/22/2022 19:50:36'!
assertDoesNotHave: aChildCandidate

	aChildCandidate assertDoesNotHave: self! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:51:38' prior: 50482351!
assertDoesNotHave: aChildCandidate

	aChildCandidate assertDoesNotHaveAccount: self! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:52:03'!
assertDoesNotHaveAccount: anAccount

	self = anAccount! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 19:52:28' prior: 50482363!
assertDoesNotHaveAccount: anAccount

	self = anAccount ifTrue:[self error: Portfolio duplicatedAccountErrorDescription]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:52:49'!
assertDoesNotHaveAccount: anAccount

	! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:53:55' prior: 50482374!
assertDoesNotHaveAccount: anAccount

	children do:[:child | child assertDoesNotHaveAccount: anAccount]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 19:54:31' prior: 50482300!
add: aChildCandidate 

	self assertChildrenDontHave: aChildCandidate.
	"self assertParentsDontHave: aChildCandidate."
	children add: aChildCandidate ! !

account := self accountWithDepositOf: 100.!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 19:56:52' prior: 50479516!
test19XXX

	| account rootPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithPortfolioWithAccount: account.
	
	self should: [ rootPortfolio addAccount: account] raise: Error description: Portfolio duplicatedAccountErrorDescription.! !

account := ReceptiveAccount new.!

Deposit register: 100 on: account.!

childPortfolio := self portfolioWithAccount: account. !

childPortfolio := Portfolio new.!

childPortfolio addAccount: account.!

childPortfolio add: account.!

rootPortfolio := Portfolio new.!

rootPortfolio add: childPortfolio.!

rootPortfolio add: account!
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 20:01:40' prior: 50475489!
portfolioWithAccount: anAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: anAccount.
	^portfolio! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:01:47' prior: 50475750!
test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	
	portfolio add: account.
	
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:01:53' prior: 50475810!
test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances

	| portfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstAccount := self accountWithDepositOf: 100.
	secondAccount := self accountWithDepositOf: 200.
	
	portfolio add: firstAccount.
	portfolio add: secondAccount.
	
	self assert: portfolio balance equals: 300! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:02:02' prior: 50477436!
test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount
	
	| accountWithTransactionToAssert portfolio transactionToAssert otherAccount |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 200.
	
	portfolio := Portfolio new.
	portfolio add: otherAccount.
	portfolio add: accountWithTransactionToAssert.
	
	self assert: (portfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:02:07' prior: 50478928!
test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions

	| portfolio otherAccount account |
	
	account := self accountWithDepositOf: 300.
	otherAccount := self accountWithDepositOf: 300.
	
	portfolio := Portfolio new.
	portfolio add: account.
	portfolio add: otherAccount. 
	
	self assert: portfolio transactions equals: account transactions,(otherAccount transactions).! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:02:11' prior: 50479128!
test18XXX

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioWithAccount: account.
	
	self should: [ portfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:02:15' prior: 50482393!
test19XXX

	| account rootPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription.! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:02:19' prior: 50479734!
test20XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	
	rootPortfolio addPortfolio: childPortfolio.
	
	self should: [ childPortfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:02:23' prior: 50480239!
test23XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := Portfolio new.
	childPortfolio := self portfolioWithPortfolioWithAccount: account.
	
	rootPortfolio addPortfolio: childPortfolio.
		
	self should: [ rootPortfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:02:26' prior: 50480801!
test24XXX

	| account rootPortfolio childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio addPortfolio: grandchildPortfolio.
	rootPortfolio addPortfolio: childPortfolio.
	
	self should: [ grandchildPortfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: Portfolio #addAccount: stamp: 'AEC 5/22/2022 20:02:36'!
addAccount: aReceptiveAccount 

	self assertChildPortfoliosDontHave: aReceptiveAccount.
	self assertParentPortfoliosDontHave: aReceptiveAccount.
	children add: aReceptiveAccount !

----SNAPSHOT----(22 May 2022 20:03:39) CuisUniversity-5096.image priorSource: 4821907!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 20:05:19' prior: 50482384!
add: aChildCandidate 

	self assertChildrenDontHave: aChildCandidate.
	"self assertParentsDontHave: aChildCandidate."
	children add: aChildCandidate.
	aChildCandidate becomeChildOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 20:05:31'!
becomeChildOf: aPortfolio

	parents add: aPortfolio ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 20:05:44'!
becomeChildOf: aPortfolio! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 20:06:17' prior: 50477804!
portfolioWithPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioWithAccount: anAccount. 
	rootPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	^rootPortfolio! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:06:21' prior: 50475925!
test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance

	| portfolio portfolioToAdd account |
	
	portfolio := Portfolio new.
	account := self accountWithDepositOf: 100.
	portfolioToAdd := self portfolioWithAccount: account.
	portfolio add: portfolioToAdd.
	
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:06:28' prior: 50475983!
test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances

	| portfolio firstPortfolioToAdd secondPortfolioToAdd firstAccount secondAccount |
	
	portfolio := Portfolio new.
	firstAccount := self accountWithDepositOf: 100.
	secondAccount := self accountWithDepositOf: 200.
	firstPortfolioToAdd := self portfolioWithAccount: firstAccount.
	secondPortfolioToAdd := self portfolioWithAccount: secondAccount.
	
	portfolio add: firstPortfolioToAdd.
	portfolio add: secondPortfolioToAdd.
	
	self assert: portfolio balance equals: 300! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:06:35' prior: 50477776!
test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio
	
	| accountWithTransactionToAssert rootPortfolio otherChildPortfolio transactionToAssert otherAccount childPortfolioWithTransactionToAssert |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 300.
	
	otherChildPortfolio := self portfolioWithAccount: otherAccount.
	childPortfolioWithTransactionToAssert := self portfolioWithAccount: accountWithTransactionToAssert.
	
	rootPortfolio := Portfolio new.
	rootPortfolio add: otherChildPortfolio.
	rootPortfolio add: childPortfolioWithTransactionToAssert.
	
	self assert: (rootPortfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:06:39' prior: 50479017!
test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions
	
	| childPortfolio rootPortfolio |
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	
	rootPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions.! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:06:44' prior: 50478981!
test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions
	
	| childPortfolio rootPortfolio childPortfolio2 |
	
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	childPortfolio2 := self portfolioWithAccount: (self accountWithDepositOf: 300).
	
	rootPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	rootPortfolio add: childPortfolio2.
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions,(childPortfolio2 transactions).! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:06:49' prior: 50482505!
test20XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	
	rootPortfolio add: childPortfolio.
	
	self should: [ childPortfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:06:52' prior: 50479877!
test21XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithPortfolioWithAccount: account.
	childPortfolio := self portfolioWithAccount: account.
	
	self should: [ rootPortfolio add: childPortfolio ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:07:02' prior: 50480052!
test22XXX

	| account rootPortfolio childPortfolio grandchildPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := self portfolioWithAccount: account.
	
	portfolioToAdd := self portfolioWithAccount: account.
	
	rootPortfolio add: childPortfolio.
	childPortfolio add: grandchildPortfolio.
		
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:07:08' prior: 50482519!
test23XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := Portfolio new.
	childPortfolio := self portfolioWithPortfolioWithAccount: account.
	
	rootPortfolio add: childPortfolio.
		
	self should: [ rootPortfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:07:12' prior: 50482534!
test24XXX

	| account rootPortfolio childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio add: grandchildPortfolio.
	rootPortfolio addPortfolio: childPortfolio.
	
	self should: [ grandchildPortfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:07:14' prior: 50482745!
test24XXX

	| account rootPortfolio childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio add: grandchildPortfolio.
	rootPortfolio add: childPortfolio.
	
	self should: [ grandchildPortfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:07:19' prior: 50481075!
test25XXX

	| account rootPortfolio childPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	portfolioToAdd := self portfolioWithAccount: account.
	
	rootPortfolio add: childPortfolio.
	
	self should: [ childPortfolio addPortfolio: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:07:22' prior: 50482780!
test25XXX

	| account rootPortfolio childPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	portfolioToAdd := self portfolioWithAccount: account.
	
	rootPortfolio add: childPortfolio.
	
	self should: [ childPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:07:28' prior: 50481362!
test26XXX

	| account rootPortfolio portfolioToAdd childOfPortfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithPortfolioWithAccount: account.
	portfolioToAdd := Portfolio new.
	childOfPortfolioToAdd := self portfolioWithPortfolioWithAccount: account.
	
	portfolioToAdd add: childOfPortfolioToAdd.
	
	self should: [ rootPortfolio addPortfolio: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:07:31' prior: 50482813!
test26XXX

	| account rootPortfolio portfolioToAdd childOfPortfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithPortfolioWithAccount: account.
	portfolioToAdd := Portfolio new.
	childOfPortfolioToAdd := self portfolioWithPortfolioWithAccount: account.
	
	portfolioToAdd add: childOfPortfolioToAdd.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:07:36' prior: 50481619!
test27XXX

	| account rootPortfolio portfolioToAdd childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio add: grandchildPortfolio.
	rootPortfolio addPortfolio: childPortfolio.
	
	portfolioToAdd := self portfolioWithPortfolioWithAccount: account.
	
	self should: [ rootPortfolio addPortfolio: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:07:38' prior: 50482849!
test27XXX

	| account rootPortfolio portfolioToAdd childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio add: grandchildPortfolio.
	rootPortfolio add: childPortfolio.
	
	portfolioToAdd := self portfolioWithPortfolioWithAccount: account.
	
	self should: [ rootPortfolio addPortfolio: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 20:07:41' prior: 50482870!
test27XXX

	| account rootPortfolio portfolioToAdd childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio add: grandchildPortfolio.
	rootPortfolio add: childPortfolio.
	
	portfolioToAdd := self portfolioWithPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: Portfolio #addPortfolio: stamp: 'AEC 5/22/2022 20:08:06'!
addPortfolio: aPortfolio 
	
	self assertNoChildPortfolioSharesAccountsWith: aPortfolio.
	self assertNoParentPortfolioSharesAccountsWith: aPortfolio.
	children add: aPortfolio.
	aPortfolio addParentPortfolio: self!

!methodRemoval: Portfolio #assertNoParentPortfolioSharesAccountsWith: stamp: 'AEC 5/22/2022 20:09:26'!
assertNoParentPortfolioSharesAccountsWith: aPortfolio

	self assertDoesNotShareAccountsWith: aPortfolio.
	parents do: [:portfolio | portfolio assertNoParentPortfolioSharesAccountsWith: aPortfolio]!

!methodRemoval: Portfolio #assertNoChildPortfolioSharesAccountsWith: stamp: 'AEC 5/22/2022 20:09:28'!
assertNoChildPortfolioSharesAccountsWith: aPortfolio

	self assertDoesNotShareAccountsWith: aPortfolio.
	portfolios do: [:portfolio | portfolio assertNoChildPortfolioSharesAccountsWith: aPortfolio]!

!methodRemoval: Portfolio #assertDoesNotShareAccountsWith: stamp: 'AEC 5/22/2022 20:09:36'!
assertDoesNotShareAccountsWith: aPortfolio

	accounts do: [:account | aPortfolio assertChildPortfoliosDontHave: account].!

!methodRemoval: Portfolio #assertChildPortfoliosDontHave: stamp: 'AEC 5/22/2022 20:09:37'!
assertChildPortfoliosDontHave: aReceptiveAccount 
	
	self assertDoesNotHave: aReceptiveAccount.
	
	portfolios do: [:portfolio | portfolio assertChildPortfoliosDontHave: aReceptiveAccount ]!

!methodRemoval: Portfolio #assertParentPortfoliosDontHave: stamp: 'AEC 5/22/2022 20:09:40'!
assertParentPortfoliosDontHave: aReceptiveAccount 
	
	self assertDoesNotHave: aReceptiveAccount.
	
	parents do:[ :portfolio | 
		portfolio assertParentPortfoliosDontHave: aReceptiveAccount ]!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/22/2022 20:12:20'!
assertParentsDontHave: aChildCandidate
	
	parents do: [:aParent | aParent assertDoesNotHave: aChildCandidate ]! !
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/22/2022 20:16:03' prior: 50482962!
assertParentsDontHave: aChildCandidate
	
	parents do: [:aParent | 
		aParent assertDoesNotHave: aChildCandidate. 
		aParent assertParentsDontHave: aChildCandidate 
	]! !
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 20:17:10' prior: 50482562!
add: aChildCandidate 

	self assertChildrenDontHave: aChildCandidate.
	self assertParentsDontHave: aChildCandidate.
	children add: aChildCandidate.
	aChildCandidate becomeChildOf: self! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 20:17:29'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 20:17:30'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 20:17:30'!
PASSED!

Object subclass: #AccountTreeElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTreeElement category: 'Portfolio-Ejercicio' stamp: 'AEC 5/22/2022 20:26:11'!
Object subclass: #AccountTreeElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTreeElement subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents children'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/22/2022 20:46:29'!
AccountTreeElement subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents children'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTreeElement subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'AEC 5/22/2022 20:46:45'!
AccountTreeElement subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTreeElement methodsFor: 'no messages' stamp: 'AEC 5/22/2022 20:52:04'!
add: aChildCandidate

	self subclassResponsibility ! !
!AccountTreeElement methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 20:55:20'!
assertDoesNotHave: aChildCandidate

	self subclassResponsibility ! !
!AccountTreeElement methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 20:55:34'!
assertDoesNotHaveAccount: anAccount

	self subclassResponsibility ! !
!AccountTreeElement methodsFor: 'nil' stamp: 'AEC 5/22/2022 21:00:39'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!AccountTreeElement methodsFor: 'nil' stamp: 'AEC 5/22/2022 21:01:28'!
transactions

	self subclassResponsibility ! !
!AccountTreeElement methodsFor: 'nil' stamp: 'AEC 5/22/2022 21:02:09'!
balance

	self subclassResponsibility ! !

----SNAPSHOT----(22 May 2022 21:05:18) CuisUniversity-5096.image priorSource: 4829073!
!AccountTreeElement methodsFor: 'asserting' stamp: 'AEC 5/22/2022 21:06:45'!
becomeChildOf: aPortfolio

	self subclassResponsibility ! !
!AccountTreeElement class methodsFor: 'error-description' stamp: 'AEC 5/22/2022 21:09:47'!
duplicatedAccountErrorDescription
	
	^'La cuenta ya existe dentro del portfolio.'! !

!methodRemoval: Portfolio class #duplicatedAccountErrorDescription stamp: 'AEC 5/22/2022 21:09:47'!
duplicatedAccountErrorDescription
	
	^'La cuenta ya existe dentro del portfolio.'!
!ReceptiveAccount methodsFor: 'asserting' stamp: 'AEC 5/22/2022 21:10:08' prior: 50482368 overrides: 50483132!
assertDoesNotHaveAccount: anAccount

	self = anAccount ifTrue:[self error: self class duplicatedAccountErrorDescription]! !

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 21:10:12'!
PASSED!
!Portfolio class methodsFor: 'nil' stamp: 'AEC 5/22/2022 21:21:20'!
with: anAccountTreeElementsCollection

	self new initializeWith: anAccountTreeElementsCollection ! !
!Portfolio methodsFor: 'initialization' stamp: 'AEC 5/22/2022 21:22:06'!
initializeWith: anAccountTreeElementsCollection

	self initialize.
	children := anAccountTreeElementsCollection.! !
!Portfolio methodsFor: 'initialization' stamp: 'AEC 5/22/2022 21:22:28' prior: 50483281!
initializeWith: anAccountTreeElementsCollection

	children := anAccountTreeElementsCollection.! !
!Portfolio methodsFor: 'initialization' stamp: 'AEC 5/22/2022 21:23:22' prior: 50482280 overrides: 16920235!
initialize

	self initializeWith: OrderedCollection new.! !
!Portfolio methodsFor: 'initialization' stamp: 'AEC 5/22/2022 21:23:30' prior: 50483288!
initializeWith: anAccountTreeElementsCollection

	children := anAccountTreeElementsCollection.
	parents := OrderedCollection new! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 21:23:33'!
PASSED!

!methodRemoval: Portfolio class #with: stamp: 'AEC 5/22/2022 21:25:40'!
with: anAccountTreeElementsCollection

	self new initializeWith: anAccountTreeElementsCollection !

!methodRemoval: Portfolio #initializeWith: stamp: 'AEC 5/22/2022 21:26:37'!
initializeWith: anAccountTreeElementsCollection

	children := anAccountTreeElementsCollection.
	parents := OrderedCollection new!
!Portfolio methodsFor: 'initialization' stamp: 'AEC 5/22/2022 21:26:55' prior: 50483295 overrides: 16920235!
initialize

	children := OrderedCollection new.
	parents := OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 21:26:58'!
PASSED!
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 21:36:05'!
portfolioWithChildPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioWithAccount: anAccount. 
	rootPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	^rootPortfolio! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:36:05' prior: 50477880!
test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio
	
	| accountWithTransactionToAssert rootPortfolio transactionToAssert |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	rootPortfolio := self portfolioWithChildPortfolioWithAccount: (self accountWithDepositOf: 300).
	
	self deny: (rootPortfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:36:05' prior: 50477815!
test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio
	
	| account rootPortfolio transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	rootPortfolio := self portfolioWithChildPortfolioWithAccount: account. 
	
	self assert: (rootPortfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:36:05' prior: 50482831!
test26XXX

	| account rootPortfolio portfolioToAdd childOfPortfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithChildPortfolioWithAccount: account.
	portfolioToAdd := Portfolio new.
	childOfPortfolioToAdd := self portfolioWithChildPortfolioWithAccount: account.
	
	portfolioToAdd add: childOfPortfolioToAdd.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:36:05' prior: 50482493!
test19XXX

	| account rootPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithChildPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:36:05' prior: 50482697!
test21XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioWithChildPortfolioWithAccount: account.
	childPortfolio := self portfolioWithAccount: account.
	
	self should: [ rootPortfolio add: childPortfolio ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:36:05' prior: 50482731!
test23XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := Portfolio new.
	childPortfolio := self portfolioWithChildPortfolioWithAccount: account.
	
	rootPortfolio add: childPortfolio.
		
	self should: [ rootPortfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:36:05' prior: 50482890!
test27XXX

	| account rootPortfolio portfolioToAdd childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio add: grandchildPortfolio.
	rootPortfolio add: childPortfolio.
	
	portfolioToAdd := self portfolioWithChildPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #portfolioWithPortfolioWithAccount: stamp: 'AEC 5/22/2022 21:36:05'!
portfolioWithPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioWithAccount: anAccount. 
	rootPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	^rootPortfolio!
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 21:41:26'!
portfolioChildOfPortfolioWithAccount: anAccount

	| account childPortfolio rootPortfolio |
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.

	rootPortfolio add: childPortfolio.
	
	^childPortfolio! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 21:41:37' prior: 50483652!
portfolioChildOfPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	rootPortfolio := self portfolioWithAccount: anAccount.
	childPortfolio := Portfolio new.

	rootPortfolio add: childPortfolio.
	
	^childPortfolio! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 21:41:40' prior: 50483663!
portfolioChildOfPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |

	rootPortfolio := self portfolioWithAccount: anAccount.
	childPortfolio := Portfolio new.

	rootPortfolio add: childPortfolio.
	
	^childPortfolio! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 21:43:23'!
portfolioParentOfPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioWithAccount: anAccount. 
	rootPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	^rootPortfolio! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:43:23' prior: 50483592!
test21XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	childPortfolio := self portfolioWithAccount: account.
	
	self should: [ rootPortfolio add: childPortfolio ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:43:23' prior: 50483547!
test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio
	
	| account rootPortfolio transaction |
	
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account. 
	
	self assert: (rootPortfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:43:23' prior: 50483607!
test23XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := Portfolio new.
	childPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	
	rootPortfolio add: childPortfolio.
		
	self should: [ rootPortfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:43:23' prior: 50483580!
test19XXX

	| account rootPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:43:23' prior: 50483561!
test26XXX

	| account rootPortfolio portfolioToAdd childOfPortfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	portfolioToAdd := Portfolio new.
	childOfPortfolioToAdd := self portfolioParentOfPortfolioWithAccount: account.
	
	portfolioToAdd add: childOfPortfolioToAdd.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:43:23' prior: 50483529!
test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio
	
	| accountWithTransactionToAssert rootPortfolio transactionToAssert |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: (self accountWithDepositOf: 300).
	
	self deny: (rootPortfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 21:43:23' prior: 50483622!
test27XXX

	| account rootPortfolio portfolioToAdd childPortfolio grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	childPortfolio add: grandchildPortfolio.
	rootPortfolio add: childPortfolio.
	
	portfolioToAdd := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #portfolioWithChildPortfolioWithAccount: stamp: 'AEC 5/22/2022 21:43:23'!
portfolioWithChildPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioWithAccount: anAccount. 
	rootPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	^rootPortfolio!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:43:56' prior: 50482683!
test20XXX

	| account childPortfolio |
	
	account := self accountWithDepositOf: 100.
	childPortfolio := self portfolioChildOfPortfolioWithAccount: account.
	
	self should: [ childPortfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:44:53' prior: 50482482!
test18XXX

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioWithAccount: account.
	
	self should: [ portfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:45:06' prior: 50483739!
test19XXX

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ portfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription.! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:45:13' prior: 50483841!
test19XXX

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ portfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription.! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:45:19' prior: 50483818!
test20XXX

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioChildOfPortfolioWithAccount: account.
	
	self should: [ portfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:45:23' prior: 50483863!
test20XXX

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioChildOfPortfolioWithAccount: account.
	
	self should: [ portfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 21:47:30'!
portfolioGrandparentOfPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioParentOfPortfolioWithAccount: anAccount.
	rootPortfolio := Portfolio new.
	rootPortfolio add: childPortfolio.
	
	^rootPortfolio! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:48:08' prior: 50482711!
test22XXX

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioGrandparentOfPortfolioWithAccount: account.
	
	portfolioToAdd := self portfolioWithAccount: account.
		
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:48:18' prior: 50483896!
test22XXX

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioGrandparentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioWithAccount: account.
		
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:51:13' prior: 50483724!
test23XXX

	| account rootPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioGrandparentOfPortfolioWithAccount: account.
		
	self should: [ rootPortfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 21:51:18'!
PASSED!
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 21:56:42'!
portfolioGrandchildOfPortfolioWithAccount: anAccount

	| childPortfolio grandchildPortfolio |

	childPortfolio := self portfolioChildOfPortfolioWithAccount: anAccount.
	grandchildPortfolio := Portfolio new.

	childPortfolio add: grandchildPortfolio.
	
	^grandchildPortfolio! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:57:17' prior: 50482763!
test24XXX

	| account grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	grandchildPortfolio := self portfolioGrandchildOfPortfolioWithAccount: account.
	
	self should: [ grandchildPortfolio add: account] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:57:24' prior: 50484044!
test24XXX

	| account grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	grandchildPortfolio := self portfolioGrandchildOfPortfolioWithAccount: account.
	
	self should: [ grandchildPortfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:59:22' prior: 50482797!
test25XXX

	| account childPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	childPortfolio := self portfolioChildOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioWithAccount: account.
	
	self should: [ childPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 21:59:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 21:59:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 21:59:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 21:59:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 21:59:27'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 21:59:35' prior: 50484068!
test25XXX

	| account childPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	childPortfolio := self portfolioChildOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioWithAccount: account.
	
	self should: [ childPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:00:04' prior: 50483751!
test26XXX

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioGrandparentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 22:00:07'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:00:12' prior: 50484192!
test26XXX

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioGrandparentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 22:02:13'!
portfolioWith: aCollectionOfAccountTreeElements

	| portfolio |
	
	portfolio := Portfolio new.
	aCollectionOfAccountTreeElements do:[ :treeElement | portfolio add: treeElement ]
	^portfolio! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 22:02:17' prior: 50484320!
portfolioWith: aCollectionOfAccountTreeElements

	| portfolio |
	
	portfolio := Portfolio new.
	aCollectionOfAccountTreeElements do:[ :treeElement | portfolio add: treeElement ].
	^portfolio! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 22:03:28' prior: 50482415!
portfolioWithAccount: anAccount

	| portfolio |
	
	portfolio := self portfolioWith: anAccount.
	^portfolio! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 22:03:41' prior: 50484338!
portfolioWithAccount: anAccount

	^ self portfolioWith: anAccount.! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 22:04:17' prior: 50484345!
portfolioWithAccount: anAccount

	^ self portfolioWith: #(anAccount).! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 22:04:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:04:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:04:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 22:04:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 22:04:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 22:04:21'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:04:21'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 22:04:21'!
ERROR!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 22:04:22'!
ERROR!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:04:22'!
ERROR!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 22:04:22'!
ERROR!

----End fileIn of /mnt/c/Users/Ari/Desktop/Ingenieria/CuisUniversity/Portfolio/linux64/Packages/TerseGuide.pck.st----!
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 22:06:52' prior: 50484351!
portfolioWithAccount: anAccount

	^ self portfolioWith: anAccount asOrderedCollection ! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 22:06:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:06:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:06:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:06:57'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:06:57'!
ERROR!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 22:06:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 22:06:57'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 22:06:57'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 22:06:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 22:06:57'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 22:06:58'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:06:58'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 22:06:58'!
ERROR!
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 22:12:39' prior: 50487372!
portfolioWithAccount: anAccount

	^ self portfolioWith: (OrderedCollection with: anAccount)! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 22:12:45'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:13:42' prior: 50482664!
test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions
	
	| childPortfolio rootPortfolio childPortfolio2 |
	
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	childPortfolio2 := self portfolioWithAccount: (self accountWithDepositOf: 300).
	
	rootPortfolio := self portfolioWith: (OrderedCollection with: childPortfolio with: childPortfolio2 ).
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions,(childPortfolio2 transactions).! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:17:37' prior: 50487576!
test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions
	
	| childPortfolio rootPortfolio anotherChildPortfolio |
	
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	anotherChildPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 300).
	
	rootPortfolio := self portfolioWith: (OrderedCollection with: childPortfolio with: anotherChildPortfolio ).
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions,(anotherChildPortfolio transactions).! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:18:42' prior: 50482650!
test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions
	
	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioWithAccount: (self accountWithDepositOf: 200).
	
	rootPortfolio := self portfolioWith: (OrderedCollection with: childPortfolio).
	
	self assert: rootPortfolio transactions equals: childPortfolio transactions.! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:20:30' prior: 50482467!
test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions

	| portfolio otherAccount account |
	
	account := self accountWithDepositOf: 300.
	otherAccount := self accountWithDepositOf: 300.
	
	portfolio := self portfolioWith: (OrderedCollection with: account with: otherAccount ).
	
	self assert: portfolio transactions equals: account transactions,(otherAccount transactions).! !

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 22:20:32'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:21:37' prior: 50482622!
test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio
	
	| accountWithTransactionToAssert rootPortfolio otherChildPortfolio transactionToAssert otherAccount childPortfolioWithTransactionToAssert |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 300.
	
	otherChildPortfolio := self portfolioWithAccount: otherAccount.
	childPortfolioWithTransactionToAssert := self portfolioWithAccount: accountWithTransactionToAssert.
	
	rootPortfolio := self portfolioWith: (OrderedCollection with: otherChildPortfolio with: childPortfolioWithTransactionToAssert ).
	
	self assert: (rootPortfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:25:28' prior: 50487745!
test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio
	
	| accountWithTransactionToAssert rootPortfolio transactionToAssert otherAccount childPortfolioWithTransactionToAssert |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	childPortfolioWithTransactionToAssert := self portfolioWithAccount: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 300.	
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: otherAccount.
	rootPortfolio add: childPortfolioWithTransactionToAssert.
	
	self assert: (rootPortfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:25:52' prior: 50487773!
test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio
	
	| accountWithTransactionToAssert rootPortfolio transactionToAssert otherAccount childPortfolioWithTransactionToAssert |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	childPortfolioWithTransactionToAssert := self portfolioWithAccount: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 300.	
	
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: otherAccount.
	rootPortfolio add: childPortfolioWithTransactionToAssert.
	
	self assert: (rootPortfolio hasRegistered: transactionToAssert)! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:27:28' prior: 50482447!
test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount
	
	| accountWithTransactionToAssert portfolio transactionToAssert otherAccount |
	
	accountWithTransactionToAssert := ReceptiveAccount new.
	transactionToAssert := Deposit register: 100 on: accountWithTransactionToAssert.
	
	otherAccount := self accountWithDepositOf: 200.
	
	portfolio := self portfolioWith: (OrderedCollection with: otherAccount with: accountWithTransactionToAssert ).
	
	self assert: (portfolio hasRegistered: transactionToAssert)! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 22:27:32'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:42:36' prior: 50482602!
test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances

	| portfolio firstPortfolioToAdd secondPortfolioToAdd |
	
	firstPortfolioToAdd := self portfolioWithAccount: (self accountWithDepositOf: 100).
	secondPortfolioToAdd := self portfolioWithAccount: (self accountWithDepositOf: 200).
	
	portfolio := self portfolioWith: (OrderedCollection with: firstPortfolioToAdd with: secondPortfolioToAdd ).
	
	self assert: portfolio balance equals: 300! !

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 22:42:38'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:43:43' prior: 50482433!
test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances

	| portfolio |
	
	portfolio := self portfolioWith: (OrderedCollection with: (self accountWithDepositOf: 100) with: (self accountWithDepositOf: 200)).
	
	self assert: portfolio balance equals: 300! !

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 22:43:46'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:45:00' prior: 50482589!
test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance

	| portfolio |
	
	portfolio := self portfolioParentOfPortfolioWithAccount: (self accountWithDepositOf: 100).
	
	self assert: portfolio balance equals: 100! !

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 22:45:06'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:45:39' prior: 50482422!
test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance

	| portfolio account |
	
	account := self accountWithDepositOf: 100.
	
	portfolio := self portfolioWithAccount: account.
	
	self assert: portfolio balance equals: 100! !

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 22:45:40'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 22:45:54' prior: 50488280!
test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance

	| portfolio |
	
	portfolio := self portfolioWithAccount: (self accountWithDepositOf: 100).
	
	self assert: portfolio balance equals: 100! !

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:45:55'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 22:45:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 22:45:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!

!testRun: #PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 22:45:56'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:03:57'!
test18PortfolioCantAddSameAccountTwice

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioWithAccount: account.
	
	self should: [ portfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test18XXX stamp: 'AEC 5/22/2022 23:03:57'!
test18XXX

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioWithAccount: account.
	
	self should: [ portfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:04:49'!
test19PortfolioCantAddAccountIfHasAChildPortfolioContainingThatAccount

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ portfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription.! !

!methodRemoval: PortfolioTest #test19XXX stamp: 'AEC 5/22/2022 23:04:49'!
test19XXX

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ portfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription.!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:07:35'!
test20PortfolioCantAddAccountIfHasAParentContainingThatAccount

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioChildOfPortfolioWithAccount: account.
	
	self should: [ portfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test20XXX stamp: 'AEC 5/22/2022 23:07:35'!
test20XXX

	| account portfolio |
	
	account := self accountWithDepositOf: 100.
	portfolio := self portfolioChildOfPortfolioWithAccount: account.
	
	self should: [ portfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:08:37'!
test21PortfolioCantAddOtherPortfolioIfHasAChildWithAnAccountInCommon

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	childPortfolio := self portfolioWithAccount: account.
	
	self should: [ rootPortfolio add: childPortfolio ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test21XXX stamp: 'AEC 5/22/2022 23:08:37'!
test21XXX

	| account rootPortfolio childPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	childPortfolio := self portfolioWithAccount: account.
	
	self should: [ rootPortfolio add: childPortfolio ] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:10:12'!
test22PortfolioCantAddOtherPortfolioIfHasGrandChildWithAnAccountInCommon

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioGrandparentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioWithAccount: account.
		
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test22XXX stamp: 'AEC 5/22/2022 23:10:12'!
test22XXX

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioGrandparentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioWithAccount: account.
		
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:10:23'!
test22PortfolioCantAddOtherPortfolioIfHasGrandchildWithAnAccountInCommon

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioGrandparentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioWithAccount: account.
		
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test22PortfolioCantAddOtherPortfolioIfHasGrandChildWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:10:23'!
test22PortfolioCantAddOtherPortfolioIfHasGrandChildWithAnAccountInCommon

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioGrandparentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioWithAccount: account.
		
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:13:20'!
test23PortfolioCantAddAccountIfHasGranchildContainingThatAccount

	| account rootPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioGrandparentOfPortfolioWithAccount: account.
		
	self should: [ rootPortfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test23XXX stamp: 'AEC 5/22/2022 23:13:20'!
test23XXX

	| account rootPortfolio |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioGrandparentOfPortfolioWithAccount: account.
		
	self should: [ rootPortfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:14:18'!
test24PortfolioCantAddAccountIfHasGrandparentContainingSameAccount

	| account grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	grandchildPortfolio := self portfolioGrandchildOfPortfolioWithAccount: account.
	
	self should: [ grandchildPortfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test24XXX stamp: 'AEC 5/22/2022 23:14:18'!
test24XXX

	| account grandchildPortfolio |
	
	account := self accountWithDepositOf: 100.
	grandchildPortfolio := self portfolioGrandchildOfPortfolioWithAccount: account.
	
	self should: [ grandchildPortfolio add: account ] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:18:20'!
test25PortfolioCantAddOtherPortfolioIfHasParentWithAnAccountInCommon

	| account childPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	childPortfolio := self portfolioChildOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioWithAccount: account.
	
	self should: [ childPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test25XXX stamp: 'AEC 5/22/2022 23:18:20'!
test25XXX

	| account childPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	childPortfolio := self portfolioChildOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioWithAccount: account.
	
	self should: [ childPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:19:53'!
test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithGrandchild

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioGrandparentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test26XXX stamp: 'AEC 5/22/2022 23:19:54'!
test26XXX

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioGrandparentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:21:02' prior: 50483787!
test27XXX

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account..
	
	portfolioToAdd := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:21:30'!
test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByIt

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account..
	
	portfolioToAdd := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test27XXX stamp: 'AEC 5/22/2022 23:21:30'!
test27XXX

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account..
	
	portfolioToAdd := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!Portfolio methodsFor: 'adding' stamp: 'AEC 5/22/2022 23:26:23' prior: 50482977 overrides: 50483122!
add: aChildCandidate 

	self assertDoesNotHave: aChildCandidate.
	self assertParentsDontHave: aChildCandidate.
	children add: aChildCandidate.
	aChildCandidate becomeChildOf: self! !

!methodRemoval: Portfolio #assertChildrenDontHave: stamp: 'AEC 5/22/2022 23:27:18'!
assertChildrenDontHave: aChildCandidate
	
	children do: [:child | child assertDoesNotHave: aChildCandidate ]!
!AccountTreeElement methodsFor: 'asserting' stamp: 'AEC 5/22/2022 23:28:21'!
assertChildrenDontContain: aChildCandidate

	self subclassResponsibility ! !
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/22/2022 23:28:21' overrides: 50488826!
assertChildrenDontContain: aChildCandidate

	children do: [:child | child assertDoesNotHave: aChildCandidate ]! !
!ReceptiveAccount methodsFor: 'asserting' stamp: 'AEC 5/22/2022 23:28:21' overrides: 50488826!
assertChildrenDontContain: aChildCandidate

	aChildCandidate assertDoesNotHaveAccount: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 23:28:21' prior: 50482969!
assertParentsDontHave: aChildCandidate
	
	parents do: [:aParent | 
		aParent assertChildrenDontContain: aChildCandidate. 
		aParent assertParentsDontHave: aChildCandidate 
	]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 23:28:21' prior: 50488811 overrides: 50483122!
add: aChildCandidate 

	self assertChildrenDontContain: aChildCandidate.
	self assertParentsDontHave: aChildCandidate.
	children add: aChildCandidate.
	aChildCandidate becomeChildOf: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 23:28:21' prior: 50482345 overrides: 50483127!
assertDoesNotHave: aChildCandidate

	children do: [:child | child assertChildrenDontContain: aChildCandidate ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 23:28:21' prior: 50488832 overrides: 50488826!
assertChildrenDontContain: aChildCandidate

	children do: [:child | child assertChildrenDontContain: aChildCandidate ]! !

!methodRemoval: AccountTreeElement #assertDoesNotHave: stamp: 'AEC 5/22/2022 23:28:21'!
assertDoesNotHave: aChildCandidate

	self subclassResponsibility !

!methodRemoval: Portfolio #assertDoesNotHave: stamp: 'AEC 5/22/2022 23:28:21'!
assertDoesNotHave: aChildCandidate

	children do: [:child | child assertChildrenDontContain: aChildCandidate ]!

!methodRemoval: ReceptiveAccount #assertDoesNotHave: stamp: 'AEC 5/22/2022 23:28:21'!
assertDoesNotHave: aChildCandidate

	aChildCandidate assertDoesNotHaveAccount: self!
!AccountTreeElement methodsFor: 'asserting' stamp: 'AEC 5/22/2022 23:28:34'!
assertDoesNotContainAccount: anAccount

	self subclassResponsibility ! !
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/22/2022 23:28:34' overrides: 50488896!
assertDoesNotContainAccount: anAccount

	children do:[:child | child assertDoesNotHaveAccount: anAccount]! !
!ReceptiveAccount methodsFor: 'asserting' stamp: 'AEC 5/22/2022 23:28:34' overrides: 50488896!
assertDoesNotContainAccount: anAccount

	self = anAccount ifTrue:[self error: self class duplicatedAccountErrorDescription]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 23:28:34' prior: 50482378 overrides: 50483132!
assertDoesNotHaveAccount: anAccount

	children do:[:child | child assertDoesNotContainAccount: anAccount]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 23:28:34' prior: 50488839 overrides: 50488826!
assertChildrenDontContain: aChildCandidate

	aChildCandidate assertDoesNotContainAccount: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 23:28:34' prior: 50488902 overrides: 50488896!
assertDoesNotContainAccount: anAccount

	children do:[:child | child assertDoesNotContainAccount: anAccount]! !

!methodRemoval: AccountTreeElement #assertDoesNotHaveAccount: stamp: 'AEC 5/22/2022 23:28:34'!
assertDoesNotHaveAccount: anAccount

	self subclassResponsibility !

!methodRemoval: Portfolio #assertDoesNotHaveAccount: stamp: 'AEC 5/22/2022 23:28:34'!
assertDoesNotHaveAccount: anAccount

	children do:[:child | child assertDoesNotContainAccount: anAccount]!

!methodRemoval: ReceptiveAccount #assertDoesNotHaveAccount: stamp: 'AEC 5/22/2022 23:28:34'!
assertDoesNotHaveAccount: anAccount

	self = anAccount ifTrue:[self error: self class duplicatedAccountErrorDescription]!
!Portfolio methodsFor: 'asserting' stamp: 'AEC 5/22/2022 23:29:08'!
assertParentsDontContain: aChildCandidate
	
	parents do: [:aParent | 
		aParent assertChildrenDontContain: aChildCandidate. 
		aParent assertParentsDontHave: aChildCandidate 
	]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 23:29:08' prior: 50488845!
assertParentsDontHave: aChildCandidate
	
	parents do: [:aParent | 
		aParent assertChildrenDontContain: aChildCandidate. 
		aParent assertParentsDontContain: aChildCandidate 
	]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 23:29:08' prior: 50488855 overrides: 50483122!
add: aChildCandidate 

	self assertChildrenDontContain: aChildCandidate.
	self assertParentsDontContain: aChildCandidate.
	children add: aChildCandidate.
	aChildCandidate becomeChildOf: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/22/2022 23:29:08' prior: 50488956!
assertParentsDontContain: aChildCandidate
	
	parents do: [:aParent | 
		aParent assertChildrenDontContain: aChildCandidate. 
		aParent assertParentsDontContain: aChildCandidate 
	]! !

!methodRemoval: Portfolio #assertParentsDontHave: stamp: 'AEC 5/22/2022 23:29:08'!
assertParentsDontHave: aChildCandidate
	
	parents do: [:aParent | 
		aParent assertChildrenDontContain: aChildCandidate. 
		aParent assertParentsDontContain: aChildCandidate 
	]!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddSameAccountTwice stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddAccountIfHasAChildPortfolioContainingThatAccount stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddAccountIfHasAParentContainingThatAccount stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioCantAddOtherPortfolioIfHasAChildWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioCantAddOtherPortfolioIfHasGrandchildWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioCantAddAccountIfHasGranchildContainingThatAccount stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddAccountIfHasGrandparentContainingSameAccount stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test25PortfolioCantAddOtherPortfolioIfHasParentWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithGrandchild stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!testRun: #PortfolioTest #test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByIt stamp: 'AEC 5/22/2022 23:29:18'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/22/2022 23:32:54'!
AccountTreeElement subclass: #Portfolio
	instanceVariableNames: 'portfolios parents children'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AEC 5/22/2022 23:32:54'!
AccountTreeElement subclass: #Portfolio
	instanceVariableNames: 'parents children'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 23:36:41' prior: 50483885!
portfolioGrandparentOfPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioParentOfPortfolioWithAccount: anAccount.
	rootPortfolio := self portfolioWith: (OrderedCollection with: childPortfolio).
	
	^rootPortfolio! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 23:36:43'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddSameAccountTwice stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddAccountIfHasAChildPortfolioContainingThatAccount stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddAccountIfHasAParentContainingThatAccount stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioCantAddOtherPortfolioIfHasAChildWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioCantAddOtherPortfolioIfHasGrandchildWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioCantAddAccountIfHasGranchildContainingThatAccount stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddAccountIfHasGrandparentContainingSameAccount stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!

!testRun: #PortfolioTest #test25PortfolioCantAddOtherPortfolioIfHasParentWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!

!testRun: #PortfolioTest #test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithGrandchild stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!

!testRun: #PortfolioTest #test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByIt stamp: 'AEC 5/22/2022 23:36:44'!
PASSED!
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 23:37:05' prior: 50489131!
portfolioGrandparentOfPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioParentOfPortfolioWithAccount: anAccount.
	rootPortfolio := self portfolioWith: #(childPortfolio).
	
	^rootPortfolio! !
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 23:37:26' prior: 50489256!
portfolioGrandparentOfPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioParentOfPortfolioWithAccount: anAccount.
	rootPortfolio := self portfolioWith: (OrderedCollection with: childPortfolio).
	
	^rootPortfolio! !

----SNAPSHOT----(22 May 2022 23:37:36) CuisUniversity-5096.image priorSource: 4847977!

#(1 2 3)!

#( Portfolio new )!

coso := Portfolio new.!

#( coso )!
!PortfolioTest methodsFor: 'test support' stamp: 'AEC 5/22/2022 23:38:55' prior: 50483684!
portfolioParentOfPortfolioWithAccount: anAccount

	| childPortfolio rootPortfolio |
	
	childPortfolio := self portfolioWithAccount: anAccount. 
	rootPortfolio := self portfolioWith: (OrderedCollection with: childPortfolio).
	
	^rootPortfolio! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddSameAccountTwice stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddAccountIfHasAChildPortfolioContainingThatAccount stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddAccountIfHasAParentContainingThatAccount stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioCantAddOtherPortfolioIfHasAChildWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioCantAddOtherPortfolioIfHasGrandchildWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioCantAddAccountIfHasGranchildContainingThatAccount stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddAccountIfHasGrandparentContainingSameAccount stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test25PortfolioCantAddOtherPortfolioIfHasParentWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithGrandchild stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!

!testRun: #PortfolioTest #test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByIt stamp: 'AEC 5/22/2022 23:39:00'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:44:52' prior: 50488781!
test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByIt

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	
	portfolioToAdd := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!testRun: #PortfolioTest #test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByIt stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddSameAccountTwice stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddAccountIfHasAChildPortfolioContainingThatAccount stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddAccountIfHasAParentContainingThatAccount stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioCantAddOtherPortfolioIfHasAChildWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioCantAddOtherPortfolioIfHasGrandchildWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioCantAddAccountIfHasGranchildContainingThatAccount stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddAccountIfHasGrandparentContainingSameAccount stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test25PortfolioCantAddOtherPortfolioIfHasParentWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithGrandchild stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

!testRun: #PortfolioTest #test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByIt stamp: 'AEC 5/22/2022 23:44:53'!
PASSED!

----SNAPSHOT----(22 May 2022 23:45:09) CuisUniversity-5096.image priorSource: 5044073!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:45:25'!
test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByTheSecond

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	
	portfolioToAdd := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByTheSecond stamp: 'AEC 5/22/2022 23:45:32'!
test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByTheSecond

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	
	portfolioToAdd := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:45:44'!
test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByTheSecond

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	
	portfolioToAdd := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByIt stamp: 'AEC 5/22/2022 23:45:44'!
test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByIt

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	
	rootPortfolio := self portfolioWithAccount: account.
	
	portfolioToAdd := self portfolioParentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:46:29'!
test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithAGrandchildFromSecond

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioGrandparentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithAGrandchildFromSecond stamp: 'AEC 5/22/2022 23:46:37'!
test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithAGrandchildFromSecond

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioGrandparentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription!
!PortfolioTest methodsFor: 'testing' stamp: 'AEC 5/22/2022 23:46:45'!
test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithGrandchildFromSecond

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioGrandparentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription! !

!methodRemoval: PortfolioTest #test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithGrandchild stamp: 'AEC 5/22/2022 23:46:45'!
test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithGrandchild

	| account rootPortfolio portfolioToAdd |
	
	account := self accountWithDepositOf: 100.
	rootPortfolio := self portfolioParentOfPortfolioWithAccount: account.
	portfolioToAdd := self portfolioGrandparentOfPortfolioWithAccount: account.
	
	self should: [ rootPortfolio add: portfolioToAdd ] raise: Error description: Portfolio duplicatedAccountErrorDescription!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddSameAccountTwice stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddAccountIfHasAChildPortfolioContainingThatAccount stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddAccountIfHasAParentContainingThatAccount stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioCantAddOtherPortfolioIfHasAChildWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioCantAddOtherPortfolioIfHasGrandchildWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioCantAddAccountIfHasGranchildContainingThatAccount stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddAccountIfHasGrandparentContainingSameAccount stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test25PortfolioCantAddOtherPortfolioIfHasParentWithAnAccountInCommon stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithGrandchildFromSecond stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

!testRun: #PortfolioTest #test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByTheSecond stamp: 'AEC 5/22/2022 23:46:48'!
PASSED!

----SNAPSHOT----(22 May 2022 23:48:12) CuisUniversity-5096.image priorSource: 5052490!

----QUIT----(22 May 2022 23:52:33) CuisUniversity-5096.image priorSource: 5060582!

----STARTUP---- (23 May 2022 15:07:13) as /mnt/c/Users/Ari/Desktop/Ingenieria/CuisUniversity/Portfolio/linux64/CuisUniversity-5096.image!


!methodRemoval: AccountTreeElement #add: stamp: 'AEC 5/23/2022 15:07:51'!
add: aChildCandidate

	self subclassResponsibility !

!methodRemoval: Portfolio #addParentPortfolio: stamp: 'AEC 5/23/2022 15:08:06'!
addParentPortfolio: aPortfolio 
	
	parents add: aPortfolio.!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/23/2022 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/23/2022 15:08:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddSameAccountTwice stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddAccountIfHasAChildPortfolioContainingThatAccount stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddAccountIfHasAParentContainingThatAccount stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioCantAddOtherPortfolioIfHasAChildWithAnAccountInCommon stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioCantAddOtherPortfolioIfHasGrandchildWithAnAccountInCommon stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioCantAddAccountIfHasGranchildContainingThatAccount stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddAccountIfHasGrandparentContainingSameAccount stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test25PortfolioCantAddOtherPortfolioIfHasParentWithAnAccountInCommon stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithGrandchildFromSecond stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByTheSecond stamp: 'AEC 5/23/2022 15:08:11'!
PASSED!
!Behavior method!
initialize
	(children _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(children
		cover: (12 to: 19)
		declaredAt: (12 to: 19))
		sum: [ :child |
			[
			(child
				cover: (36 to: 40)
				declaredAt: (28 to: 32)) balance ] valueCoveringAll:
				{42 to: 48} ]
		ifEmpty: [
			0 coverAll:
				{61 to: 61} ]] valueCoveringAll:
		{21 to: 24. 51 to: 58}.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'AEC 5/23/2022 15:08:14'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
add: aChildCandidate
	[
	(self coverAll:
		{25 to: 28}) assertChildrenDontContain:
		(aChildCandidate
			cover: (57 to: 71)
			declaredAt: (6 to: 20)) ] valueCoveringAll:
		{30 to: 55}.
	[
	(self coverAll:
		{75 to: 78}) assertParentsDontContain:
		(aChildCandidate
			cover: (106 to: 120)
			declaredAt: (6 to: 20)) ] valueCoveringAll:
		{80 to: 104}.
	[
	(children
		cover: (124 to: 131)
		declaredAt: (124 to: 131)) add:
		(aChildCandidate
			cover: (138 to: 152)
			declaredAt: (6 to: 20)) ] valueCoveringAll:
		{133 to: 136}.
	[
	(aChildCandidate
		cover: (156 to: 170)
		declaredAt: (6 to: 20)) becomeChildOf:
		(self coverAll:
			{187 to: 190}) ] valueCoveringAll:
		{172 to: 185}.! !
!Behavior method!
assertChildrenDontContain: aChildCandidate
	[
	(children
		cover: (46 to: 53)
		declaredAt: (46 to: 53)) do: [ :child |
		[
		(child
			cover: (69 to: 73)
			declaredAt: (61 to: 65)) assertChildrenDontContain:
			(aChildCandidate
				cover: (102 to: 116)
				declaredAt: (28 to: 42)) ] valueCoveringAll:
			{75 to: 100} ]] valueCoveringAll:
		{55 to: 57}.! !
!Behavior method!
assertParentsDontContain: aChildCandidate
	[
	(parents
		cover: (46 to: 52)
		declaredAt: (46 to: 52)) do: [ :aParent |
		[
		(aParent
			cover: (73 to: 79)
			declaredAt: (60 to: 66)) assertChildrenDontContain:
			(aChildCandidate
				cover: (108 to: 122)
				declaredAt: (27 to: 41)) ] valueCoveringAll:
			{81 to: 106}.
		[
		(aParent
			cover: (128 to: 134)
			declaredAt: (60 to: 66)) assertParentsDontContain:
			(aChildCandidate
				cover: (162 to: 176)
				declaredAt: (27 to: 41)) ] valueCoveringAll:
			{136 to: 160} ]] valueCoveringAll:
		{54 to: 56}.! !
!Behavior method!
becomeChildOf: aPortfolio
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{33 to: 33})
		into: [ :balance :transaction |
			[
			(transaction
				cover: (66 to: 76)
				declaredAt: (52 to: 62)) updateBalance:
				(balance
					cover: (93 to: 99)
					declaredAt: (43 to: 49)) ] valueCoveringAll:
				{78 to: 91} ]] valueCoveringAll:
		{25 to: 31. 35 to: 39}.! !
!Behavior method!
updateBalance: aBalance
	^ [
	(aBalance
		cover: (29 to: 36)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{40 to: 43}) value ] valueCoveringAll:
			{45 to: 49}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTest #test02PortfolioBalanceWhenHavingOneAccountEqualsAccountBalance stamp: 'AEC 5/23/2022 15:08:14'!
PASSED!
!Behavior method!
assertChildrenDontContain: aChildCandidate
	[
	(aChildCandidate
		cover: (46 to: 60)
		declaredAt: (28 to: 42)) assertDoesNotContainAccount:
		(self coverAll:
			{91 to: 94}) ] valueCoveringAll:
		{62 to: 89}.! !
!Behavior method!
assertDoesNotContainAccount: anAccount
	[
	([
	(self coverAll:
		{42 to: 45}) =
		(anAccount
			cover: (49 to: 57)
			declaredAt: (30 to: 38)) ] valueCoveringAll:
		{47 to: 47}) ifTrue: [
		[
		(self coverAll:
			{67 to: 70}) error:
			([
			([
			(self coverAll:
				{79 to: 82}) class ] valueCoveringAll:
				{84 to: 88}) duplicatedAccountErrorDescription ] valueCoveringAll:
				{90 to: 122}) ] valueCoveringAll:
			{72 to: 77} ]] valueCoveringAll:
		{59 to: 65}.! !

!testRun: #PortfolioTest #test03PortfolioBalanceWhenHavingTwoAccountsEqualsSumOfBothBalances stamp: 'AEC 5/23/2022 15:08:14'!
PASSED!
!Behavior method!
becomeChildOf: aPortfolio
	[
	(parents
		cover: (29 to: 35)
		declaredAt: (29 to: 35)) add:
		(aPortfolio
			cover: (42 to: 51)
			declaredAt: (16 to: 25)) ] valueCoveringAll:
		{37 to: 40}.! !

!testRun: #PortfolioTest #test04PortfolioBalanceWhenHavingOnePortfolioEqualsThatPortfolioBalance stamp: 'AEC 5/23/2022 15:08:14'!
PASSED!
!Behavior method!
assertDoesNotContainAccount: anAccount
	[
	(children
		cover: (42 to: 49)
		declaredAt: (42 to: 49)) do: [ :child |
		[
		(child
			cover: (64 to: 68)
			declaredAt: (56 to: 60)) assertDoesNotContainAccount:
			(anAccount
				cover: (99 to: 107)
				declaredAt: (30 to: 38)) ] valueCoveringAll:
			{70 to: 97} ]] valueCoveringAll:
		{51 to: 53}.! !

!testRun: #PortfolioTest #test05PortfolioBalanceWhenHavingTwoPortfoliosEqualsSumOfBothBalances stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(children
		cover: (33 to: 40)
		declaredAt: (33 to: 40)) anySatisfy: [ :child |
		[
		(child
			cover: (64 to: 68)
			declaredAt: (56 to: 60)) hasRegistered:
			(aTransaction
				cover: (85 to: 96)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{70 to: 83} ]] valueCoveringAll:
		{42 to: 52}.! !

!testRun: #PortfolioTest #test06EmptyPortfolioHasNotRegisteredATransaction stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test07PortfolioWithOneAccountHasRegisteredATransactionFromThatAccount stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasNotRegisteredATransactionFromAnotherAccount stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithTwoAccountsHasRegisteredATransactionFromTheSecondAccount stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithOnePortfolioHasRegisteredATransactionFromThatPortfolio stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioWithOnePortfolioHasNotRegisteredATransactionFromAnAccountNotInThatPortfolio stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioWithTwoPortfoliosHasRegisteredATransactionFromSecondPortfolio stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!
!Behavior method!
transactions
	^ [
	(children
		cover: (18 to: 25)
		declaredAt: (18 to: 25))
		inject:
			([
			(OrderedCollection
				cover: (35 to: 51)
				declaredAt: (35 to: 51)) new ] valueCoveringAll:
				{53 to: 55})
		into: [ :transactions :child |
			[
			(transactions
				cover: (87 to: 98)
				declaredAt: (65 to: 76)) ,
				([
				(child
					cover: (101 to: 105)
					declaredAt: (79 to: 83)) transactions ] valueCoveringAll:
					{107 to: 118}) ] valueCoveringAll:
				{99 to: 99} ]] valueCoveringAll:
		{27 to: 33. 57 to: 61}.! !

!testRun: #PortfolioTest #test13EmptyPortfolioHasNoTransactions stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test14PortfolioWithOneAccountTransactionsAreThatAccountTransactions stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithTwoAccountsTransactionsAreBothAccountTransactions stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithOnePortfolioTransactionsAreThatPortfolioTransactions stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithTwoPortfolioTransactionsAreBothPortfoliosTransactions stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!
!Behavior method!
duplicatedAccountErrorDescription
	^ 'La cuenta ya existe dentro del portfolio.' coverAll:
		{39 to: 81}.! !

!testRun: #PortfolioTest #test18PortfolioCantAddSameAccountTwice stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddAccountIfHasAChildPortfolioContainingThatAccount stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddAccountIfHasAParentContainingThatAccount stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioCantAddOtherPortfolioIfHasAChildWithAnAccountInCommon stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioCantAddOtherPortfolioIfHasGrandchildWithAnAccountInCommon stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioCantAddAccountIfHasGranchildContainingThatAccount stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddAccountIfHasGrandparentContainingSameAccount stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test25PortfolioCantAddOtherPortfolioIfHasParentWithAnAccountInCommon stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test26PortfolioCantAddPortfolioIfHasChildWithAnAccountInCommonWithGrandchildFromSecond stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

!testRun: #PortfolioTest #test27PortfolioCantAddOtherPortfolioIfHasAnAccountContainedByTheSecond stamp: 'AEC 5/23/2022 15:08:15'!
PASSED!

----QUIT----(23 May 2022 15:23:34) CuisUniversity-5096.image priorSource: 5060670!
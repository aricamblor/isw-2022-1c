

----STARTUP---- (28 May 2022 18:22:04) as C:\Users\Fede\Documents\Cuis-limpio\windows64\CuisUniversity-5096.image!


!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 18:22:25'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 18:22:25'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 18:41:41'!
addAccountBalanceLine

	^ summary add: ('Balance = ',account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 18:41:41' prior: 50483605!
summary
	
	summary := OrderedCollection new.
	account summary: self.
	self addAccountBalanceLine.
	
	^summary! !
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
summary
	(summary _ [
	(OrderedCollection
		cover: (23 to: 39)
		declaredAt: (23 to: 39)) new ] valueCoveringAll:
		{41 to: 43})
		cover: (12 to: 18)
		declaredAt: (12 to: 18).
	[
	(account
		cover: (47 to: 53)
		declaredAt: (47 to: 53)) summary:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{55 to: 62}.
	[
	(self coverAll:
		{71 to: 74}) addAccountBalanceLine ] valueCoveringAll:
		{76 to: 96}.
	^ summary
		cover: (103 to: 109)
		declaredAt: (12 to: 18).! !
!Behavior method!
summary: anAccountSummary
	^ [
	(self coverAll:
		{32 to: 35}) addToSummary:
		(anAccountSummary
			cover: (51 to: 66)
			declaredAt: (10 to: 25)) ] valueCoveringAll:
		{37 to: 49}.! !
!Behavior method!
addToSummary: aSummary
	[
	(transactions
		cover: (27 to: 38)
		declaredAt: (27 to: 38)) do: [ :transaction |
		[
		(transaction
			cover: (59 to: 69)
			declaredAt: (45 to: 55)) addToSummary:
			(aSummary
				cover: (85 to: 92)
				declaredAt: (15 to: 22)) ] valueCoveringAll:
			{71 to: 83} ]] valueCoveringAll:
		{40 to: 42}.! !
!Behavior method!
addAccountBalanceLine
	^ [
	(summary
		cover: (27 to: 33)
		declaredAt: (27 to: 33)) add:
		([
		('Balance = ' coverAll:
			{41 to: 52}) ,
			([
			([
			(account
				cover: (54 to: 60)
				declaredAt: (54 to: 60)) balance ] valueCoveringAll:
				{62 to: 68}) asString ] valueCoveringAll:
				{70 to: 77}) ] valueCoveringAll:
			{53 to: 53}) ] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 18:50:47'!
PASSED!
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addDeposit:
		(self coverAll:
			{47 to: 50}) ] valueCoveringAll:
		{35 to: 45}.! !
!Behavior method!
addDeposit: aDeposit
	[
	(summary
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		([
		('Deposito por ' coverAll:
			{38 to: 52}) ,
			([
			([
			(aDeposit
				cover: (54 to: 61)
				declaredAt: (13 to: 20)) value ] valueCoveringAll:
				{63 to: 67}) asString ] valueCoveringAll:
				{69 to: 76}) ] valueCoveringAll:
			{53 to: 53}) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 18:50:47'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addWithdraw:
		(self coverAll:
			{48 to: 51}) ] valueCoveringAll:
		{35 to: 46}.! !
!Behavior method!
addWithdraw: aWithdraw
	[
	(summary
		cover: (26 to: 32)
		declaredAt: (26 to: 32)) add:
		([
		('Extraccion por ' coverAll:
			{40 to: 56}) ,
			([
			([
			(aWithdraw
				cover: (58 to: 66)
				declaredAt: (14 to: 22)) value ] valueCoveringAll:
				{68 to: 72}) asString ] valueCoveringAll:
				{74 to: 81}) ] valueCoveringAll:
			{57 to: 57}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 18:50:47'!
PASSED!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addTransferWithdraw:
		(self coverAll:
			{56 to: 59}) ] valueCoveringAll:
		{35 to: 54}.! !
!Behavior method!
addTransferWithdraw: aTransferWithdraw
	[
	(summary
		cover: (42 to: 48)
		declaredAt: (42 to: 48)) add:
		([
		('Salida por transferencia de ' coverAll:
			{56 to: 85}) ,
			([
			([
			(aTransferWithdraw
				cover: (87 to: 103)
				declaredAt: (22 to: 38)) value ] valueCoveringAll:
				{105 to: 109}) asString ] valueCoveringAll:
				{111 to: 118}) ] valueCoveringAll:
			{86 to: 86}) ] valueCoveringAll:
		{50 to: 53}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addTransferDeposit:
		(self coverAll:
			{55 to: 58}) ] valueCoveringAll:
		{35 to: 53}.! !
!Behavior method!
addTransferDeposit: aTransferDeposit
	[
	(summary
		cover: (40 to: 46)
		declaredAt: (40 to: 46)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{54 to: 84}) ,
			([
			([
			(aTransferDeposit
				cover: (86 to: 101)
				declaredAt: (21 to: 36)) value ] valueCoveringAll:
				{103 to: 107}) asString ] valueCoveringAll:
				{109 to: 116}) ] valueCoveringAll:
			{85 to: 85}) ] valueCoveringAll:
		{48 to: 51}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 18:50:47'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
addToSummary: aSummary
	[
	(accounts
		cover: (27 to: 34)
		declaredAt: (27 to: 34)) do: [ :account |
		[
		(account
			cover: (51 to: 57)
			declaredAt: (41 to: 47)) addToSummary:
			(aSummary
				cover: (73 to: 80)
				declaredAt: (15 to: 22)) ] valueCoveringAll:
			{59 to: 71} ]] valueCoveringAll:
		{36 to: 38}.! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 18:50:47'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{32 to: 35}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (58 to: 66)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 56}.
	[
	cascadeReceiver add:
		(anotherAccount
			cover: (76 to: 89)
			declaredAt: (23 to: 36)) ] valueCoveringAll:
		{71 to: 74}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
transferNet
	^ [
	(transactions
		cover: (17 to: 28)
		declaredAt: (17 to: 28))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :transferNet :transaction |
			[
			(transaction
				cover: (74 to: 84)
				declaredAt: (60 to: 70)) affectTransferNet:
				(transferNet
					cover: (105 to: 115)
					declaredAt: (47 to: 57)) ] valueCoveringAll:
				{86 to: 103} ]] valueCoveringAll:
		{30 to: 36. 40 to: 44}.! !

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
affectTransferNet: aTransferNet
	^ [
	(aTransferNet
		cover: (38 to: 49)
		declaredAt: (20 to: 31)) -
		([
		(self coverAll:
			{53 to: 56}) value ] valueCoveringAll:
			{58 to: 62}) ] valueCoveringAll:
		{51 to: 51}.! !
!Behavior method!
affectTransferNet: aTransferNet
	^ [
	(aTransferNet
		cover: (39 to: 50)
		declaredAt: (20 to: 31)) +
		([
		(self coverAll:
			{54 to: 57}) value ] valueCoveringAll:
			{59 to: 63}) ] valueCoveringAll:
		{52 to: 52}.! !

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
affectTransferNet: aTransferNet
	^ aTransferNet
		cover: (38 to: 49)
		declaredAt: (20 to: 31).! !

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
transferNet
	^ [
	(accounts
		cover: (17 to: 24)
		declaredAt: (17 to: 24))
		sum: [ :account |
			[
			(account
				cover: (42 to: 48)
				declaredAt: (32 to: 38)) transferNet ] valueCoveringAll:
				{50 to: 60} ]
		ifEmpty:
			(0 coverAll:
				{72 to: 72}) ] valueCoveringAll:
		{26 to: 29. 63 to: 70}.! !

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
sentTransaction
	^ sentTransaction
		cover: (20 to: 34)
		declaredAt: (20 to: 34).! !
!Behavior method!
receivedTransaction
	^ receivedTransaction
		cover: (24 to: 42)
		declaredAt: (24 to: 42).! !

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
cantHaveSameAccountAtBothEnds
	^ 'No se puede poner una misma cuenta como emisora y receptora de la misma transferencia.' coverAll:
		{35 to: 122}.! !

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 18:50:48'!
PASSED!
!Behavior method!
amountMustBePositive
	^ 'El monto de la transferencia debe ser mayor a cero' coverAll:
		{26 to: 77}.! !

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 18:50:48'!
PASSED!

!methodRemoval: Account #summary stamp: 'fm 5/28/2022 18:51:04'!
summary

	| summary |
	
	summary := OrderedCollection new.
	self addToSummary: summary.
	self addBalanceToSummary: summary.
	^summary!

!methodRemoval: Account #addBalanceToSummary: stamp: 'fm 5/28/2022 18:51:22'!
addBalanceToSummary: summary

	^ summary add: ('Balance = ',self balance asString)!
!Account methodsFor: 'summary' stamp: 'fm 5/28/2022 19:16:24'!
fillSummaryOn: anAccountSummary 
	
	^self addToSummary: anAccountSummary! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:16:24' prior: 50484092!
summary
	
	summary := OrderedCollection new.
	account fillSummaryOn: self.
	self addAccountBalanceLine.
	
	^summary! !

!methodRemoval: Account #summary: stamp: 'fm 5/28/2022 19:16:24'!
summary: anAccountSummary 
	
	^self addToSummary: anAccountSummary!
!Account methodsFor: 'summary' stamp: 'fm 5/28/2022 19:17:03'!
fillSummary: anAccountSummary 
	
	^self addToSummary: anAccountSummary! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:17:03' prior: 50484980!
summary
	
	summary := OrderedCollection new.
	account fillSummary: self.
	self addAccountBalanceLine.
	
	^summary! !

!methodRemoval: Account #fillSummaryOn: stamp: 'fm 5/28/2022 19:17:03'!
fillSummaryOn: anAccountSummary 
	
	^self addToSummary: anAccountSummary!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:19:03' prior: 50482561!
test01XXX

	| transferNetForAccount |
	
	transferNetForAccount := ReceptiveAccount new.
	
	self assert: transferNetForAccount transferNet equals: 0! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:19:16' prior: 50485008!
test01XXX

	| transferNetForAccount |
	
	transferNetForAccount := TransferNet for: ReceptiveAccount new.
	
	self assert: transferNetForAccount transferNet equals: 0! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:19:24' prior: 50485016!
test01XXX

	| transferNetForAccount |
	
	transferNetForAccount := TransferNet for: (ReceptiveAccount new).
	
	self assert: transferNetForAccount transferNet equals: 0! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:19:29' prior: 50485025!
test01XXX

	| transferNetForAccount |
	
	transferNetForAccount := TransferNet for: ReceptiveAccount new.
	
	self assert: transferNetForAccount transferNet equals: 0! !

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:19:33'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:19:33'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:19:33'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:19:33'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:19:33'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:19:33'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:19:33'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/26/2022 21:41:25' prior: 50485034!
test01XXX

	| account |
	
	account := ReceptiveAccount new.
	
	self assert: account transferNet equals: 0! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:21:08'!
transferNetFor: account

	^ account transferNet! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:21:08' prior: 50482584!
test02XXX

	| account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	
	Transfer from: account to: otherAccount for: 100.
	
	self assert: (self transferNetFor: account) equals: -100.
	self assert: otherAccount transferNet equals: 100! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:21:08' prior: 50482610!
test03XXX

	| account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Deposit register: 50 on: account.
	Deposit register: 50 on: otherAccount.
	Transfer from: account to: otherAccount for: 100.
	
	self assert: (self transferNetFor: account) equals: -100.
	self assert: otherAccount transferNet equals: 100! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:21:08' prior: 50485060!
test01XXX

	| account |
	
	account := ReceptiveAccount new.
	
	self assert: (self transferNetFor: account) equals: 0! !
!TransferNetTest methodsFor: 'test support' stamp: 'fm 5/28/2022 19:21:40' prior: 50485066!
transferNetFor: account

	^ (TransferNet for: account) transferNet! !

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:21:46'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:21:46'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:21:46'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:21:46'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:21:46'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:21:46'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 19:22:17' prior: 50485071!
test02XXX

	| account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	
	Transfer from: account to: otherAccount for: 100.
	
	self assert: (self transferNetFor: account) equals: -100.
	self assert: (self transferNetFor: otherAccount) equals: 100! !

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:22:19'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:22:19'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:22:19'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:22:19'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:22:19'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:22:19'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:22:19'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:22:24'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:22:24'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:22:24'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:22:24'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:22:24'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:22:24'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:22:24'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 19:22:35' prior: 50485083!
test03XXX

	| account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Deposit register: 50 on: account.
	Deposit register: 50 on: otherAccount.
	Transfer from: account to: otherAccount for: 100.
	
	self assert: (self transferNetFor: account) equals: -100.
	self assert: (self transferNetFor: otherAccount) equals: 100! !
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 19:22:48' prior: 50482777!
test04XXX

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (self transferNetFor: portfolio) equals: 0! !
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 19:22:59' prior: 50482765!
test05XXX

	| portfolio account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account to: otherAccount for: 100.
	
	portfolio := Portfolio new.
	portfolio add: account.
	

	self assert: (self transferNetFor: portfolio) equals: -100! !
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 19:23:15' prior: 50482850!
test06XXX

	| portfolio account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account to: otherAccount for: 100.
	Deposit register: 200 on: account.
	
	portfolio := Portfolio new.
	portfolio add: account.
	

	self assert: (self transferNetFor: portfolio) equals: -100! !

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:23:17'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:23:17'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:23:17'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:23:17'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:23:17'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:23:17'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:23:17'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:23:51' prior: 50483803!
transferNet
	
	^account transferNet ! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 19:23:54'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 19:23:54'!
PASSED!
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:31:32' prior: 50485237!
transferNet
	
	^account fillTransferNet: 0.! !
!Account methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:31:50'!
fillTransferNet

	^self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:33:45'!
fillTransferNet: anAmount
	
	^transactions inject: anAmount into:[:transferNet :transaction | transaction affectTransferNet: transferNet].! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:33:52'!
ERROR!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:33:52'!
ERROR!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:33:52'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 19:33:52'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 19:33:53'!
PASSED!
!Portfolio methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:35:04'!
fillTransferNet: anAmount
	
	^accounts inject: anAmount into: [:anAmountToFill :account | account fillTransferNet: anAmountToFill]! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 19:35:08'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 19:35:08'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
summary
	(summary _ [
	(OrderedCollection
		cover: (23 to: 39)
		declaredAt: (23 to: 39)) new ] valueCoveringAll:
		{41 to: 43})
		cover: (12 to: 18)
		declaredAt: (12 to: 18).
	[
	(account
		cover: (47 to: 53)
		declaredAt: (47 to: 53)) fillSummary:
		(self coverAll:
			{68 to: 71}) ] valueCoveringAll:
		{55 to: 66}.
	[
	(self coverAll:
		{75 to: 78}) addAccountBalanceLine ] valueCoveringAll:
		{80 to: 100}.
	^ summary
		cover: (107 to: 113)
		declaredAt: (12 to: 18).! !
!Behavior method!
fillSummary: anAccountSummary
	^ [
	(self coverAll:
		{36 to: 39}) addToSummary:
		(anAccountSummary
			cover: (55 to: 70)
			declaredAt: (14 to: 29)) ] valueCoveringAll:
		{41 to: 53}.! !
!Behavior method!
addToSummary: aSummary
	[
	(transactions
		cover: (27 to: 38)
		declaredAt: (27 to: 38)) do: [ :transaction |
		[
		(transaction
			cover: (59 to: 69)
			declaredAt: (45 to: 55)) addToSummary:
			(aSummary
				cover: (85 to: 92)
				declaredAt: (15 to: 22)) ] valueCoveringAll:
			{71 to: 83} ]] valueCoveringAll:
		{40 to: 42}.! !
!Behavior method!
addAccountBalanceLine
	^ [
	(summary
		cover: (27 to: 33)
		declaredAt: (27 to: 33)) add:
		([
		('Balance = ' coverAll:
			{41 to: 52}) ,
			([
			([
			(account
				cover: (54 to: 60)
				declaredAt: (54 to: 60)) balance ] valueCoveringAll:
				{62 to: 68}) asString ] valueCoveringAll:
				{70 to: 77}) ] valueCoveringAll:
			{53 to: 53}) ] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addDeposit:
		(self coverAll:
			{47 to: 50}) ] valueCoveringAll:
		{35 to: 45}.! !
!Behavior method!
addDeposit: aDeposit
	[
	(summary
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		([
		('Deposito por ' coverAll:
			{38 to: 52}) ,
			([
			([
			(aDeposit
				cover: (54 to: 61)
				declaredAt: (13 to: 20)) value ] valueCoveringAll:
				{63 to: 67}) asString ] valueCoveringAll:
				{69 to: 76}) ] valueCoveringAll:
			{53 to: 53}) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addWithdraw:
		(self coverAll:
			{48 to: 51}) ] valueCoveringAll:
		{35 to: 46}.! !
!Behavior method!
addWithdraw: aWithdraw
	[
	(summary
		cover: (26 to: 32)
		declaredAt: (26 to: 32)) add:
		([
		('Extraccion por ' coverAll:
			{40 to: 56}) ,
			([
			([
			(aWithdraw
				cover: (58 to: 66)
				declaredAt: (14 to: 22)) value ] valueCoveringAll:
				{68 to: 72}) asString ] valueCoveringAll:
				{74 to: 81}) ] valueCoveringAll:
			{57 to: 57}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addTransferWithdraw:
		(self coverAll:
			{56 to: 59}) ] valueCoveringAll:
		{35 to: 54}.! !
!Behavior method!
addTransferWithdraw: aTransferWithdraw
	[
	(summary
		cover: (42 to: 48)
		declaredAt: (42 to: 48)) add:
		([
		('Salida por transferencia de ' coverAll:
			{56 to: 85}) ,
			([
			([
			(aTransferWithdraw
				cover: (87 to: 103)
				declaredAt: (22 to: 38)) value ] valueCoveringAll:
				{105 to: 109}) asString ] valueCoveringAll:
				{111 to: 118}) ] valueCoveringAll:
			{86 to: 86}) ] valueCoveringAll:
		{50 to: 53}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addTransferDeposit:
		(self coverAll:
			{55 to: 58}) ] valueCoveringAll:
		{35 to: 53}.! !
!Behavior method!
addTransferDeposit: aTransferDeposit
	[
	(summary
		cover: (40 to: 46)
		declaredAt: (40 to: 46)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{54 to: 84}) ,
			([
			([
			(aTransferDeposit
				cover: (86 to: 101)
				declaredAt: (21 to: 36)) value ] valueCoveringAll:
				{103 to: 107}) asString ] valueCoveringAll:
				{109 to: 116}) ] valueCoveringAll:
			{85 to: 85}) ] valueCoveringAll:
		{48 to: 51}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
addToSummary: aSummary
	[
	(accounts
		cover: (27 to: 34)
		declaredAt: (27 to: 34)) do: [ :account |
		[
		(account
			cover: (51 to: 57)
			declaredAt: (41 to: 47)) addToSummary:
			(aSummary
				cover: (73 to: 80)
				declaredAt: (15 to: 22)) ] valueCoveringAll:
			{59 to: 71} ]] valueCoveringAll:
		{36 to: 38}.! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{32 to: 35}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (58 to: 66)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 56}.
	[
	cascadeReceiver add:
		(anotherAccount
			cover: (76 to: 89)
			declaredAt: (23 to: 36)) ] valueCoveringAll:
		{71 to: 74}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
transferNet
	^ [
	(account
		cover: (17 to: 23)
		declaredAt: (17 to: 23)) fillTransferNet:
		(0 coverAll:
			{42 to: 42}) ] valueCoveringAll:
		{25 to: 40}.! !
!Behavior method!
fillTransferNet: anAmount
	^ [
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42))
		inject:
			(anAmount
				cover: (52 to: 59)
				declaredAt: (18 to: 25))
		into: [ :transferNet :transaction |
			[
			(transaction
				cover: (95 to: 105)
				declaredAt: (81 to: 91)) affectTransferNet:
				(transferNet
					cover: (126 to: 136)
					declaredAt: (68 to: 78)) ] valueCoveringAll:
				{107 to: 124} ]] valueCoveringAll:
		{44 to: 50. 61 to: 65}.! !

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
affectTransferNet: aTransferNet
	^ [
	(aTransferNet
		cover: (38 to: 49)
		declaredAt: (20 to: 31)) -
		([
		(self coverAll:
			{53 to: 56}) value ] valueCoveringAll:
			{58 to: 62}) ] valueCoveringAll:
		{51 to: 51}.! !
!Behavior method!
affectTransferNet: aTransferNet
	^ [
	(aTransferNet
		cover: (39 to: 50)
		declaredAt: (20 to: 31)) +
		([
		(self coverAll:
			{54 to: 57}) value ] valueCoveringAll:
			{59 to: 63}) ] valueCoveringAll:
		{52 to: 52}.! !

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
affectTransferNet: aTransferNet
	^ aTransferNet
		cover: (38 to: 49)
		declaredAt: (20 to: 31).! !

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
fillTransferNet: anAmount
	^ [
	(accounts
		cover: (31 to: 38)
		declaredAt: (31 to: 38))
		inject:
			(anAmount
				cover: (48 to: 55)
				declaredAt: (18 to: 25))
		into: [ :anAmountToFill :account |
			[
			(account
				cover: (91 to: 97)
				declaredAt: (81 to: 87)) fillTransferNet:
				(anAmountToFill
					cover: (116 to: 129)
					declaredAt: (65 to: 78)) ] valueCoveringAll:
				{99 to: 114} ]] valueCoveringAll:
		{40 to: 46. 57 to: 61}.! !

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:35:16'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
sentTransaction
	^ sentTransaction
		cover: (20 to: 34)
		declaredAt: (20 to: 34).! !
!Behavior method!
receivedTransaction
	^ receivedTransaction
		cover: (24 to: 42)
		declaredAt: (24 to: 42).! !

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 19:35:16'!
PASSED!
!Behavior method!
cantHaveSameAccountAtBothEnds
	^ 'No se puede poner una misma cuenta como emisora y receptora de la misma transferencia.' coverAll:
		{35 to: 122}.! !

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 19:35:17'!
PASSED!
!Behavior method!
amountMustBePositive
	^ 'El monto de la transferencia debe ser mayor a cero' coverAll:
		{26 to: 77}.! !

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 19:35:17'!
PASSED!

!methodRemoval: Portfolio #transferNet stamp: 'fm 5/28/2022 19:35:46'!
transferNet
	
	^accounts sum:[:account | account transferNet] ifEmpty: 0.!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'fm 5/28/2022 19:35:54'!
transferNet
	
	^transactions inject: 0 into:[:transferNet :transaction | transaction affectTransferNet: transferNet].!

!methodRemoval: Account #transferNet stamp: 'fm 5/28/2022 19:36:03'!
transferNet

	^self subclassResponsibility !
!Account methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:36:24'!
fillTransferNet: anAmount

	^self subclassResponsibility ! !

!methodRemoval: Account #fillTransferNet stamp: 'fm 5/28/2022 19:36:24'!
fillTransferNet

	^self subclassResponsibility !
!Deposit methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:41:09' prior: 50483905 overrides: 50482673!
affectTransferNet: aTransferNet 
	
	^aTransferNet affectOperationBeingADeposit: self! !
!TransferDeposit methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:41:42' prior: 50483869 overrides: 50482673!
affectTransferNet: aTransferNet 
	
	^ aTransferNet affectOperationBeingATransferDeposit: self! !
!TransferWithdraw methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:42:02' prior: 50482691 overrides: 50482673!
affectTransferNet: aTransferNet 
	
	^aTransferNet affectOperationBeingATransferWithdraw: self! !
!Withdraw methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:42:16' prior: 50483910 overrides: 50482673!
affectTransferNet: aTransferNet 
	
	^aTransferNet affectOperationBeingAWithdraw: self! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'fm 5/28/2022 19:44:15'!
Object subclass: #TransferNet
	instanceVariableNames: 'account summary transferNetAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:44:12'!
affectOperationBeingATransferWithdraw: aTransferWithdraw

	^ transferNetAmount := transferNetAmount - aTransferWithdraw value! !
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:44:38' prior: 50485389!
transferNet
	
	transferNetAmount := 0.
	^account fillTransferNet: transferNetAmount.! !
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:44:51' prior: 50486660!
transferNet
	
	transferNetAmount := 0.
	account fillTransferNet: transferNetAmount.
	
	^transferNetAmount! !
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:45:11'!
affectOperationBeingATransferDeposit: aTransferDeposit

	^ transferNetAmount := transferNetAmount + aTransferDeposit value! !
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:45:32'!
affectOperationBeingADeposit: aDeposit! !
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:45:37'!
affectOperationBeingAWithdraw: aDeposit! !
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:45:41' prior: 50486683!
affectOperationBeingAWithdraw: aWithdraw! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:45:48'!
ERROR!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:45:48'!
ERROR!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:45:48'!
ERROR!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:45:48'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 19:45:48'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 19:45:48'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
summary
	(summary _ [
	(OrderedCollection
		cover: (23 to: 39)
		declaredAt: (23 to: 39)) new ] valueCoveringAll:
		{41 to: 43})
		cover: (12 to: 18)
		declaredAt: (12 to: 18).
	[
	(account
		cover: (47 to: 53)
		declaredAt: (47 to: 53)) fillSummary:
		(self coverAll:
			{68 to: 71}) ] valueCoveringAll:
		{55 to: 66}.
	[
	(self coverAll:
		{75 to: 78}) addAccountBalanceLine ] valueCoveringAll:
		{80 to: 100}.
	^ summary
		cover: (107 to: 113)
		declaredAt: (12 to: 18).! !
!Behavior method!
fillSummary: anAccountSummary
	^ [
	(self coverAll:
		{36 to: 39}) addToSummary:
		(anAccountSummary
			cover: (55 to: 70)
			declaredAt: (14 to: 29)) ] valueCoveringAll:
		{41 to: 53}.! !
!Behavior method!
addToSummary: aSummary
	[
	(transactions
		cover: (27 to: 38)
		declaredAt: (27 to: 38)) do: [ :transaction |
		[
		(transaction
			cover: (59 to: 69)
			declaredAt: (45 to: 55)) addToSummary:
			(aSummary
				cover: (85 to: 92)
				declaredAt: (15 to: 22)) ] valueCoveringAll:
			{71 to: 83} ]] valueCoveringAll:
		{40 to: 42}.! !
!Behavior method!
addAccountBalanceLine
	^ [
	(summary
		cover: (27 to: 33)
		declaredAt: (27 to: 33)) add:
		([
		('Balance = ' coverAll:
			{41 to: 52}) ,
			([
			([
			(account
				cover: (54 to: 60)
				declaredAt: (54 to: 60)) balance ] valueCoveringAll:
				{62 to: 68}) asString ] valueCoveringAll:
				{70 to: 77}) ] valueCoveringAll:
			{53 to: 53}) ] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:46:03'!
PASSED!
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addDeposit:
		(self coverAll:
			{47 to: 50}) ] valueCoveringAll:
		{35 to: 45}.! !
!Behavior method!
addDeposit: aDeposit
	[
	(summary
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		([
		('Deposito por ' coverAll:
			{38 to: 52}) ,
			([
			([
			(aDeposit
				cover: (54 to: 61)
				declaredAt: (13 to: 20)) value ] valueCoveringAll:
				{63 to: 67}) asString ] valueCoveringAll:
				{69 to: 76}) ] valueCoveringAll:
			{53 to: 53}) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addWithdraw:
		(self coverAll:
			{48 to: 51}) ] valueCoveringAll:
		{35 to: 46}.! !
!Behavior method!
addWithdraw: aWithdraw
	[
	(summary
		cover: (26 to: 32)
		declaredAt: (26 to: 32)) add:
		([
		('Extraccion por ' coverAll:
			{40 to: 56}) ,
			([
			([
			(aWithdraw
				cover: (58 to: 66)
				declaredAt: (14 to: 22)) value ] valueCoveringAll:
				{68 to: 72}) asString ] valueCoveringAll:
				{74 to: 81}) ] valueCoveringAll:
			{57 to: 57}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addTransferWithdraw:
		(self coverAll:
			{56 to: 59}) ] valueCoveringAll:
		{35 to: 54}.! !
!Behavior method!
addTransferWithdraw: aTransferWithdraw
	[
	(summary
		cover: (42 to: 48)
		declaredAt: (42 to: 48)) add:
		([
		('Salida por transferencia de ' coverAll:
			{56 to: 85}) ,
			([
			([
			(aTransferWithdraw
				cover: (87 to: 103)
				declaredAt: (22 to: 38)) value ] valueCoveringAll:
				{105 to: 109}) asString ] valueCoveringAll:
				{111 to: 118}) ] valueCoveringAll:
			{86 to: 86}) ] valueCoveringAll:
		{50 to: 53}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
addToSummary: aSummary
	[
	(aSummary
		cover: (26 to: 33)
		declaredAt: (15 to: 22)) addTransferDeposit:
		(self coverAll:
			{55 to: 58}) ] valueCoveringAll:
		{35 to: 53}.! !
!Behavior method!
addTransferDeposit: aTransferDeposit
	[
	(summary
		cover: (40 to: 46)
		declaredAt: (40 to: 46)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{54 to: 84}) ,
			([
			([
			(aTransferDeposit
				cover: (86 to: 101)
				declaredAt: (21 to: 36)) value ] valueCoveringAll:
				{103 to: 107}) asString ] valueCoveringAll:
				{109 to: 116}) ] valueCoveringAll:
			{85 to: 85}) ] valueCoveringAll:
		{48 to: 51}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
addToSummary: aSummary
	[
	(accounts
		cover: (27 to: 34)
		declaredAt: (27 to: 34)) do: [ :account |
		[
		(account
			cover: (51 to: 57)
			declaredAt: (41 to: 47)) addToSummary:
			(aSummary
				cover: (73 to: 80)
				declaredAt: (15 to: 22)) ] valueCoveringAll:
			{59 to: 71} ]] valueCoveringAll:
		{36 to: 38}.! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{32 to: 35}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (58 to: 66)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 56}.
	[
	cascadeReceiver add:
		(anotherAccount
			cover: (76 to: 89)
			declaredAt: (23 to: 36)) ] valueCoveringAll:
		{71 to: 74}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
transferNet
	(transferNetAmount _ 0 coverAll:
		{37 to: 37})
		cover: (16 to: 32)
		declaredAt: (16 to: 32).
	[
	(account
		cover: (41 to: 47)
		declaredAt: (41 to: 47)) fillTransferNet:
		(transferNetAmount
			cover: (66 to: 82)
			declaredAt: (16 to: 32)) ] valueCoveringAll:
		{49 to: 64}.
	^ transferNetAmount
		cover: (89 to: 105)
		declaredAt: (16 to: 32).! !
!Behavior method!
fillTransferNet: anAmount
	^ [
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42))
		inject:
			(anAmount
				cover: (52 to: 59)
				declaredAt: (18 to: 25))
		into: [ :transferNet :transaction |
			[
			(transaction
				cover: (95 to: 105)
				declaredAt: (81 to: 91)) affectTransferNet:
				(transferNet
					cover: (126 to: 136)
					declaredAt: (68 to: 78)) ] valueCoveringAll:
				{107 to: 124} ]] valueCoveringAll:
		{44 to: 50. 61 to: 65}.! !

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
affectTransferNet: aTransferNet
	^ [
	(aTransferNet
		cover: (38 to: 49)
		declaredAt: (20 to: 31)) affectOperationBeingATransferWithdraw:
		(self coverAll:
			{90 to: 93}) ] valueCoveringAll:
		{51 to: 88}.! !

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:46:04'!
ERROR!
!Behavior method!
affectTransferNet: aTransferNet
	^ [
	(aTransferNet
		cover: (38 to: 49)
		declaredAt: (20 to: 31)) affectOperationBeingADeposit:
		(self coverAll:
			{81 to: 84}) ] valueCoveringAll:
		{51 to: 79}.! !

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:46:04'!
ERROR!
!Behavior method!
fillTransferNet: anAmount
	^ [
	(accounts
		cover: (31 to: 38)
		declaredAt: (31 to: 38))
		inject:
			(anAmount
				cover: (48 to: 55)
				declaredAt: (18 to: 25))
		into: [ :anAmountToFill :account |
			[
			(account
				cover: (91 to: 97)
				declaredAt: (81 to: 87)) fillTransferNet:
				(anAmountToFill
					cover: (116 to: 129)
					declaredAt: (65 to: 78)) ] valueCoveringAll:
				{99 to: 114} ]] valueCoveringAll:
		{40 to: 46. 57 to: 61}.! !

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:46:04'!
ERROR!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:46:04'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
sentTransaction
	^ sentTransaction
		cover: (20 to: 34)
		declaredAt: (20 to: 34).! !
!Behavior method!
receivedTransaction
	^ receivedTransaction
		cover: (24 to: 42)
		declaredAt: (24 to: 42).! !

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
cantHaveSameAccountAtBothEnds
	^ 'No se puede poner una misma cuenta como emisora y receptora de la misma transferencia.' coverAll:
		{35 to: 122}.! !

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 19:46:04'!
PASSED!
!Behavior method!
amountMustBePositive
	^ 'El monto de la transferencia debe ser mayor a cero' coverAll:
		{26 to: 77}.! !

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 19:46:04'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:46:08'!
ERROR!
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:47:16' prior: 50486666!
transferNet
	
	transferNetAmount := 0.
	account fillTransferNet: self.
	
	^transferNetAmount! !

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:47:17'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:47:20'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:47:20'!
ERROR!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:47:20'!
ERROR!
!ReceptiveAccount methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:47:53' prior: 50485397 overrides: 50486609!
fillTransferNet: aTransferNet
	
	^transactions inject: aTransferNet into:[:transferNet :transaction | transaction affectTransferNet: transferNet].! !
!ReceptiveAccount methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:49:21' prior: 50487891 overrides: 50486609!
fillTransferNet: aTransferNetReport
	
	^transactions do: [ :transaction | transaction affectTransferNet: aTransferNetReport ].! !
!Portfolio methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:50:09' prior: 50485551 overrides: 50486609!
fillTransferNet: aTransferNetReport
	
	^accounts do: [ :account | account fillTransferNet: aTransferNetReport ]! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 19:50:12'!
PASSED!

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'fm 5/28/2022 19:52:40'!
Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'fm 5/28/2022 19:52:40'!
AccountReport subclass: #TransferNet
	instanceVariableNames: 'account summary transferNetAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReport subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'fm 5/28/2022 19:52:51'!
AccountReport subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReport class methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:53:08'!
for: anAccount

	^self new initializeFor: anAccount! !

!methodRemoval: TransferNet class #for: stamp: 'fm 5/28/2022 19:53:08'!
for: anAccount

	^self new initializeFor: anAccount!

!methodRemoval: AccountSummary class #for: stamp: 'fm 5/28/2022 19:53:17'!
for: anAccount

	^self new initializeFor: anAccount!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 19:53:34'!
PASSED!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'fm 5/28/2022 19:54:13'!
AccountReport subclass: #TransferNet
	instanceVariableNames: 'summary transferNetAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'fm 5/28/2022 19:54:14'!
AccountReport subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'fm 5/28/2022 19:54:14'!
Object subclass: #AccountReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReport methodsFor: 'initialization' stamp: 'fm 5/28/2022 19:54:22'!
initializeFor: anAccount

	account := anAccount.! !

!methodRemoval: AccountSummary #initializeFor: stamp: 'fm 5/28/2022 19:54:22'!
initializeFor: anAccount

	account := anAccount.!

!methodRemoval: TransferNet #initializeFor: stamp: 'fm 5/28/2022 19:54:42'!
initializeFor: anAccount

	account := anAccount.!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'fm 5/28/2022 19:56:21'!
AccountReport subclass: #TransferNet
	instanceVariableNames: 'transferNetAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReport methodsFor: 'executing' stamp: 'fm 5/28/2022 19:57:27'!
executeReport

	^ self subclassResponsibility! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 19:57:36'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 19:57:36'!
PASSED!
!AccountSummary methodsFor: 'summary' stamp: 'fm 5/28/2022 19:57:58' overrides: 50488294!
executeReport
	
	summary := OrderedCollection new.
	account fillSummary: self.
	self addAccountBalanceLine.
	
	^summary! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:57:58' prior: 50482953!
test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine

	| summaryForAccount |

	summaryForAccount := AccountSummary for: ReceptiveAccount new.
	
	self assert: summaryForAccount executeReport equals: (OrderedCollection with: 'Balance = 0')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:57:58' prior: 50483357!
test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine

	| childPortfolio fatherPortfolio summaryForFatherPortfolio |
	
	fatherPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	fatherPortfolio add: childPortfolio.
	
	summaryForFatherPortfolio := AccountSummary for: fatherPortfolio.
	
	self assert: summaryForFatherPortfolio executeReport equals: (OrderedCollection with: 'Balance = 0')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:57:58' prior: 50483068!
test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines

	| account summaryForAccount |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	summaryForAccount := AccountSummary for: account.
	
	self assert: summaryForAccount executeReport equals: (OrderedCollection with: 'Deposito por 100' with: 'Extraccion por 50' with: 'Balance = 50')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:57:58' prior: 50483179!
test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine

	| summaryForPortfolio |
	
	summaryForPortfolio := AccountSummary for: Portfolio new.
	
	self assert: summaryForPortfolio executeReport equals: (OrderedCollection with: 'Balance = 0')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:57:58' prior: 50483120!
test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer

	| account otherAccount summaryForAccount summaryForOtherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account  to: otherAccount for: 25.
	summaryForAccount := AccountSummary for: account.
	summaryForOtherAccount := AccountSummary for: otherAccount.
	
	self assert: summaryForAccount executeReport equals: (OrderedCollection with: 'Salida por transferencia de 25' with: 'Balance = -25').
	self assert: summaryForOtherAccount executeReport equals: (OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:57:58' prior: 50483409!
test07PortfolioSummaryIncludesTransactionsFromChildAccounts

	| childPortfolio account fatherPortfolio summaryForFatherPortfolio |
	
	fatherPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	childPortfolio add: account.
	fatherPortfolio add: childPortfolio.
	
	summaryForFatherPortfolio := AccountSummary for: fatherPortfolio.
	
	self assert: summaryForFatherPortfolio executeReport equals: (OrderedCollection with: 'Deposito por 100' with: 'Balance = 100')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:57:58' prior: 50483019!
test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines

	| account summaryForAccount |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	summaryForAccount := AccountSummary for: account.
	
	self assert: summaryForAccount executeReport equals: (OrderedCollection with: 'Deposito por 100' with: 'Balance = 100')! !

!methodRemoval: AccountSummary #summary stamp: 'fm 5/28/2022 19:57:58'!
summary
	
	summary := OrderedCollection new.
	account fillSummary: self.
	self addAccountBalanceLine.
	
	^summary!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'fm 5/28/2022 19:58:15'!
AccountReport subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:58:15' prior: 50483719!
addTransferDeposit: aTransferDeposit

	report add: ('Entrada por transferencia de ',aTransferDeposit value asString).! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:58:15' prior: 50484086!
addAccountBalanceLine

	^ report add: ('Balance = ',account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:58:15' prior: 50483691!
addDeposit: aDeposit

	report add: ('Deposito por ',aDeposit value asString).! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:58:15' prior: 50483730!
addTransferWithdraw: aTransferWithdraw

	report add: ('Salida por transferencia de ',aTransferWithdraw value asString).! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:58:15' prior: 50483741!
addWithdraw: aWithdraw

	report add: ('Extraccion por ',aWithdraw value asString).! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:58:15' prior: 50488446 overrides: 50488294!
executeReport
	
	report := OrderedCollection new.
	account fillSummary: self.
	self addAccountBalanceLine.
	
	^report! !
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 19:58:49' overrides: 50488294!
executeReport
	
	transferNetAmount := 0.
	account fillTransferNet: self.
	
	^transferNetAmount! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:58:50' prior: 50485105!
transferNetFor: account

	^ (TransferNet for: account) executeReport! !

!methodRemoval: TransferNet #transferNet stamp: 'fm 5/28/2022 19:58:50'!
transferNet
	
	transferNetAmount := 0.
	account fillTransferNet: self.
	
	^transferNetAmount!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'fm 5/28/2022 19:58:54'!
AccountReport subclass: #TransferNet
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:58:54' prior: 50486672!
affectOperationBeingATransferDeposit: aTransferDeposit

	^ report := report + aTransferDeposit value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:58:54' prior: 50488625 overrides: 50488294!
executeReport
	
	report := 0.
	account fillTransferNet: self.
	
	^report! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:58:54' prior: 50486653!
affectOperationBeingATransferWithdraw: aTransferWithdraw

	^ report := report - aTransferWithdraw value! !
!Account methodsFor: 'summary' stamp: 'fm 5/28/2022 19:59:23'!
fillReport: anAccountSummary 
	
	^self addToSummary: anAccountSummary! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 19:59:23' prior: 50488618 overrides: 50488294!
executeReport
	
	report := OrderedCollection new.
	account fillReport: self.
	self addAccountBalanceLine.
	
	^report! !

!methodRemoval: Account #fillSummary: stamp: 'fm 5/28/2022 19:59:23'!
fillSummary: anAccountSummary 
	
	^self addToSummary: anAccountSummary!
!Account methodsFor: 'summary' stamp: 'fm 5/28/2022 20:02:35' prior: 50488670!
fillReport: anAccountSummary 
	
	^self subclassResponsibility! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'fm 5/28/2022 20:03:36' overrides: 50488687!
fillReport: anAccountReport
	
	transactions do: [:transaction | transaction fillReport: anAccountReport ].! !
!AccountTransaction methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:04:53'!
affectReport: aTransferNet 
	
	self subclassResponsibility ! !
!Deposit methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:04:54' overrides: 50488698!
affectReport: aTransferNet 
	
	^aTransferNet affectOperationBeingADeposit: self! !
!TransferDeposit methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:04:54' overrides: 50488698!
affectReport: aTransferNet 
	
	^ aTransferNet affectOperationBeingATransferDeposit: self! !
!TransferWithdraw methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:04:54' overrides: 50488698!
affectReport: aTransferNet 
	
	^aTransferNet affectOperationBeingATransferWithdraw: self! !
!Withdraw methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:04:54' overrides: 50488698!
affectReport: aTransferNet 
	
	^aTransferNet affectOperationBeingAWithdraw: self! !

!methodRemoval: AccountTransaction #affectTransferNet: stamp: 'fm 5/28/2022 20:04:54'!
affectTransferNet: aTransferNet 
	
	self subclassResponsibility !

!methodRemoval: Deposit #affectTransferNet: stamp: 'fm 5/28/2022 20:04:54'!
affectTransferNet: aTransferNet 
	
	^aTransferNet affectOperationBeingADeposit: self!

!methodRemoval: TransferDeposit #affectTransferNet: stamp: 'fm 5/28/2022 20:04:54'!
affectTransferNet: aTransferNet 
	
	^ aTransferNet affectOperationBeingATransferDeposit: self!

!methodRemoval: TransferWithdraw #affectTransferNet: stamp: 'fm 5/28/2022 20:04:54'!
affectTransferNet: aTransferNet 
	
	^aTransferNet affectOperationBeingATransferWithdraw: self!

!methodRemoval: Withdraw #affectTransferNet: stamp: 'fm 5/28/2022 20:04:54'!
affectTransferNet: aTransferNet 
	
	^aTransferNet affectOperationBeingAWithdraw: self!
!TransferDeposit methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:05:00' prior: 50488709 overrides: 50488698!
affectReport: anAccountReport 
	
	^ anAccountReport affectOperationBeingATransferDeposit: self! !
!TransferWithdraw methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:05:11' prior: 50488715 overrides: 50488698!
affectReport: anAccountReport 
	
	^anAccountReport affectOperationBeingATransferWithdraw: self! !
!Withdraw methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:05:19' prior: 50488721 overrides: 50488698!
affectReport: anAccountReport 
	
	^anAccountReport affectOperationBeingAWithdraw: self! !
!Deposit methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:05:25' prior: 50488703 overrides: 50488698!
affectReport: anAccountReport 
	
	^anAccountReport affectOperationBeingADeposit: self! !
!AccountTransaction methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:05:30' prior: 50488698!
affectReport: anAccountReport 
	
	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'fm 5/28/2022 20:06:05' prior: 50480830 overrides: 50480945!
addToSummary: anAccountReport
	
	transactions do:[:transaction | transaction addToSummary: anAccountReport].! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'fm 5/28/2022 20:07:06' prior: 50488787 overrides: 50480945!
addToSummary: anAccountReport
	
	transactions do:[:transaction | transaction affectReport: anAccountReport].! !
!Portfolio methodsFor: 'summary' stamp: 'fm 5/28/2022 20:07:19' prior: 50480900 overrides: 50480945!
addToSummary: anAccountReport
	
	accounts do:[:account | account affectReport: anAccountReport ]! !

!methodRemoval: TransferDeposit #addToSummary: stamp: 'fm 5/28/2022 20:07:33'!
addToSummary: aSummary

	aSummary addTransferDeposit: self.!
!Account methodsFor: 'summary' stamp: 'fm 5/28/2022 20:08:26'!
affectReport: anAccountSummary 
	
	^self subclassResponsibility! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'fm 5/28/2022 20:08:26' overrides: 50488811!
affectReport: anAccountReport
	
	transactions do: [:transaction | transaction fillReport: anAccountReport ].! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 20:08:26' prior: 50488676 overrides: 50488294!
executeReport
	
	report := OrderedCollection new.
	account affectReport: self.
	self addAccountBalanceLine.
	
	^report! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 20:08:26' prior: 50488816 overrides: 50488811!
affectReport: anAccountReport
	
	transactions do: [:transaction | transaction fillReport: anAccountReport ].! !

!methodRemoval: Account #fillReport: stamp: 'fm 5/28/2022 20:08:26'!
fillReport: anAccountSummary 
	
	^self subclassResponsibility!

!methodRemoval: ReceptiveAccount #fillReport: stamp: 'fm 5/28/2022 20:08:26'!
fillReport: anAccountReport
	
	transactions do: [:transaction | transaction fillReport: anAccountReport ].!
!ReceptiveAccount methodsFor: 'summary' stamp: 'fm 5/28/2022 20:08:38' prior: 50488832 overrides: 50488811!
affectReport: anAccountReport
	
	transactions do: [:transaction | transaction affectReport: anAccountReport ].! !
!Portfolio methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:09:15' prior: 50487908 overrides: 50486609!
fillTransferNet: anAccountReport
	
	^accounts do: [ :account | account affectReport: anAccountReport ]! !
!Portfolio methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:09:37'!
fillReport: anAccountReport
	
	^accounts do: [ :account | account affectReport: anAccountReport ]! !
!Portfolio methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:09:40' overrides: 50488811!
affectReport: anAccountReport
	
	^accounts do: [ :account | account affectReport: anAccountReport ]! !

!methodRemoval: Portfolio #fillReport: stamp: 'fm 5/28/2022 20:09:42'!
fillReport: anAccountReport
	
	^accounts do: [ :account | account affectReport: anAccountReport ]!
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:10:04' prior: 50488658 overrides: 50488294!
executeReport
	
	report := 0.
	account affectReport: self.
	
	^report! !

!methodRemoval: Portfolio #fillTransferNet: stamp: 'fm 5/28/2022 20:10:18'!
fillTransferNet: anAccountReport
	
	^accounts do: [ :account | account affectReport: anAccountReport ]!

!methodRemoval: Account #fillTransferNet: stamp: 'fm 5/28/2022 20:10:29'!
fillTransferNet: anAmount

	^self subclassResponsibility !
!AccountReport methodsFor: 'executing' stamp: 'fm 5/28/2022 20:12:04'!
affectOperationBeingATransferWithdraw: aTransferWithdraw

	^ self subclassResponsibility! !
!AccountReport methodsFor: 'executing' stamp: 'fm 5/28/2022 20:12:31'!
affectOperationBeingATransferDeposit: aTransferDeposit

	^ self subclassResponsibility! !
!AccountReport methodsFor: 'executing' stamp: 'fm 5/28/2022 20:12:36'!
affectOperationBeingADeposit: aDeposit

	^ self subclassResponsibility! !
!AccountReport methodsFor: 'executing' stamp: 'fm 5/28/2022 20:12:44'!
affectOperationBeingAWithdraw: aWithdraw

	^ self subclassResponsibility! !
!AccountSummary methodsFor: 'summary' stamp: 'fm 5/28/2022 20:13:27' overrides: 50488907!
affectOperationBeingADeposit: aDeposit

	report add: ('Deposito por ',aDeposit value asString)! !

!methodRemoval: AccountSummary #addDeposit: stamp: 'fm 5/28/2022 20:13:59'!
addDeposit: aDeposit

	report add: ('Deposito por ',aDeposit value asString).!
!AccountSummary methodsFor: 'summary' stamp: 'fm 5/28/2022 20:14:24' overrides: 50488901!
affectOperationBeingATransferDeposit: aTransferDeposit

	report add: ('Entrada por transferencia de ',aTransferDeposit value asString).! !

!methodRemoval: AccountSummary #addTransferDeposit: stamp: 'fm 5/28/2022 20:14:24'!
addTransferDeposit: aTransferDeposit

	report add: ('Entrada por transferencia de ',aTransferDeposit value asString).!
!AccountSummary methodsFor: 'summary' stamp: 'fm 5/28/2022 20:14:40' overrides: 50488912!
affectOperationBeingAWithdraw: aWithdraw

	report add: ('Extraccion por ',aWithdraw value asString).! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 20:14:40' prior: 50483670 overrides: 50483650!
addToSummary: aSummary

	aSummary affectOperationBeingAWithdraw: self.! !

!methodRemoval: AccountSummary #addWithdraw: stamp: 'fm 5/28/2022 20:14:40'!
addWithdraw: aWithdraw

	report add: ('Extraccion por ',aWithdraw value asString).!
!AccountSummary methodsFor: 'summary' stamp: 'fm 5/28/2022 20:14:54' overrides: 50488895!
affectOperationBeingATransferWithdraw: aTransferWithdraw

	report add: ('Salida por transferencia de ',aTransferWithdraw value asString).! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 20:14:54' prior: 50483665 overrides: 50483650!
addToSummary: aSummary

	aSummary affectOperationBeingATransferWithdraw: self.! !

!methodRemoval: AccountSummary #addTransferWithdraw: stamp: 'fm 5/28/2022 20:14:54'!
addTransferWithdraw: aTransferWithdraw

	report add: ('Salida por transferencia de ',aTransferWithdraw value asString).!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 20:15:30'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 20:15:31'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 20:15:31'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (52 to: 58)
		declaredAt: (52 to: 58)) affectReport:
		(self coverAll:
			{74 to: 77}) ] valueCoveringAll:
		{60 to: 72}.
	[
	(self coverAll:
		{81 to: 84}) addAccountBalanceLine ] valueCoveringAll:
		{86 to: 106}.
	^ report
		cover: (113 to: 118)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReport: anAccountReport
	[
	(transactions
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) do: [ :transaction |
		[
		(transaction
			cover: (67 to: 77)
			declaredAt: (53 to: 63)) affectReport:
			(anAccountReport
				cover: (93 to: 107)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{79 to: 91} ]] valueCoveringAll:
		{47 to: 49}.! !
!Behavior method!
addAccountBalanceLine
	^ [
	(report
		cover: (27 to: 32)
		declaredAt: (27 to: 32)) add:
		([
		('Balance = ' coverAll:
			{40 to: 51}) ,
			([
			([
			(account
				cover: (53 to: 59)
				declaredAt: (53 to: 59)) balance ] valueCoveringAll:
				{61 to: 67}) asString ] valueCoveringAll:
				{69 to: 76}) ] valueCoveringAll:
			{52 to: 52}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:15:35'!
PASSED!
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingADeposit:
		(self coverAll:
			{82 to: 85}) ] valueCoveringAll:
		{52 to: 80}.! !
!Behavior method!
affectOperationBeingADeposit: aDeposit
	[
	(report
		cover: (42 to: 47)
		declaredAt: (42 to: 47)) add:
		([
		('Deposito por ' coverAll:
			{55 to: 69}) ,
			([
			([
			(aDeposit
				cover: (71 to: 78)
				declaredAt: (31 to: 38)) value ] valueCoveringAll:
				{80 to: 84}) asString ] valueCoveringAll:
				{86 to: 93}) ] valueCoveringAll:
			{70 to: 70}) ] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 20:15:35'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingAWithdraw:
		(self coverAll:
			{83 to: 86}) ] valueCoveringAll:
		{52 to: 81}.! !
!Behavior method!
affectOperationBeingAWithdraw: aWithdraw
	[
	(report
		cover: (44 to: 49)
		declaredAt: (44 to: 49)) add:
		([
		('Extraccion por ' coverAll:
			{57 to: 73}) ,
			([
			([
			(aWithdraw
				cover: (75 to: 83)
				declaredAt: (32 to: 40)) value ] valueCoveringAll:
				{85 to: 89}) asString ] valueCoveringAll:
				{91 to: 98}) ] valueCoveringAll:
			{74 to: 74}) ] valueCoveringAll:
		{51 to: 54}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 20:15:35'!
PASSED!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingATransferWithdraw:
		(self coverAll:
			{91 to: 94}) ] valueCoveringAll:
		{52 to: 89}.! !
!Behavior method!
affectOperationBeingATransferWithdraw: aTransferWithdraw
	[
	(report
		cover: (60 to: 65)
		declaredAt: (60 to: 65)) add:
		([
		('Salida por transferencia de ' coverAll:
			{73 to: 102}) ,
			([
			([
			(aTransferWithdraw
				cover: (104 to: 120)
				declaredAt: (40 to: 56)) value ] valueCoveringAll:
				{122 to: 126}) asString ] valueCoveringAll:
				{128 to: 135}) ] valueCoveringAll:
			{103 to: 103}) ] valueCoveringAll:
		{67 to: 70}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (37 to: 51)
		declaredAt: (15 to: 29)) affectOperationBeingATransferDeposit:
		(self coverAll:
			{91 to: 94}) ] valueCoveringAll:
		{53 to: 89}.! !
!Behavior method!
affectOperationBeingATransferDeposit: aTransferDeposit
	[
	(report
		cover: (58 to: 63)
		declaredAt: (58 to: 63)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{71 to: 101}) ,
			([
			([
			(aTransferDeposit
				cover: (103 to: 118)
				declaredAt: (39 to: 54)) value ] valueCoveringAll:
				{120 to: 124}) asString ] valueCoveringAll:
				{126 to: 133}) ] valueCoveringAll:
			{102 to: 102}) ] valueCoveringAll:
		{65 to: 68}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 20:15:35'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(accounts
		cover: (35 to: 42)
		declaredAt: (35 to: 42)) do: [ :account |
		[
		(account
			cover: (61 to: 67)
			declaredAt: (51 to: 57)) affectReport:
			(anAccountReport
				cover: (83 to: 97)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{69 to: 81} ]] valueCoveringAll:
		{44 to: 46}.! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:15:35'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 20:15:35'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 20:15:35'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 20:15:35'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{32 to: 35}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 20:15:35'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (58 to: 66)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 56}.
	[
	cascadeReceiver add:
		(anotherAccount
			cover: (76 to: 89)
			declaredAt: (23 to: 36)) ] valueCoveringAll:
		{71 to: 74}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 20:15:35'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
executeReport
	(report _ 0 coverAll:
		{28 to: 28})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (32 to: 38)
		declaredAt: (32 to: 38)) affectReport:
		(self coverAll:
			{54 to: 57}) ] valueCoveringAll:
		{40 to: 52}.
	^ report
		cover: (64 to: 69)
		declaredAt: (18 to: 23).! !

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
affectOperationBeingATransferWithdraw: aTransferWithdraw
	^ (report _ [
	(report
		cover: (62 to: 67)
		declaredAt: (62 to: 67)) -
		([
		(aTransferWithdraw
			cover: (81 to: 97)
			declaredAt: (40 to: 56)) value ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{79 to: 79})
		cover: (72 to: 77)
		declaredAt: (62 to: 67).! !
!Behavior method!
affectOperationBeingATransferDeposit: aTransferDeposit
	^ (report _ [
	(report
		cover: (60 to: 65)
		declaredAt: (60 to: 65)) +
		([
		(aTransferDeposit
			cover: (79 to: 94)
			declaredAt: (39 to: 54)) value ] valueCoveringAll:
			{96 to: 100}) ] valueCoveringAll:
		{77 to: 77})
		cover: (70 to: 75)
		declaredAt: (60 to: 65).! !

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
affectOperationBeingADeposit: aDeposit
	^ self.! !

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
sentTransaction
	^ sentTransaction
		cover: (20 to: 34)
		declaredAt: (20 to: 34).! !
!Behavior method!
receivedTransaction
	^ receivedTransaction
		cover: (24 to: 42)
		declaredAt: (24 to: 42).! !

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
cantHaveSameAccountAtBothEnds
	^ 'No se puede poner una misma cuenta como emisora y receptora de la misma transferencia.' coverAll:
		{35 to: 122}.! !

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 20:15:36'!
PASSED!
!Behavior method!
amountMustBePositive
	^ 'El monto de la transferencia debe ser mayor a cero' coverAll:
		{26 to: 77}.! !

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 20:15:36'!
PASSED!

!methodRemoval: Portfolio #addToSummary: stamp: 'fm 5/28/2022 20:15:54'!
addToSummary: anAccountReport
	
	accounts do:[:account | account affectReport: anAccountReport ]!

!methodRemoval: ReceptiveAccount #fillTransferNet: stamp: 'fm 5/28/2022 20:16:12'!
fillTransferNet: aTransferNetReport
	
	^transactions do: [ :transaction | transaction affectTransferNet: aTransferNetReport ].!

!methodRemoval: ReceptiveAccount #addToSummary: stamp: 'fm 5/28/2022 20:16:16'!
addToSummary: anAccountReport
	
	transactions do:[:transaction | transaction affectReport: anAccountReport].!

!methodRemoval: Account #addToSummary: stamp: 'fm 5/28/2022 20:16:56'!
addToSummary: aSummary

	self subclassResponsibility !

!methodRemoval: Deposit #addToSummary: stamp: 'fm 5/28/2022 20:16:57'!
addToSummary: aSummary

	aSummary addDeposit: self.!

!methodRemoval: TransferWithdraw #addToSummary: stamp: 'fm 5/28/2022 20:16:59'!
addToSummary: aSummary

	aSummary affectOperationBeingATransferWithdraw: self.!

!methodRemoval: Withdraw #addToSummary: stamp: 'fm 5/28/2022 20:16:59'!
addToSummary: aSummary

	aSummary affectOperationBeingAWithdraw: self.!

!methodRemoval: AccountTransaction #addToSummary: stamp: 'fm 5/28/2022 20:17:01'!
addToSummary: aSummary

	self subclassResponsibility!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (52 to: 58)
		declaredAt: (52 to: 58)) affectReport:
		(self coverAll:
			{74 to: 77}) ] valueCoveringAll:
		{60 to: 72}.
	[
	(self coverAll:
		{81 to: 84}) addAccountBalanceLine ] valueCoveringAll:
		{86 to: 106}.
	^ report
		cover: (113 to: 118)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReport: anAccountReport
	[
	(transactions
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) do: [ :transaction |
		[
		(transaction
			cover: (67 to: 77)
			declaredAt: (53 to: 63)) affectReport:
			(anAccountReport
				cover: (93 to: 107)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{79 to: 91} ]] valueCoveringAll:
		{47 to: 49}.! !
!Behavior method!
addAccountBalanceLine
	^ [
	(report
		cover: (27 to: 32)
		declaredAt: (27 to: 32)) add:
		([
		('Balance = ' coverAll:
			{40 to: 51}) ,
			([
			([
			(account
				cover: (53 to: 59)
				declaredAt: (53 to: 59)) balance ] valueCoveringAll:
				{61 to: 67}) asString ] valueCoveringAll:
				{69 to: 76}) ] valueCoveringAll:
			{52 to: 52}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:17:12'!
PASSED!
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingADeposit:
		(self coverAll:
			{82 to: 85}) ] valueCoveringAll:
		{52 to: 80}.! !
!Behavior method!
affectOperationBeingADeposit: aDeposit
	[
	(report
		cover: (42 to: 47)
		declaredAt: (42 to: 47)) add:
		([
		('Deposito por ' coverAll:
			{55 to: 69}) ,
			([
			([
			(aDeposit
				cover: (71 to: 78)
				declaredAt: (31 to: 38)) value ] valueCoveringAll:
				{80 to: 84}) asString ] valueCoveringAll:
				{86 to: 93}) ] valueCoveringAll:
			{70 to: 70}) ] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 20:17:12'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingAWithdraw:
		(self coverAll:
			{83 to: 86}) ] valueCoveringAll:
		{52 to: 81}.! !
!Behavior method!
affectOperationBeingAWithdraw: aWithdraw
	[
	(report
		cover: (44 to: 49)
		declaredAt: (44 to: 49)) add:
		([
		('Extraccion por ' coverAll:
			{57 to: 73}) ,
			([
			([
			(aWithdraw
				cover: (75 to: 83)
				declaredAt: (32 to: 40)) value ] valueCoveringAll:
				{85 to: 89}) asString ] valueCoveringAll:
				{91 to: 98}) ] valueCoveringAll:
			{74 to: 74}) ] valueCoveringAll:
		{51 to: 54}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 20:17:12'!
PASSED!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingATransferWithdraw:
		(self coverAll:
			{91 to: 94}) ] valueCoveringAll:
		{52 to: 89}.! !
!Behavior method!
affectOperationBeingATransferWithdraw: aTransferWithdraw
	[
	(report
		cover: (60 to: 65)
		declaredAt: (60 to: 65)) add:
		([
		('Salida por transferencia de ' coverAll:
			{73 to: 102}) ,
			([
			([
			(aTransferWithdraw
				cover: (104 to: 120)
				declaredAt: (40 to: 56)) value ] valueCoveringAll:
				{122 to: 126}) asString ] valueCoveringAll:
				{128 to: 135}) ] valueCoveringAll:
			{103 to: 103}) ] valueCoveringAll:
		{67 to: 70}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (37 to: 51)
		declaredAt: (15 to: 29)) affectOperationBeingATransferDeposit:
		(self coverAll:
			{91 to: 94}) ] valueCoveringAll:
		{53 to: 89}.! !
!Behavior method!
affectOperationBeingATransferDeposit: aTransferDeposit
	[
	(report
		cover: (58 to: 63)
		declaredAt: (58 to: 63)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{71 to: 101}) ,
			([
			([
			(aTransferDeposit
				cover: (103 to: 118)
				declaredAt: (39 to: 54)) value ] valueCoveringAll:
				{120 to: 124}) asString ] valueCoveringAll:
				{126 to: 133}) ] valueCoveringAll:
			{102 to: 102}) ] valueCoveringAll:
		{65 to: 68}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 20:17:12'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(accounts
		cover: (35 to: 42)
		declaredAt: (35 to: 42)) do: [ :account |
		[
		(account
			cover: (61 to: 67)
			declaredAt: (51 to: 57)) affectReport:
			(anAccountReport
				cover: (83 to: 97)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{69 to: 81} ]] valueCoveringAll:
		{44 to: 46}.! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:17:12'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{32 to: 35}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (58 to: 66)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 56}.
	[
	cascadeReceiver add:
		(anotherAccount
			cover: (76 to: 89)
			declaredAt: (23 to: 36)) ] valueCoveringAll:
		{71 to: 74}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
executeReport
	(report _ 0 coverAll:
		{28 to: 28})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (32 to: 38)
		declaredAt: (32 to: 38)) affectReport:
		(self coverAll:
			{54 to: 57}) ] valueCoveringAll:
		{40 to: 52}.
	^ report
		cover: (64 to: 69)
		declaredAt: (18 to: 23).! !

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
affectOperationBeingATransferWithdraw: aTransferWithdraw
	^ (report _ [
	(report
		cover: (62 to: 67)
		declaredAt: (62 to: 67)) -
		([
		(aTransferWithdraw
			cover: (81 to: 97)
			declaredAt: (40 to: 56)) value ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{79 to: 79})
		cover: (72 to: 77)
		declaredAt: (62 to: 67).! !
!Behavior method!
affectOperationBeingATransferDeposit: aTransferDeposit
	^ (report _ [
	(report
		cover: (60 to: 65)
		declaredAt: (60 to: 65)) +
		([
		(aTransferDeposit
			cover: (79 to: 94)
			declaredAt: (39 to: 54)) value ] valueCoveringAll:
			{96 to: 100}) ] valueCoveringAll:
		{77 to: 77})
		cover: (70 to: 75)
		declaredAt: (60 to: 65).! !

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
affectOperationBeingADeposit: aDeposit
	^ self.! !

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
sentTransaction
	^ sentTransaction
		cover: (20 to: 34)
		declaredAt: (20 to: 34).! !
!Behavior method!
receivedTransaction
	^ receivedTransaction
		cover: (24 to: 42)
		declaredAt: (24 to: 42).! !

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
cantHaveSameAccountAtBothEnds
	^ 'No se puede poner una misma cuenta como emisora y receptora de la misma transferencia.' coverAll:
		{35 to: 122}.! !

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 20:17:13'!
PASSED!
!Behavior method!
amountMustBePositive
	^ 'El monto de la transferencia debe ser mayor a cero' coverAll:
		{26 to: 77}.! !

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 20:17:13'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 20:18:27'!
PASSED!

!testRun: #TransferNetTest #test01XXX stamp: 'fm 5/28/2022 20:18:28'!
PASSED!

!testRun: #TransferNetTest #test02XXX stamp: 'fm 5/28/2022 20:18:28'!
PASSED!

!testRun: #TransferNetTest #test03XXX stamp: 'fm 5/28/2022 20:18:28'!
PASSED!

!testRun: #TransferNetTest #test04XXX stamp: 'fm 5/28/2022 20:18:28'!
PASSED!

!testRun: #TransferNetTest #test05XXX stamp: 'fm 5/28/2022 20:18:28'!
PASSED!

!testRun: #TransferNetTest #test06XXX stamp: 'fm 5/28/2022 20:18:28'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 20:18:28'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 20:18:28'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 20:18:28'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 20:18:28'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 20:18:28'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 20:19:50'!
test01TransferNetForAccountWithNoTransactionsIs0

	| account |
	
	account := ReceptiveAccount new.
	
	self assert: (self transferNetFor: account) equals: 0! !

!methodRemoval: TransferNetTest #test01XXX stamp: 'fm 5/28/2022 20:19:50'!
test01XXX

	| account |
	
	account := ReceptiveAccount new.
	
	self assert: (self transferNetFor: account) equals: 0!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 20:21:43'!
test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer

	| account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	
	Transfer from: account to: otherAccount for: 100.
	
	self assert: (self transferNetFor: account) equals: -100.
	self assert: (self transferNetFor: otherAccount) equals: 100! !

!methodRemoval: TransferNetTest #test02XXX stamp: 'fm 5/28/2022 20:21:43'!
test02XXX

	| account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	
	Transfer from: account to: otherAccount for: 100.
	
	self assert: (self transferNetFor: account) equals: -100.
	self assert: (self transferNetFor: otherAccount) equals: 100!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 20:22:20'!
test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions

	| account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Deposit register: 50 on: account.
	Deposit register: 50 on: otherAccount.
	Transfer from: account to: otherAccount for: 100.
	
	self assert: (self transferNetFor: account) equals: -100.
	self assert: (self transferNetFor: otherAccount) equals: 100! !

!methodRemoval: TransferNetTest #test03XXX stamp: 'fm 5/28/2022 20:22:20'!
test03XXX

	| account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Deposit register: 50 on: account.
	Deposit register: 50 on: otherAccount.
	Transfer from: account to: otherAccount for: 100.
	
	self assert: (self transferNetFor: account) equals: -100.
	self assert: (self transferNetFor: otherAccount) equals: 100!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 20:22:48'!
test04TransferNetForEmptyPortfolioIs0

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (self transferNetFor: portfolio) equals: 0! !

!methodRemoval: TransferNetTest #test04XXX stamp: 'fm 5/28/2022 20:22:48'!
test04XXX

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (self transferNetFor: portfolio) equals: 0!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 20:23:22'!
test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer

	| portfolio account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account to: otherAccount for: 100.
	
	portfolio := Portfolio new.
	portfolio add: account.
	

	self assert: (self transferNetFor: portfolio) equals: -100! !

!methodRemoval: TransferNetTest #test05XXX stamp: 'fm 5/28/2022 20:23:23'!
test05XXX

	| portfolio account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account to: otherAccount for: 100.
	
	portfolio := Portfolio new.
	portfolio add: account.
	

	self assert: (self transferNetFor: portfolio) equals: -100!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 20:23:59'!
test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferAndNotOtherTransactions

	| portfolio account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account to: otherAccount for: 100.
	Deposit register: 200 on: account.
	
	portfolio := Portfolio new.
	portfolio add: account.
	

	self assert: (self transferNetFor: portfolio) equals: -100! !

!methodRemoval: TransferNetTest #test06XXX stamp: 'fm 5/28/2022 20:24:00'!
test06XXX

	| portfolio account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account to: otherAccount for: 100.
	Deposit register: 200 on: account.
	
	portfolio := Portfolio new.
	portfolio add: account.
	

	self assert: (self transferNetFor: portfolio) equals: -100!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 20:24:10'!
test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions

	| portfolio account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account to: otherAccount for: 100.
	Deposit register: 200 on: account.
	
	portfolio := Portfolio new.
	portfolio add: account.
	

	self assert: (self transferNetFor: portfolio) equals: -100! !

!methodRemoval: TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferAndNotOtherTransactions stamp: 'fm 5/28/2022 20:24:10'!
test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferAndNotOtherTransactions

	| portfolio account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account to: otherAccount for: 100.
	Deposit register: 200 on: account.
	
	portfolio := Portfolio new.
	portfolio add: account.
	

	self assert: (self transferNetFor: portfolio) equals: -100!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 20:24:23' prior: 50491168!
test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions

	| portfolio account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account to: otherAccount for: 100.
	Deposit register: 200 on: account.
	Withdraw register: 100 on account.
	
	portfolio := Portfolio new.
	portfolio add: account.
	

	self assert: (self transferNetFor: portfolio) equals: -100! !

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'fm 5/28/2022 20:24:23'!
ERROR!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 20:24:30' prior: 50491203!
test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions

	| portfolio account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account to: otherAccount for: 100.
	Deposit register: 200 on: account.
	Withdraw register: 100 on: account.
	
	portfolio := Portfolio new.
	portfolio add: account.
	

	self assert: (self transferNetFor: portfolio) equals: -100! !

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'fm 5/28/2022 20:24:31'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'fm 5/28/2022 20:24:31'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'fm 5/28/2022 20:24:31'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'fm 5/28/2022 20:24:31'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'fm 5/28/2022 20:24:31'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'fm 5/28/2022 20:24:31'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'fm 5/28/2022 20:24:31'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'fm 5/28/2022 20:25:05' prior: 50491070!
test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions

	| account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Deposit register: 50 on: account.
	Deposit register: 50 on: otherAccount.
	Withdraw register: 100 on: account.
	Withdraw register: 100 on: otherAccount.
	
	Transfer from: account to: otherAccount for: 100.
	
	self assert: (self transferNetFor: account) equals: -100.
	self assert: (self transferNetFor: otherAccount) equals: 100! !
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (52 to: 58)
		declaredAt: (52 to: 58)) affectReport:
		(self coverAll:
			{74 to: 77}) ] valueCoveringAll:
		{60 to: 72}.
	[
	(self coverAll:
		{81 to: 84}) addAccountBalanceLine ] valueCoveringAll:
		{86 to: 106}.
	^ report
		cover: (113 to: 118)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReport: anAccountReport
	[
	(transactions
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) do: [ :transaction |
		[
		(transaction
			cover: (67 to: 77)
			declaredAt: (53 to: 63)) affectReport:
			(anAccountReport
				cover: (93 to: 107)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{79 to: 91} ]] valueCoveringAll:
		{47 to: 49}.! !
!Behavior method!
addAccountBalanceLine
	^ [
	(report
		cover: (27 to: 32)
		declaredAt: (27 to: 32)) add:
		([
		('Balance = ' coverAll:
			{40 to: 51}) ,
			([
			([
			(account
				cover: (53 to: 59)
				declaredAt: (53 to: 59)) balance ] valueCoveringAll:
				{61 to: 67}) asString ] valueCoveringAll:
				{69 to: 76}) ] valueCoveringAll:
			{52 to: 52}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingADeposit:
		(self coverAll:
			{82 to: 85}) ] valueCoveringAll:
		{52 to: 80}.! !
!Behavior method!
affectOperationBeingADeposit: aDeposit
	[
	(report
		cover: (42 to: 47)
		declaredAt: (42 to: 47)) add:
		([
		('Deposito por ' coverAll:
			{55 to: 69}) ,
			([
			([
			(aDeposit
				cover: (71 to: 78)
				declaredAt: (31 to: 38)) value ] valueCoveringAll:
				{80 to: 84}) asString ] valueCoveringAll:
				{86 to: 93}) ] valueCoveringAll:
			{70 to: 70}) ] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingAWithdraw:
		(self coverAll:
			{83 to: 86}) ] valueCoveringAll:
		{52 to: 81}.! !
!Behavior method!
affectOperationBeingAWithdraw: aWithdraw
	[
	(report
		cover: (44 to: 49)
		declaredAt: (44 to: 49)) add:
		([
		('Extraccion por ' coverAll:
			{57 to: 73}) ,
			([
			([
			(aWithdraw
				cover: (75 to: 83)
				declaredAt: (32 to: 40)) value ] valueCoveringAll:
				{85 to: 89}) asString ] valueCoveringAll:
				{91 to: 98}) ] valueCoveringAll:
			{74 to: 74}) ] valueCoveringAll:
		{51 to: 54}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingATransferWithdraw:
		(self coverAll:
			{91 to: 94}) ] valueCoveringAll:
		{52 to: 89}.! !
!Behavior method!
affectOperationBeingATransferWithdraw: aTransferWithdraw
	[
	(report
		cover: (60 to: 65)
		declaredAt: (60 to: 65)) add:
		([
		('Salida por transferencia de ' coverAll:
			{73 to: 102}) ,
			([
			([
			(aTransferWithdraw
				cover: (104 to: 120)
				declaredAt: (40 to: 56)) value ] valueCoveringAll:
				{122 to: 126}) asString ] valueCoveringAll:
				{128 to: 135}) ] valueCoveringAll:
			{103 to: 103}) ] valueCoveringAll:
		{67 to: 70}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (37 to: 51)
		declaredAt: (15 to: 29)) affectOperationBeingATransferDeposit:
		(self coverAll:
			{91 to: 94}) ] valueCoveringAll:
		{53 to: 89}.! !
!Behavior method!
affectOperationBeingATransferDeposit: aTransferDeposit
	[
	(report
		cover: (58 to: 63)
		declaredAt: (58 to: 63)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{71 to: 101}) ,
			([
			([
			(aTransferDeposit
				cover: (103 to: 118)
				declaredAt: (39 to: 54)) value ] valueCoveringAll:
				{120 to: 124}) asString ] valueCoveringAll:
				{126 to: 133}) ] valueCoveringAll:
			{102 to: 102}) ] valueCoveringAll:
		{65 to: 68}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(accounts
		cover: (35 to: 42)
		declaredAt: (35 to: 42)) do: [ :account |
		[
		(account
			cover: (61 to: 67)
			declaredAt: (51 to: 57)) affectReport:
			(anAccountReport
				cover: (83 to: 97)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{69 to: 81} ]] valueCoveringAll:
		{44 to: 46}.! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 20:25:43'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{32 to: 35}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (58 to: 66)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 56}.
	[
	cascadeReceiver add:
		(anotherAccount
			cover: (76 to: 89)
			declaredAt: (23 to: 36)) ] valueCoveringAll:
		{71 to: 74}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 20:25:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 20:25:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 20:25:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 20:25:43'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 20:25:43'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 20:25:44'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 20:25:44'!
PASSED!
!Behavior method!
executeReport
	(report _ 0 coverAll:
		{28 to: 28})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (32 to: 38)
		declaredAt: (32 to: 38)) affectReport:
		(self coverAll:
			{54 to: 57}) ] valueCoveringAll:
		{40 to: 52}.
	^ report
		cover: (64 to: 69)
		declaredAt: (18 to: 23).! !

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'fm 5/28/2022 20:25:44'!
PASSED!
!Behavior method!
affectOperationBeingATransferWithdraw: aTransferWithdraw
	^ (report _ [
	(report
		cover: (62 to: 67)
		declaredAt: (62 to: 67)) -
		([
		(aTransferWithdraw
			cover: (81 to: 97)
			declaredAt: (40 to: 56)) value ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{79 to: 79})
		cover: (72 to: 77)
		declaredAt: (62 to: 67).! !
!Behavior method!
affectOperationBeingATransferDeposit: aTransferDeposit
	^ (report _ [
	(report
		cover: (60 to: 65)
		declaredAt: (60 to: 65)) +
		([
		(aTransferDeposit
			cover: (79 to: 94)
			declaredAt: (39 to: 54)) value ] valueCoveringAll:
			{96 to: 100}) ] valueCoveringAll:
		{77 to: 77})
		cover: (70 to: 75)
		declaredAt: (60 to: 65).! !

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'fm 5/28/2022 20:25:44'!
PASSED!
!Behavior method!
affectOperationBeingADeposit: aDeposit
	^ self.! !
!Behavior method!
affectOperationBeingAWithdraw: aWithdraw
	^ self.! !

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 20:25:44'!
PASSED!
!Behavior method!
sentTransaction
	^ sentTransaction
		cover: (20 to: 34)
		declaredAt: (20 to: 34).! !
!Behavior method!
receivedTransaction
	^ receivedTransaction
		cover: (24 to: 42)
		declaredAt: (24 to: 42).! !

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 20:25:44'!
PASSED!
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 20:25:44'!
PASSED!
!Behavior method!
cantHaveSameAccountAtBothEnds
	^ 'No se puede poner una misma cuenta como emisora y receptora de la misma transferencia.' coverAll:
		{35 to: 122}.! !

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 20:25:44'!
PASSED!
!Behavior method!
amountMustBePositive
	^ 'El monto de la transferencia debe ser mayor a cero' coverAll:
		{26 to: 77}.! !

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 20:25:44'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'fm 5/28/2022 20:27:31'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
executeReport
	(report _ 0 coverAll:
		{28 to: 28})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (32 to: 38)
		declaredAt: (32 to: 38)) affectReport:
		(self coverAll:
			{54 to: 57}) ] valueCoveringAll:
		{40 to: 52}.
	^ report
		cover: (64 to: 69)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReport: anAccountReport
	[
	(transactions
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) do: [ :transaction |
		[
		(transaction
			cover: (67 to: 77)
			declaredAt: (53 to: 63)) affectReport:
			(anAccountReport
				cover: (93 to: 107)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{79 to: 91} ]] valueCoveringAll:
		{47 to: 49}.! !

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'fm 5/28/2022 20:27:36'!
PASSED!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingATransferWithdraw:
		(self coverAll:
			{91 to: 94}) ] valueCoveringAll:
		{52 to: 89}.! !
!Behavior method!
affectOperationBeingATransferWithdraw: aTransferWithdraw
	^ (report _ [
	(report
		cover: (62 to: 67)
		declaredAt: (62 to: 67)) -
		([
		(aTransferWithdraw
			cover: (81 to: 97)
			declaredAt: (40 to: 56)) value ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{79 to: 79})
		cover: (72 to: 77)
		declaredAt: (62 to: 67).! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (37 to: 51)
		declaredAt: (15 to: 29)) affectOperationBeingATransferDeposit:
		(self coverAll:
			{91 to: 94}) ] valueCoveringAll:
		{53 to: 89}.! !
!Behavior method!
affectOperationBeingATransferDeposit: aTransferDeposit
	^ (report _ [
	(report
		cover: (60 to: 65)
		declaredAt: (60 to: 65)) +
		([
		(aTransferDeposit
			cover: (79 to: 94)
			declaredAt: (39 to: 54)) value ] valueCoveringAll:
			{96 to: 100}) ] valueCoveringAll:
		{77 to: 77})
		cover: (70 to: 75)
		declaredAt: (60 to: 65).! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'fm 5/28/2022 20:27:37'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingADeposit:
		(self coverAll:
			{82 to: 85}) ] valueCoveringAll:
		{52 to: 80}.! !
!Behavior method!
affectOperationBeingADeposit: aDeposit
	^ self.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectOperationBeingAWithdraw:
		(self coverAll:
			{83 to: 86}) ] valueCoveringAll:
		{52 to: 81}.! !
!Behavior method!
affectOperationBeingAWithdraw: aWithdraw
	^ self.! !

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'fm 5/28/2022 20:27:37'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(accounts
		cover: (35 to: 42)
		declaredAt: (35 to: 42)) do: [ :account |
		[
		(account
			cover: (61 to: 67)
			declaredAt: (51 to: 57)) affectReport:
			(anAccountReport
				cover: (83 to: 97)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{69 to: 81} ]] valueCoveringAll:
		{44 to: 46}.! !

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'fm 5/28/2022 20:27:37'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'fm 5/28/2022 20:27:37'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'fm 5/28/2022 20:27:37'!
PASSED!
!AccountReport methodsFor: 'executing' stamp: 'fm 5/28/2022 20:30:04'!
affectReportWithDeposit: aDeposit

	^ self subclassResponsibility! !
!AccountSummary methodsFor: 'executing' stamp: 'fm 5/28/2022 20:30:04' overrides: 50492608!
affectReportWithDeposit: aDeposit

	report add: ('Deposito por ',aDeposit value asString)! !
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:30:04' overrides: 50492608!
affectReportWithDeposit: aDeposit! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 20:30:04' prior: 50488775 overrides: 50488781!
affectReport: anAccountReport 
	
	^anAccountReport affectReportWithDeposit: self! !

!methodRemoval: AccountReport #affectOperationBeingADeposit: stamp: 'fm 5/28/2022 20:30:04'!
affectOperationBeingADeposit: aDeposit

	^ self subclassResponsibility!

!methodRemoval: AccountSummary #affectOperationBeingADeposit: stamp: 'fm 5/28/2022 20:30:04'!
affectOperationBeingADeposit: aDeposit

	report add: ('Deposito por ',aDeposit value asString)!

!methodRemoval: TransferNet #affectOperationBeingADeposit: stamp: 'fm 5/28/2022 20:30:04'!
affectOperationBeingADeposit: aDeposit!
!AccountReport methodsFor: 'executing' stamp: 'fm 5/28/2022 20:30:15'!
affectReportWithTransferDeposit: aTransferDeposit

	^ self subclassResponsibility! !
!AccountSummary methodsFor: 'executing' stamp: 'fm 5/28/2022 20:30:15' overrides: 50492646!
affectReportWithTransferDeposit: aTransferDeposit

	report add: ('Entrada por transferencia de ',aTransferDeposit value asString).! !
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:30:16' overrides: 50492646!
affectReportWithTransferDeposit: aTransferDeposit

	^ report := report + aTransferDeposit value! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 20:30:16' prior: 50488754 overrides: 50488781!
affectReport: anAccountReport 
	
	^ anAccountReport affectReportWithTransferDeposit: self! !

!methodRemoval: AccountReport #affectOperationBeingATransferDeposit: stamp: 'fm 5/28/2022 20:30:16'!
affectOperationBeingATransferDeposit: aTransferDeposit

	^ self subclassResponsibility!

!methodRemoval: AccountSummary #affectOperationBeingATransferDeposit: stamp: 'fm 5/28/2022 20:30:16'!
affectOperationBeingATransferDeposit: aTransferDeposit

	report add: ('Entrada por transferencia de ',aTransferDeposit value asString).!

!methodRemoval: TransferNet #affectOperationBeingATransferDeposit: stamp: 'fm 5/28/2022 20:30:16'!
affectOperationBeingATransferDeposit: aTransferDeposit

	^ report := report + aTransferDeposit value!
!AccountReport methodsFor: 'executing' stamp: 'fm 5/28/2022 20:30:25'!
affectReportWithTransferWithdraw: aTransferWithdraw

	^ self subclassResponsibility! !
!AccountSummary methodsFor: 'executing' stamp: 'fm 5/28/2022 20:30:25' overrides: 50492692!
affectReportWithTransferWithdraw: aTransferWithdraw

	report add: ('Salida por transferencia de ',aTransferWithdraw value asString).! !
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:30:25' overrides: 50492692!
affectReportWithTransferWithdraw: aTransferWithdraw

	^ report := report - aTransferWithdraw value! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 20:30:26' prior: 50488761 overrides: 50488781!
affectReport: anAccountReport 
	
	^anAccountReport affectReportWithTransferWithdraw: self! !

!methodRemoval: AccountReport #affectOperationBeingATransferWithdraw: stamp: 'fm 5/28/2022 20:30:26'!
affectOperationBeingATransferWithdraw: aTransferWithdraw

	^ self subclassResponsibility!

!methodRemoval: AccountSummary #affectOperationBeingATransferWithdraw: stamp: 'fm 5/28/2022 20:30:26'!
affectOperationBeingATransferWithdraw: aTransferWithdraw

	report add: ('Salida por transferencia de ',aTransferWithdraw value asString).!

!methodRemoval: TransferNet #affectOperationBeingATransferWithdraw: stamp: 'fm 5/28/2022 20:30:26'!
affectOperationBeingATransferWithdraw: aTransferWithdraw

	^ report := report - aTransferWithdraw value!
!AccountReport methodsFor: 'executing' stamp: 'fm 5/28/2022 20:30:36'!
affectReportWithWithdraw: aWithdraw

	^ self subclassResponsibility! !
!AccountSummary methodsFor: 'executing' stamp: 'fm 5/28/2022 20:30:36' overrides: 50492739!
affectReportWithWithdraw: aWithdraw

	report add: ('Extraccion por ',aWithdraw value asString).! !
!TransferNet methodsFor: 'transfer-net' stamp: 'fm 5/28/2022 20:30:36' overrides: 50492739!
affectReportWithWithdraw: aWithdraw! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'fm 5/28/2022 20:30:36' prior: 50488768 overrides: 50488781!
affectReport: anAccountReport 
	
	^anAccountReport affectReportWithWithdraw: self! !

!methodRemoval: AccountReport #affectOperationBeingAWithdraw: stamp: 'fm 5/28/2022 20:30:36'!
affectOperationBeingAWithdraw: aWithdraw

	^ self subclassResponsibility!

!methodRemoval: AccountSummary #affectOperationBeingAWithdraw: stamp: 'fm 5/28/2022 20:30:36'!
affectOperationBeingAWithdraw: aWithdraw

	report add: ('Extraccion por ',aWithdraw value asString).!

!methodRemoval: TransferNet #affectOperationBeingAWithdraw: stamp: 'fm 5/28/2022 20:30:36'!
affectOperationBeingAWithdraw: aWithdraw!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (52 to: 58)
		declaredAt: (52 to: 58)) affectReport:
		(self coverAll:
			{74 to: 77}) ] valueCoveringAll:
		{60 to: 72}.
	[
	(self coverAll:
		{81 to: 84}) addAccountBalanceLine ] valueCoveringAll:
		{86 to: 106}.
	^ report
		cover: (113 to: 118)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReport: anAccountReport
	[
	(transactions
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) do: [ :transaction |
		[
		(transaction
			cover: (67 to: 77)
			declaredAt: (53 to: 63)) affectReport:
			(anAccountReport
				cover: (93 to: 107)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{79 to: 91} ]] valueCoveringAll:
		{47 to: 49}.! !
!Behavior method!
addAccountBalanceLine
	^ [
	(report
		cover: (27 to: 32)
		declaredAt: (27 to: 32)) add:
		([
		('Balance = ' coverAll:
			{40 to: 51}) ,
			([
			([
			(account
				cover: (53 to: 59)
				declaredAt: (53 to: 59)) balance ] valueCoveringAll:
				{61 to: 67}) asString ] valueCoveringAll:
				{69 to: 76}) ] valueCoveringAll:
			{52 to: 52}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithDeposit:
		(self coverAll:
			{77 to: 80}) ] valueCoveringAll:
		{52 to: 75}.! !
!Behavior method!
affectReportWithDeposit: aDeposit
	[
	(report
		cover: (37 to: 42)
		declaredAt: (37 to: 42)) add:
		([
		('Deposito por ' coverAll:
			{50 to: 64}) ,
			([
			([
			(aDeposit
				cover: (66 to: 73)
				declaredAt: (26 to: 33)) value ] valueCoveringAll:
				{75 to: 79}) asString ] valueCoveringAll:
				{81 to: 88}) ] valueCoveringAll:
			{65 to: 65}) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithWithdraw:
		(self coverAll:
			{78 to: 81}) ] valueCoveringAll:
		{52 to: 76}.! !
!Behavior method!
affectReportWithWithdraw: aWithdraw
	[
	(report
		cover: (39 to: 44)
		declaredAt: (39 to: 44)) add:
		([
		('Extraccion por ' coverAll:
			{52 to: 68}) ,
			([
			([
			(aWithdraw
				cover: (70 to: 78)
				declaredAt: (27 to: 35)) value ] valueCoveringAll:
				{80 to: 84}) asString ] valueCoveringAll:
				{86 to: 93}) ] valueCoveringAll:
			{69 to: 69}) ] valueCoveringAll:
		{46 to: 49}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithTransferWithdraw:
		(self coverAll:
			{86 to: 89}) ] valueCoveringAll:
		{52 to: 84}.! !
!Behavior method!
affectReportWithTransferWithdraw: aTransferWithdraw
	[
	(report
		cover: (55 to: 60)
		declaredAt: (55 to: 60)) add:
		([
		('Salida por transferencia de ' coverAll:
			{68 to: 97}) ,
			([
			([
			(aTransferWithdraw
				cover: (99 to: 115)
				declaredAt: (35 to: 51)) value ] valueCoveringAll:
				{117 to: 121}) asString ] valueCoveringAll:
				{123 to: 130}) ] valueCoveringAll:
			{98 to: 98}) ] valueCoveringAll:
		{62 to: 65}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (37 to: 51)
		declaredAt: (15 to: 29)) affectReportWithTransferDeposit:
		(self coverAll:
			{86 to: 89}) ] valueCoveringAll:
		{53 to: 84}.! !
!Behavior method!
affectReportWithTransferDeposit: aTransferDeposit
	[
	(report
		cover: (53 to: 58)
		declaredAt: (53 to: 58)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{66 to: 96}) ,
			([
			([
			(aTransferDeposit
				cover: (98 to: 113)
				declaredAt: (34 to: 49)) value ] valueCoveringAll:
				{115 to: 119}) asString ] valueCoveringAll:
				{121 to: 128}) ] valueCoveringAll:
			{97 to: 97}) ] valueCoveringAll:
		{60 to: 63}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(accounts
		cover: (35 to: 42)
		declaredAt: (35 to: 42)) do: [ :account |
		[
		(account
			cover: (61 to: 67)
			declaredAt: (51 to: 57)) affectReport:
			(anAccountReport
				cover: (83 to: 97)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{69 to: 81} ]] valueCoveringAll:
		{44 to: 46}.! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'fm 5/28/2022 20:31:16'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{32 to: 35}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (58 to: 66)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 56}.
	[
	cascadeReceiver add:
		(anotherAccount
			cover: (76 to: 89)
			declaredAt: (23 to: 36)) ] valueCoveringAll:
		{71 to: 74}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fm 5/28/2022 20:31:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fm 5/28/2022 20:31:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fm 5/28/2022 20:31:16'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fm 5/28/2022 20:31:16'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fm 5/28/2022 20:31:16'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fm 5/28/2022 20:31:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fm 5/28/2022 20:31:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fm 5/28/2022 20:31:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:31:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fm 5/28/2022 20:31:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fm 5/28/2022 20:31:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fm 5/28/2022 20:31:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fm 5/28/2022 20:31:17'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fm 5/28/2022 20:31:17'!
PASSED!
!Behavior method!
executeReport
	(report _ 0 coverAll:
		{28 to: 28})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (32 to: 38)
		declaredAt: (32 to: 38)) affectReport:
		(self coverAll:
			{54 to: 57}) ] valueCoveringAll:
		{40 to: 52}.
	^ report
		cover: (64 to: 69)
		declaredAt: (18 to: 23).! !

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'fm 5/28/2022 20:31:17'!
PASSED!
!Behavior method!
affectReportWithTransferWithdraw: aTransferWithdraw
	^ (report _ [
	(report
		cover: (57 to: 62)
		declaredAt: (57 to: 62)) -
		([
		(aTransferWithdraw
			cover: (76 to: 92)
			declaredAt: (35 to: 51)) value ] valueCoveringAll:
			{94 to: 98}) ] valueCoveringAll:
		{74 to: 74})
		cover: (67 to: 72)
		declaredAt: (57 to: 62).! !
!Behavior method!
affectReportWithTransferDeposit: aTransferDeposit
	^ (report _ [
	(report
		cover: (55 to: 60)
		declaredAt: (55 to: 60)) +
		([
		(aTransferDeposit
			cover: (74 to: 89)
			declaredAt: (34 to: 49)) value ] valueCoveringAll:
			{91 to: 95}) ] valueCoveringAll:
		{72 to: 72})
		cover: (65 to: 70)
		declaredAt: (55 to: 60).! !

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'fm 5/28/2022 20:31:17'!
PASSED!
!Behavior method!
affectReportWithDeposit: aDeposit
	^ self.! !
!Behavior method!
affectReportWithWithdraw: aWithdraw
	^ self.! !

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'fm 5/28/2022 20:31:17'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'fm 5/28/2022 20:31:17'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'fm 5/28/2022 20:31:17'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'fm 5/28/2022 20:31:17'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'fm 5/28/2022 20:31:17'!
PASSED!
!Behavior method!
sentTransaction
	^ sentTransaction
		cover: (20 to: 34)
		declaredAt: (20 to: 34).! !
!Behavior method!
receivedTransaction
	^ receivedTransaction
		cover: (24 to: 42)
		declaredAt: (24 to: 42).! !

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'fm 5/28/2022 20:31:17'!
PASSED!
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'fm 5/28/2022 20:31:17'!
PASSED!
!Behavior method!
cantHaveSameAccountAtBothEnds
	^ 'No se puede poner una misma cuenta como emisora y receptora de la misma transferencia.' coverAll:
		{35 to: 122}.! !

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'fm 5/28/2022 20:31:17'!
PASSED!
!Behavior method!
amountMustBePositive
	^ 'El monto de la transferencia debe ser mayor a cero' coverAll:
		{26 to: 77}.! !

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'fm 5/28/2022 20:31:17'!
PASSED!

----SNAPSHOT----(28 May 2022 20:31:46) CuisUniversity-5096.image priorSource: 4873004!

----STARTUP---- (29 May 2022 19:20:26) as /mnt/c/Users/Ari/Desktop/Ingenieria/CuisUniversity/Portfolio2/linux64/CuisUniversity-5096.image!

!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (52 to: 58)
		declaredAt: (52 to: 58)) affectReport:
		(self coverAll:
			{74 to: 77}) ] valueCoveringAll:
		{60 to: 72}.
	[
	(self coverAll:
		{81 to: 84}) addAccountBalanceLine ] valueCoveringAll:
		{86 to: 106}.
	^ report
		cover: (113 to: 118)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReport: anAccountReport
	[
	(transactions
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) do: [ :transaction |
		[
		(transaction
			cover: (67 to: 77)
			declaredAt: (53 to: 63)) affectReport:
			(anAccountReport
				cover: (93 to: 107)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{79 to: 91} ]] valueCoveringAll:
		{47 to: 49}.! !
!Behavior method!
addAccountBalanceLine
	^ [
	(report
		cover: (27 to: 32)
		declaredAt: (27 to: 32)) add:
		([
		('Balance = ' coverAll:
			{40 to: 51}) ,
			([
			([
			(account
				cover: (53 to: 59)
				declaredAt: (53 to: 59)) balance ] valueCoveringAll:
				{61 to: 67}) asString ] valueCoveringAll:
				{69 to: 76}) ] valueCoveringAll:
			{52 to: 52}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithDeposit:
		(self coverAll:
			{77 to: 80}) ] valueCoveringAll:
		{52 to: 75}.! !
!Behavior method!
affectReportWithDeposit: aDeposit
	[
	(report
		cover: (37 to: 42)
		declaredAt: (37 to: 42)) add:
		([
		('Deposito por ' coverAll:
			{50 to: 64}) ,
			([
			([
			(aDeposit
				cover: (66 to: 73)
				declaredAt: (26 to: 33)) value ] valueCoveringAll:
				{75 to: 79}) asString ] valueCoveringAll:
				{81 to: 88}) ] valueCoveringAll:
			{65 to: 65}) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithWithdraw:
		(self coverAll:
			{78 to: 81}) ] valueCoveringAll:
		{52 to: 76}.! !
!Behavior method!
affectReportWithWithdraw: aWithdraw
	[
	(report
		cover: (39 to: 44)
		declaredAt: (39 to: 44)) add:
		([
		('Extraccion por ' coverAll:
			{52 to: 68}) ,
			([
			([
			(aWithdraw
				cover: (70 to: 78)
				declaredAt: (27 to: 35)) value ] valueCoveringAll:
				{80 to: 84}) asString ] valueCoveringAll:
				{86 to: 93}) ] valueCoveringAll:
			{69 to: 69}) ] valueCoveringAll:
		{46 to: 49}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithTransferWithdraw:
		(self coverAll:
			{86 to: 89}) ] valueCoveringAll:
		{52 to: 84}.! !
!Behavior method!
affectReportWithTransferWithdraw: aTransferWithdraw
	[
	(report
		cover: (55 to: 60)
		declaredAt: (55 to: 60)) add:
		([
		('Salida por transferencia de ' coverAll:
			{68 to: 97}) ,
			([
			([
			(aTransferWithdraw
				cover: (99 to: 115)
				declaredAt: (35 to: 51)) value ] valueCoveringAll:
				{117 to: 121}) asString ] valueCoveringAll:
				{123 to: 130}) ] valueCoveringAll:
			{98 to: 98}) ] valueCoveringAll:
		{62 to: 65}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (37 to: 51)
		declaredAt: (15 to: 29)) affectReportWithTransferDeposit:
		(self coverAll:
			{86 to: 89}) ] valueCoveringAll:
		{53 to: 84}.! !
!Behavior method!
affectReportWithTransferDeposit: aTransferDeposit
	[
	(report
		cover: (53 to: 58)
		declaredAt: (53 to: 58)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{66 to: 96}) ,
			([
			([
			(aTransferDeposit
				cover: (98 to: 113)
				declaredAt: (34 to: 49)) value ] valueCoveringAll:
				{115 to: 119}) asString ] valueCoveringAll:
				{121 to: 128}) ] valueCoveringAll:
			{97 to: 97}) ] valueCoveringAll:
		{60 to: 63}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(accounts
		cover: (35 to: 42)
		declaredAt: (35 to: 42)) do: [ :account |
		[
		(account
			cover: (61 to: 67)
			declaredAt: (51 to: 57)) affectReport:
			(anAccountReport
				cover: (83 to: 97)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{69 to: 81} ]] valueCoveringAll:
		{44 to: 46}.! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{32 to: 35}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (58 to: 66)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 56}.
	[
	cascadeReceiver add:
		(anotherAccount
			cover: (76 to: 89)
			declaredAt: (23 to: 36)) ] valueCoveringAll:
		{71 to: 74}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 19:27:46'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
executeReport
	(report _ 0 coverAll:
		{28 to: 28})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (32 to: 38)
		declaredAt: (32 to: 38)) affectReport:
		(self coverAll:
			{54 to: 57}) ] valueCoveringAll:
		{40 to: 52}.
	^ report
		cover: (64 to: 69)
		declaredAt: (18 to: 23).! !

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
affectReportWithTransferWithdraw: aTransferWithdraw
	^ (report _ [
	(report
		cover: (57 to: 62)
		declaredAt: (57 to: 62)) -
		([
		(aTransferWithdraw
			cover: (76 to: 92)
			declaredAt: (35 to: 51)) value ] valueCoveringAll:
			{94 to: 98}) ] valueCoveringAll:
		{74 to: 74})
		cover: (67 to: 72)
		declaredAt: (57 to: 62).! !
!Behavior method!
affectReportWithTransferDeposit: aTransferDeposit
	^ (report _ [
	(report
		cover: (55 to: 60)
		declaredAt: (55 to: 60)) +
		([
		(aTransferDeposit
			cover: (74 to: 89)
			declaredAt: (34 to: 49)) value ] valueCoveringAll:
			{91 to: 95}) ] valueCoveringAll:
		{72 to: 72})
		cover: (65 to: 70)
		declaredAt: (55 to: 60).! !

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
affectReportWithDeposit: aDeposit
	^ self.! !
!Behavior method!
affectReportWithWithdraw: aWithdraw
	^ self.! !

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
sentTransaction
	^ sentTransaction
		cover: (20 to: 34)
		declaredAt: (20 to: 34).! !
!Behavior method!
receivedTransaction
	^ receivedTransaction
		cover: (24 to: 42)
		declaredAt: (24 to: 42).! !

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
cantHaveSameAccountAtBothEnds
	^ 'No se puede poner una misma cuenta como emisora y receptora de la misma transferencia.' coverAll:
		{35 to: 122}.! !

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!
!Behavior method!
amountMustBePositive
	^ 'El monto de la transferencia debe ser mayor a cero' coverAll:
		{26 to: 77}.! !

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 19:27:47'!
PASSED!

!methodRemoval: AccountTransaction #description stamp: 'AEC 5/29/2022 19:28:12'!
description

	self subclassResponsibility !
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (52 to: 58)
		declaredAt: (52 to: 58)) affectReport:
		(self coverAll:
			{74 to: 77}) ] valueCoveringAll:
		{60 to: 72}.
	[
	(self coverAll:
		{81 to: 84}) addAccountBalanceLine ] valueCoveringAll:
		{86 to: 106}.
	^ report
		cover: (113 to: 118)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReport: anAccountReport
	[
	(transactions
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) do: [ :transaction |
		[
		(transaction
			cover: (67 to: 77)
			declaredAt: (53 to: 63)) affectReport:
			(anAccountReport
				cover: (93 to: 107)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{79 to: 91} ]] valueCoveringAll:
		{47 to: 49}.! !
!Behavior method!
addAccountBalanceLine
	^ [
	(report
		cover: (27 to: 32)
		declaredAt: (27 to: 32)) add:
		([
		('Balance = ' coverAll:
			{40 to: 51}) ,
			([
			([
			(account
				cover: (53 to: 59)
				declaredAt: (53 to: 59)) balance ] valueCoveringAll:
				{61 to: 67}) asString ] valueCoveringAll:
				{69 to: 76}) ] valueCoveringAll:
			{52 to: 52}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:29:21'!
PASSED!
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithDeposit:
		(self coverAll:
			{77 to: 80}) ] valueCoveringAll:
		{52 to: 75}.! !
!Behavior method!
affectReportWithDeposit: aDeposit
	[
	(report
		cover: (37 to: 42)
		declaredAt: (37 to: 42)) add:
		([
		('Deposito por ' coverAll:
			{50 to: 64}) ,
			([
			([
			(aDeposit
				cover: (66 to: 73)
				declaredAt: (26 to: 33)) value ] valueCoveringAll:
				{75 to: 79}) asString ] valueCoveringAll:
				{81 to: 88}) ] valueCoveringAll:
			{65 to: 65}) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 19:29:21'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithWithdraw:
		(self coverAll:
			{78 to: 81}) ] valueCoveringAll:
		{52 to: 76}.! !
!Behavior method!
affectReportWithWithdraw: aWithdraw
	[
	(report
		cover: (39 to: 44)
		declaredAt: (39 to: 44)) add:
		([
		('Extraccion por ' coverAll:
			{52 to: 68}) ,
			([
			([
			(aWithdraw
				cover: (70 to: 78)
				declaredAt: (27 to: 35)) value ] valueCoveringAll:
				{80 to: 84}) asString ] valueCoveringAll:
				{86 to: 93}) ] valueCoveringAll:
			{69 to: 69}) ] valueCoveringAll:
		{46 to: 49}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 19:29:21'!
PASSED!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithTransferWithdraw:
		(self coverAll:
			{86 to: 89}) ] valueCoveringAll:
		{52 to: 84}.! !
!Behavior method!
affectReportWithTransferWithdraw: aTransferWithdraw
	[
	(report
		cover: (55 to: 60)
		declaredAt: (55 to: 60)) add:
		([
		('Salida por transferencia de ' coverAll:
			{68 to: 97}) ,
			([
			([
			(aTransferWithdraw
				cover: (99 to: 115)
				declaredAt: (35 to: 51)) value ] valueCoveringAll:
				{117 to: 121}) asString ] valueCoveringAll:
				{123 to: 130}) ] valueCoveringAll:
			{98 to: 98}) ] valueCoveringAll:
		{62 to: 65}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (37 to: 51)
		declaredAt: (15 to: 29)) affectReportWithTransferDeposit:
		(self coverAll:
			{86 to: 89}) ] valueCoveringAll:
		{53 to: 84}.! !
!Behavior method!
affectReportWithTransferDeposit: aTransferDeposit
	[
	(report
		cover: (53 to: 58)
		declaredAt: (53 to: 58)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{66 to: 96}) ,
			([
			([
			(aTransferDeposit
				cover: (98 to: 113)
				declaredAt: (34 to: 49)) value ] valueCoveringAll:
				{115 to: 119}) asString ] valueCoveringAll:
				{121 to: 128}) ] valueCoveringAll:
			{97 to: 97}) ] valueCoveringAll:
		{60 to: 63}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(accounts
		cover: (35 to: 42)
		declaredAt: (35 to: 42)) do: [ :account |
		[
		(account
			cover: (61 to: 67)
			declaredAt: (51 to: 57)) affectReport:
			(anAccountReport
				cover: (83 to: 97)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{69 to: 81} ]] valueCoveringAll:
		{44 to: 46}.! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{32 to: 35}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (58 to: 66)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 56}.
	[
	cascadeReceiver add:
		(anotherAccount
			cover: (76 to: 89)
			declaredAt: (23 to: 36)) ] valueCoveringAll:
		{71 to: 74}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
executeReport
	(report _ 0 coverAll:
		{28 to: 28})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (32 to: 38)
		declaredAt: (32 to: 38)) affectReport:
		(self coverAll:
			{54 to: 57}) ] valueCoveringAll:
		{40 to: 52}.
	^ report
		cover: (64 to: 69)
		declaredAt: (18 to: 23).! !

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
affectReportWithTransferWithdraw: aTransferWithdraw
	^ (report _ [
	(report
		cover: (57 to: 62)
		declaredAt: (57 to: 62)) -
		([
		(aTransferWithdraw
			cover: (76 to: 92)
			declaredAt: (35 to: 51)) value ] valueCoveringAll:
			{94 to: 98}) ] valueCoveringAll:
		{74 to: 74})
		cover: (67 to: 72)
		declaredAt: (57 to: 62).! !
!Behavior method!
affectReportWithTransferDeposit: aTransferDeposit
	^ (report _ [
	(report
		cover: (55 to: 60)
		declaredAt: (55 to: 60)) +
		([
		(aTransferDeposit
			cover: (74 to: 89)
			declaredAt: (34 to: 49)) value ] valueCoveringAll:
			{91 to: 95}) ] valueCoveringAll:
		{72 to: 72})
		cover: (65 to: 70)
		declaredAt: (55 to: 60).! !

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!
!Behavior method!
affectReportWithDeposit: aDeposit
	^ self.! !
!Behavior method!
affectReportWithWithdraw: aWithdraw
	^ self.! !

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 19:29:22'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 19:29:23'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 19:29:23'!
PASSED!
!Behavior method!
sentTransaction
	^ sentTransaction
		cover: (20 to: 34)
		declaredAt: (20 to: 34).! !
!Behavior method!
receivedTransaction
	^ receivedTransaction
		cover: (24 to: 42)
		declaredAt: (24 to: 42).! !

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 19:29:23'!
PASSED!
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 19:29:23'!
PASSED!
!Behavior method!
cantHaveSameAccountAtBothEnds
	^ 'No se puede poner una misma cuenta como emisora y receptora de la misma transferencia.' coverAll:
		{35 to: 122}.! !

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 19:29:23'!
PASSED!
!Behavior method!
amountMustBePositive
	^ 'El monto de la transferencia debe ser mayor a cero' coverAll:
		{26 to: 77}.! !

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 19:29:23'!
PASSED!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 19:30:47'!
Object subclass: #Transfer
	instanceVariableNames: 'amount receiver sentTransaction receivedTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 19:30:47'!
Object subclass: #Transfer
	instanceVariableNames: 'amount sentTransaction receivedTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AEC 5/29/2022 19:31:43' prior: 50475536 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 19:31:47'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(29 May 2022 19:34:13) CuisUniversity-5096.image priorSource: 5183919!

TestCase subclass: #PortfolioStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructureTest category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 19:40:41'!
TestCase subclass: #PortfolioStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioStructureTest methodsFor: 'no messages' stamp: 'AEC 5/29/2022 19:42:02'!
test01XXX! !
!AccountSummaryTest methodsFor: 'nil' stamp: 'AEC 5/29/2022 19:44:44'!
accountSummaryFor: account

	^ (AccountSummary for: account) executeReport! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 19:45:42' prior: 50488454!
test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine
	
	self assert: (self accountSummaryFor: ReceptiveAccount new) equals: (OrderedCollection with: 'Balance = 0')! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:45:43'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:45:43'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 19:45:43'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 19:45:43'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 19:45:43'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:45:43'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 19:45:43'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 19:45:43'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 19:47:46' prior: 50488557!
test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	
	self assert: (self accountSummaryFor: account) equals: (OrderedCollection with: 'Deposito por 100' with: 'Balance = 100')! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 19:47:58' prior: 50495498!
test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self assert: (self accountSummaryFor: account) equals: (OrderedCollection with: 'Deposito por 100' with: 'Balance = 100')! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 19:48:10' prior: 50488483!
test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: (self accountSummaryFor: account) equals: (OrderedCollection with: 'Deposito por 100' with: 'Extraccion por 50' with: 'Balance = 50')! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 19:48:25' prior: 50488512!
test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer

	| account otherAccount summaryForAccount summaryForOtherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account  to: otherAccount for: 25.
	summaryForAccount := AccountSummary for: account.
	summaryForOtherAccount := AccountSummary for: otherAccount.
	
	self assert: (self accountSummaryFor: account) equals: (OrderedCollection with: 'Salida por transferencia de 25' with: 'Balance = -25').
	self assert: (self accountSummaryFor: otherAccount) equals: (OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25')! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 19:48:32' prior: 50495536!
test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer

	| account otherAccount |
	
	account := ReceptiveAccount new.
	otherAccount := ReceptiveAccount new.
	Transfer from: account  to: otherAccount for: 25.
	
	self assert: (self accountSummaryFor: account) equals: (OrderedCollection with: 'Salida por transferencia de 25' with: 'Balance = -25').
	self assert: (self accountSummaryFor: otherAccount) equals: (OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25')! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 19:48:34'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:48:34'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 19:48:34'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 19:48:34'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 19:48:34'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:48:34'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 19:48:34'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 19:48:34'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 19:48:48' prior: 50488500!
test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine

	
	
	self assert: (self accountSummaryFor: Portfolio new) equals: (OrderedCollection with: 'Balance = 0')! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:48:50'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:48:50'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 19:48:50'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 19:48:50'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 19:48:50'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:48:50'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 19:48:50'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 19:48:50'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 19:48:54' prior: 50495615!
test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine

	self assert: (self accountSummaryFor: Portfolio new) equals: (OrderedCollection with: 'Balance = 0')! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 19:48:55' prior: 50495659!
test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine

	self assert: (self accountSummaryFor: Portfolio new) equals: (OrderedCollection with: 'Balance = 0')! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:48:56'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:48:56'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 19:48:56'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 19:48:56'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 19:48:56'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:48:56'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 19:48:56'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 19:48:56'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 19:49:12' prior: 50488466!
test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine

	| childPortfolio fatherPortfolio |
	
	fatherPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	fatherPortfolio add: childPortfolio.
	
	self assert: (self accountSummaryFor: fatherPortfolio) equals: (OrderedCollection with: 'Balance = 0')! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 19:49:13'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:49:13'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 19:49:13'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 19:49:13'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 19:49:13'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 19:49:13'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 19:49:14'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 19:49:14'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 19:49:41' prior: 50488536!
test07PortfolioSummaryIncludesTransactionsFromChildAccounts

	| childPortfolio account fatherPortfolio |
	
	fatherPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	childPortfolio add: account.
	fatherPortfolio add: childPortfolio.
	
	self assert: (self accountSummaryFor: fatherPortfolio) equals: (OrderedCollection with: 'Deposito por 100' with: 'Balance = 100')! !

!classDefinition: #PortfolioStructure category: '\' stamp: 'AEC 5/29/2022 19:52:09'!
Object subclass: #PortfolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '\'!
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 19:52:17' prior: 50495445!
test01XXX

	| portfolio portfolioStructure |
	portfolio := Portfolio new.
	
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with:[''])! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 19:52:22' prior: 50495786!
test01XXX

	| portfolio portfolioStructure |
	
	portfolio := Portfolio new.
	
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with:[''])! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 19:52:24' prior: 50495797!
test01XXX

	| portfolio portfolioStructure |
	
	portfolio := Portfolio new.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with:[''])! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 19:54:01' prior: 50495808!
test01XXX

	| portfolio portfolioStructure |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with:[''])! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:03:59'!
named: anAccountName
	
	self new initializeNamed: anAccountName! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:08:01' prior: 50495819!
test01XXX

	| portfolio portfolioStructure |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with:['Portfolio de Tito'])! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:08:14' prior: 50495836!
test01XXX

	| portfolio portfolioStructure |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito')! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:09:30'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 20:09:36'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'AEC 5/29/2022 20:09:36'!
initializeNamed: anAccountName 
	self shouldBeImplemented.
	accountName := anAccountName.! !
!Portfolio methodsFor: 'initialization' stamp: 'AEC 5/29/2022 20:09:55' prior: 50495870!
initializeNamed: anAccountName 
	
	accountName := anAccountName.! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 20:09:58'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:09:58' prior: 50495876!
initializeNamed: anAccountName 
	
	name := anAccountName.! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:10:02'!
ERROR!
!PortfolioStructure class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 20:10:20'!
for: aClass 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aClass ! !
!PortfolioStructure class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 20:10:49' prior: 50495897!
for: aPortfolio
	
	^self new initializeFor: aPortfolio ! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:10:50'!
ERROR!

!classDefinition: #PortfolioStructure category: '\' stamp: 'AEC 5/29/2022 20:11:00'!
Object subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: '\'!
!PortfolioStructure methodsFor: 'initialization' stamp: 'AEC 5/29/2022 20:11:00'!
initializeFor: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !
!PortfolioStructure methodsFor: 'initialization' stamp: 'AEC 5/29/2022 20:11:06' prior: 50495919!
initializeFor: aPortfolio 
	
	portfolio := aPortfolio.! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:11:06'!
ERROR!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 20:11:17'!
executeReport
	self shouldBeImplemented.! !
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 20:11:56' prior: 50495932!
executeReport
	
	^OrderedCollection with: portfolio name.! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:11:57'!
FAILURE!

Object subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 20:12:44'!
Object subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 20:13:04' prior: 50495937!
executeReport
	
	^OrderedCollection with: portfolio accountName.! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:13:13'!
ERROR!

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:13:13'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:13:46' prior: 50495830!
named: anAccountName
	
	^self new initializeNamed: anAccountName! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:13:47' prior: 50495969!
named: anAccountName
	
	^ self new initializeNamed: anAccountName! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:13:57'!
ERROR!
!Portfolio methodsFor: 'accesing' stamp: 'AEC 5/29/2022 20:14:12'!
accountName
	self shouldBeImplemented.! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:14:45'!
ERROR!
!Portfolio methodsFor: 'accesing' stamp: 'AEC 5/29/2022 20:14:52' prior: 50495982!
accountName
	
	^name! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:14:53'!
PASSED!

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:14:53'!
PASSED!
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:20:01'!
test02XXX

	| portfolio portfolioStructure account |
	
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito')! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:20:10'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 20:20:18'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 20:20:53' prior: 50496016!
named: anAccountName 

	^ self new initializeNamed: anAccountName! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:20:55'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 20:21:01'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AEC 5/29/2022 20:21:01'!
initializeNamed: anAccountName 
	self shouldBeImplemented.
	accountName := anAccountName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AEC 5/29/2022 20:21:11' prior: 50496041!
initializeNamed: anAccountName 

	accountName := anAccountName.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 20:21:13'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:21:13' prior: 50496047!
initializeNamed: anAccountName 

	name := anAccountName.! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:21:16'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 20:21:24'!
named: aString with: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: aReceptiveAccount ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 20:23:09' prior: 50496069!
named: anAccountName with: aReceptiveAccount 
	
	^self new 
		initializeNamed: anAccountName; 
		add: aReceptiveAccount; 
		yourself! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:23:20'!
FAILURE!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 20:25:41' prior: 50495958!
executeReport
	
	| report |
	report := OrderedCollection with: portfolio accountName.
	
	portfolio addToStructure: self.! !

!classDefinition: #PortfolioStructure category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 20:26:23'!
Object subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio cuis'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 20:26:21' prior: 50496089!
executeReport
	
	cuis := OrderedCollection with: portfolio accountName.
	
	portfolio addToStructure: self.! !

!classDefinition: #PortfolioStructure category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 20:26:26'!
Object subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:26:26' prior: 50496104!
executeReport
	
	report := OrderedCollection with: portfolio accountName.
	
	portfolio addToStructure: self.! !
!Portfolio methodsFor: 'nil' stamp: 'AEC 5/29/2022 20:28:25'!
addToStructure: aPortfolioStructure

	aPortfolioStructure addPortfolio: self.
	
	accounts do:[:account | account addToStructure: aPortfolioStructure ]! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'AEC 5/29/2022 20:28:55'!
addToStructure: aPortfolioStructure

	aPortfolioStructure addReceptiveAccount: self.! !
!PortfolioStructure methodsFor: 'nil' stamp: 'AEC 5/29/2022 20:29:24'!
addPortfolio: aPortfolio

	report add: aPortfolio accountName! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:29:45'!
addReceptiveAccount: aReceptiveAccount

	report add: aReceptiveAccount accountName! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:30:09'!
ERROR!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'AEC 5/29/2022 20:30:19'!
accountName
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'AEC 5/29/2022 20:30:26' prior: 50496150!
accountName
	
	^name! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:30:28'!
FAILURE!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 20:30:40' prior: 50496119!
executeReport
	
	report := OrderedCollection with: portfolio accountName.
	
	portfolio addToStructure: self.
	
	^report! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:30:45'!
FAILURE!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:30:45'!
FAILURE!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:31:28'!
FAILURE!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:31:28'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:32:09' prior: 50496125!
addToStructure: aPortfolioStructure
	
	accounts do:[:account | account addToStructure: aPortfolioStructure ]! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:32:21'!
FAILURE!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:32:21'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:34:58' prior: 50496180!
addToStructure: aPortfolioStructure
	
	accounts do:[:account | account addToStructure: aPortfolioStructure ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:38:52' prior: 50496192!
addToStructure: aPortfolioStructure
	
	aPortfolioStructure goDownALevel.
	accounts do:[:account | account addToStructure: aPortfolioStructure ].
	aPortfolioStructure goUpALevel.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:39:56' prior: 50496199!
addToStructure: aPortfolioStructure
	
	aPortfolioStructure goDownALevel.
	accounts do:[:account | account addToStructure: aPortfolioStructure ]! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:40:15'!
ERROR!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:40:15'!
ERROR!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 20:40:21'!
goDownALevel
	self shouldBeImplemented.! !

!classDefinition: #PortfolioStructure category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 20:40:51'!
Object subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio report level'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 20:40:50' prior: 50496221!
goDownALevel
	
	level := level + 1! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:41:07'!
ERROR!
!PortfolioStructure methodsFor: 'initialization' stamp: 'AEC 5/29/2022 20:41:26' prior: 50495925!
initializeFor: aPortfolio 
	
	portfolio := aPortfolio.
	level := 1! !
!PortfolioStructure methodsFor: 'initialization' stamp: 'AEC 5/29/2022 20:41:31' prior: 50496241!
initializeFor: aPortfolio 
	
	portfolio := aPortfolio.
	level := 0! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:41:42'!
FAILURE!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:41:42'!
FAILURE!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:43:23' prior: 50496137!
addPortfolio: aPortfolio

	report add: (self addLevelSpaces,aPortfolio accountName)! !

estring := 'Soy un estring'.!

estring padded:#right to:4 with:$ .!

estring padded:#right to:4 with:$a.!

estring padded:#right to:(estring size + 1) with:$a.!

estring padded:#left to:(estring size + 1) with:$ .!

estring padded:#left to:(estring size + 2) with:$ .!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:51:04' prior: 50496258!
addPortfolio: aPortfolio

	report add: (self addLevelSpacesTo: aPortfolio accountName)! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:51:49'!
addLevelSpacesTo: aPortfolioName

	^aPortfolioName padded:#left to:(aPortfolioName size + (2*level)) with:$ .! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:51:58'!
FAILURE!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:51:58'!
FAILURE!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:53:31' prior: 50496142!
addReceptiveAccount: aReceptiveAccount

	report add: (self addLevelSpacesTo: aReceptiveAccount accountName)! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:53:42'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:53:42'!
PASSED!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:54:06' prior: 50496292!
addReceptiveAccount: aReceptiveAccount

	self addToReport: aReceptiveAccount! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:54:38'!
addToReport: anAccountName

	report add: (self addLevelSpacesTo: anAccountName)! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:55:00' prior: 50496305!
addReceptiveAccount: aReceptiveAccount

	self addToReport: aReceptiveAccount accountName ! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:55:22' prior: 50496273!
addPortfolio: aPortfolio

	self addToReport: aPortfolio accountName ! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:56:02' prior: 50496324!
addPortfolio: aPortfolio

	self addToReport: aPortfolio! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:56:16' prior: 50496279!
addLevelSpacesTo: aPortfolio

	^aPortfolio padded:#left to:(aPortfolio size + (2*level)) with:$ .! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:56:23' prior: 50496336!
addLevelSpacesTo: aPortfolio

	^aPortfolio accountName padded:#left to:(aPortfolio size + (2*level)) with:$ .! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:56:28' prior: 50496343!
addLevelSpacesTo: anAccount

	^anAccount accountName padded:#left to:(anAccount size + (2*level)) with:$ .! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:56:37' prior: 50496311!
addToReport: anAccount

	report add: (self addLevelSpacesTo: anAccount)! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:56:41'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:56:41'!
ERROR!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:56:41'!
ERROR!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:56:56' prior: 50496317!
addReceptiveAccount: aReceptiveAccount

	self addToReport: aReceptiveAccount! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:57:01'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:57:01'!
ERROR!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:57:01'!
ERROR!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:57:48' prior: 50496350!
addLevelSpacesTo: anAccount

	| accountName |
	accountName := anAccount accountName.
	^accountName padded:#left to:(accountName size + (2*level)) with:$ .! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:57:51' prior: 50496385!
addLevelSpacesTo: anAccount

	| accountName |
	
	accountName := anAccount accountName.
	^accountName padded:#left to:(accountName size + (2*level)) with:$ .! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 20:57:58'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 20:57:58'!
PASSED!
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:00:36' prior: 50495999!
test02XXX

	| portfolio portfolioStructure |
	
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: (Portfolio named: 'Portfolio de Pepe').
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito')! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:00:49' prior: 50496408!
test02XXX

	| portfolio portfolioStructure |
	
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: (Portfolio named: 'Portfolio de Pepe').
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Portfolio de Pepe')! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 20:20:01' prior: 50496422!
test02XXX

	| portfolio portfolioStructure account |
	
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito')! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:01:21'!
test03XXX

	| portfolio portfolioStructure |	
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: (Portfolio named: 'Portfolio de Pepe').
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Portfolio de Pepe')! !

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 21:01:22'!
FAILURE!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 21:01:50' prior: 50496162!
executeReport
	
	report := OrderedCollection new.
	
	portfolio addToStructure: self.
	
	^report! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:02:21' prior: 50496208!
addToStructure: aPortfolioStructure
	
	aPortfolioStructure addPortfolio: self.
	aPortfolioStructure goDownALevel.
	accounts do:[:account | account addToStructure: aPortfolioStructure ]! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 21:02:27'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 21:02:27'!
PASSED!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 21:02:27'!
PASSED!
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:04:15' prior: 50496451!
test03XXX

	| portfolio portfolioStructure childPortfolio |	
	
	childPortfolio := Portfolio named: 'Portfolio de Pepe' with: (ReceptiveAccount named: 'Cuenta de Pepe').
	portfolio := Portfolio named: 'Portfolio de Tito' with: childPortfolio with: (ReceptiveAccount named: 'Cuenta de Tito').
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Portfolio de Pepe')! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:04:57' prior: 50496493!
test03XXX

	| portfolio portfolioStructure childPortfolio |	
	
	childPortfolio := Portfolio named: 'Portfolio de Pepe' with: (ReceptiveAccount named: 'Cuenta de Pepe').
	portfolio := Portfolio named: 'Portfolio de Tito' with: childPortfolio with: (ReceptiveAccount named: 'Cuenta de Tito').
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Portfolio de Pepe' with: '    Cuenta de Pepe' with: '  Cuenta de Tito')! !

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 21:05:00'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 21:05:05'!
named: aString with: aPortfolio with: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: aPortfolio with: aReceptiveAccount ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 21:05:41' prior: 50496534!
named: anAccountName with: aReceptiveAccount with: anotherReceptiveAccount 
 	
	^self new 
		initializeNamed: anAccountName; 
		add: aReceptiveAccount; 
		add: anotherReceptiveAccount; 
		yourself! !

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 21:05:43'!
FAILURE!

portfolioStructure executeReport!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:07:25' prior: 50496475!
addToStructure: aPortfolioStructure
	
	aPortfolioStructure addPortfolio: self.
	aPortfolioStructure goDownALevel.
	accounts do:[:account | account addToStructure: aPortfolioStructure ].
	aPortfolioStructure goUpALevel.
	! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 21:07:40'!
ERROR!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 21:07:40'!
ERROR!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 21:07:41'!
ERROR!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 21:07:46'!
ERROR!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 21:07:46'!
ERROR!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 21:07:51'!
goUpALevel
	self shouldBeImplemented.! !
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 21:08:01' prior: 50496582!
goUpALevel
	
	level := level - 1! !

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 21:08:03'!
PASSED!

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 21:08:07'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 21:08:07'!
PASSED!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 21:08:07'!
PASSED!

grandchildPortfolio := Portfolio named: 'Portfolio de Carmen' with: (ReceptiveAccount named: 'Cuenta de Carmen').!

childPortfolio := Portfolio named: 'Portfolio de Pepe' with: (ReceptiveAccount named: 'Cuenta de Pepe') with: (ReceptiveAccount named: 'Cuenta de Carola').!

portfolio := Portfolio named: 'Portfolio de Tito' with: childPortfolio with: (ReceptiveAccount named: 'Cuenta de Tito').!

PortfolioStructure for: portfolio!

PortfolioStructure for: portfolio executeReport!

PortfolioStructure for: portfolio executeReport!

(PortfolioStructure for: portfolio) executeReport!

(PortfolioStructure for: portfolio) executeReport!

grandchildPortfolio := Portfolio named: 'Portfolio de Carmen' 
				with: (ReceptiveAccount named: 'Cuenta de Carmen')
				with: (ReceptiveAccount named: 'Cuenta de Carola').!

childPortfolio := Portfolio named: 'Portfolio de Pepe' 
				with: (ReceptiveAccount named: 'Cuenta de Pepe') 
				with: grandchildPortfolio.
!

portfolio := Portfolio named: 'Portfolio de Tito' 
	with: childPortfolio 
	with: (ReceptiveAccount named: 'Cuenta de Tito').
!

(PortfolioStructure for: portfolio) executeReport!

TestCase subclass: #SpecialAccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SpecialAccountSummaryTest category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 21:22:53'!
TestCase subclass: #SpecialAccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SpecialAccountSummaryTest methodsFor: 'no messages' stamp: 'AEC 5/29/2022 21:23:43'!
test01XXX

	| portfolio portfolioStructure |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Balance = 0')! !

!classDefinition: #SpecialAccountSummary category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 21:24:18'!
Object subclass: #SpecialAccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SpecialAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:24:12' prior: 50496651!
test01XXX

	| portfolio portfolioSpecialAccountSummary |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	self assert: portfolioSpecialAccountSummary executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Balance = 0')! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:24:25'!
ERROR!
!SpecialAccountSummary class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 21:24:31'!
for: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aPortfolio ! !
!SpecialAccountSummary class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 21:24:46' prior: 50496688!
for: aPortfolio 

	self new initializeWith: aPortfolio! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:24:48'!
ERROR!

!classDefinition: #SpecialAccountSummary category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 21:24:54'!
Object subclass: #SpecialAccountSummary
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SpecialAccountSummary methodsFor: 'initialization' stamp: 'AEC 5/29/2022 21:24:54'!
initializeWith: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !

!classDefinition: #SpecialAccountSummary category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 21:25:31'!
Object subclass: #SpecialAccountSummary
	instanceVariableNames: 'portfolio level'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SpecialAccountSummary methodsFor: 'initialization' stamp: 'AEC 5/29/2022 21:25:30' prior: 50496713!
initializeWith: aPortfolio 

	portfolio := aPortfolio.
	level := 0! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:25:33'!
ERROR!
!SpecialAccountSummary class methodsFor: 'executing' stamp: 'AEC 5/29/2022 21:25:40'!
executeReport
	self shouldBeImplemented.! !
!SpecialAccountSummary class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 21:26:42' prior: 50496697!
for: aPortfolio 

	^ self new initializeWith: aPortfolio! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:26:50'!
ERROR!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 21:27:08'!
executeReport
	self shouldBeImplemented.! !

!methodRemoval: SpecialAccountSummary class #executeReport stamp: 'AEC 5/29/2022 21:27:08'!
executeReport
	self shouldBeImplemented.!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 21:28:32' prior: 50496749!
executeReport
	
	^OrderedCollection with: portfolio accountName with: ('Balance = ',portfolio balance)! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:28:34'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:28:34'!
ERROR!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 21:28:55' prior: 50496758!
executeReport
	
	^OrderedCollection with: portfolio accountName with: ('Balance = ',portfolio balance asString)! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:28:58'!
FAILURE!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:28:58'!
FAILURE!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 21:29:15' prior: 50496770!
executeReport
	
	^OrderedCollection with: portfolio accountName with: ('  Balance = ',portfolio balance asString)! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:29:19'!
PASSED!
!SpecialAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:31:18'!
test02XXX

	| portfolio portfolioSpecialAccountSummary |
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: (ReceptiveAccount named: 'Cuenta de Tito').
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	self assert: portfolioSpecialAccountSummary executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito' with: '    Balance = 0' with: '  Balance = 0')! !

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 21:31:20'!
FAILURE!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 21:32:44' prior: 50496783!
executeReport
	
"	^OrderedCollection with: portfolio accountName with: ('  Balance = ',portfolio balance asString)"
	| report |
	report := OrderedCollection new.
	portfolio addToSpecialAccountSummary: self.
	
	^report! !
!Portfolio methodsFor: 'nil' stamp: 'AEC 5/29/2022 21:34:19'!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary addPortfolio: self.
	aSpecialAccountSummary goDownALevel.
	accounts do:[:account | account addToStructure: aSpecialAccountSummary ].
	aSpecialAccountSummary goUpALevel.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:34:31' prior: 50496822!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary addPortfolio: self.
	aSpecialAccountSummary goDownALevel.
	accounts do:[:account | account addToSpecialAccountSummary: aSpecialAccountSummary ].
	aSpecialAccountSummary goUpALevel.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:35:29'!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary addReceptiveAccount: self.! !
!SpecialAccountSummary methodsFor: 'nil' stamp: 'AEC 5/29/2022 21:36:17'!
addPortfolio: aPortfolio

	self addToReport: aPortfolio! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:36:40'!
addReceptiveAccount: aReceptiveAccount

	self addToReport: aReceptiveAccount! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:37:10'!
addToReport: anAccount

	| caca |
	caca add: (self addLevelSpacesTo: anAccount)! !

!classDefinition: #SpecialAccountSummary category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 21:37:54'!
Object subclass: #SpecialAccountSummary
	instanceVariableNames: 'portfolio level reporte'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 21:37:53' prior: 50496813!
executeReport
	
"	^OrderedCollection with: portfolio accountName with: ('  Balance = ',portfolio balance asString)"
	reporte := OrderedCollection new.
	portfolio addToSpecialAccountSummary: self.
	
	^reporte! !

!classDefinition: #SpecialAccountSummary category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 21:37:57'!
Object subclass: #SpecialAccountSummary
	instanceVariableNames: 'portfolio level report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:37:57' prior: 50496876!
executeReport
	
"	^OrderedCollection with: portfolio accountName with: ('  Balance = ',portfolio balance asString)"
	report := OrderedCollection new.
	portfolio addToSpecialAccountSummary: self.
	
	^report! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:38:28' prior: 50496861!
addToReport: anAccount

	report add: (self addLevelSpacesTo: anAccount)! !
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 21:38:52' prior: 50496895!
executeReport
	
	report := OrderedCollection new.
	portfolio addToSpecialAccountSummary: self.
	
	^report! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:43:37' prior: 50496833!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary addPortfolio: self.
	aSpecialAccountSummary goDownALevel.
	accounts do:[:account | account addToSpecialAccountSummary: aSpecialAccountSummary ].
	aSpecialAccountSummary addBalance: self balance.
	aSpecialAccountSummary goUpALevel.
	! !
!SpecialAccountSummary methodsFor: 'nil' stamp: 'AEC 5/29/2022 21:45:47'!
addBalance: aBalance

	| balance |
	balance := 'Balance = ',aBalance asString.
	balance := balance padded:#left to:(balance size + (2*level)) with:$ .
	
	report add: balance
	! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:45:50' prior: 50496931!
addBalance: aBalance

	| balance |
	
	balance := 'Balance = ',aBalance asString.
	balance := balance padded:#left to:(balance size + (2*level)) with:$ .
	
	report add: balance
	! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:45:55'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 21:45:55'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:46:01'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:46:01'!
ERROR!
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:47:01'!
addLevelSpacesTo: aReportLine

	^aReportLine padded:#left to:(aReportLine size + (2*level)) with:$ .! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:47:26' prior: 50496940!
addBalance: aBalance

	| balance |
	
	balance := self addLevelSpacesTo: ('Balance = ',aBalance asString).
	
	report add: balance
	! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:47:28'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 21:47:28'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:47:33'!
ERROR!
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:47:47' prior: 50496905!
addToReport: anAccount

	report add: (self addLevelSpacesTo: anAccount accountName)! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:47:49'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 21:47:49'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:47:55'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:47:55'!
ERROR!
!SpecialAccountSummary methodsFor: 'nil' stamp: 'AEC 5/29/2022 21:48:07'!
goDownALevel
	
	level := level + 1! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:48:14'!
goUpALevel
	
	level := level - 1! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:48:35'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 21:48:35'!
FAILURE!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 21:48:35'!
FAILURE!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:48:42'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 21:48:45'!
FAILURE!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 21:48:45'!
FAILURE!

portfolioSpecialAccountSummary executeReport!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:49:36' prior: 50496844!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary addReceptiveAccount: self.
	aSpecialAccountSummary addBalance: self balance.! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:49:46'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 21:49:46'!
FAILURE!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 21:49:46'!
FAILURE!

portfolioSpecialAccountSummary executeReport!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:50:29' prior: 50497027!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary addReceptiveAccount: self.
	aSpecialAccountSummary goDownALevel.
	aSpecialAccountSummary addBalance: self balance.
	aSpecialAccountSummary goUpALevel.! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 21:50:33'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 21:50:33'!
PASSED!
!SpecialAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:51:32' prior: 50496793!
test02XXX

	| portfolio portfolioSpecialAccountSummary account |
	
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	Deposit register: 100 on: account.
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	self assert: portfolioSpecialAccountSummary executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito' with: '    Balance = 0' with: '  Balance = 0')! !
!SpecialAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:31:18' prior: 50497062!
test02XXX

	| portfolio portfolioSpecialAccountSummary |
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: (ReceptiveAccount named: 'Cuenta de Tito').
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	self assert: portfolioSpecialAccountSummary executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito' with: '    Balance = 0' with: '  Balance = 0')! !
!SpecialAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:53:24'!
test03XXX

	| portfolio portfolioSpecialAccountSummary account |
	
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	Deposit register: 100 on: account.
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	self assert: portfolioSpecialAccountSummary executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito' with: '    Balance = 0' with: '  Balance = 0')! !

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 21:53:59'!
FAILURE!
!SpecialAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:55:59' prior: 50497098!
test03XXX

	| portfolio portfolioSpecialAccountSummary account expectedResult |
	
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	Deposit register: 100 on: account.
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	expectedResult := OrderedCollection new; 
						add: 'Portfolio de Tito'; 
						add: '  Cuenta de Tito'; 
						add: '    Deposito por 100';
						add: '    Balance = 100'; 
						add: '  Balance = 100'; yourself.
						
	self assert: portfolioSpecialAccountSummary executeReport equals: expectedResult! !

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 21:56:01'!
ERROR!
!SpecialAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:56:55' prior: 50497120!
test03XXX

	| portfolio portfolioSpecialAccountSummary account expectedResult |
	
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	Deposit register: 100 on: account.
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	expectedResult := OrderedCollection new
						add: 'Portfolio de Tito'; 
						add: '  Cuenta de Tito'; 
						add: '    Deposito por 100';
						add: '    Balance = 100'; 
						add: '  Balance = 100'; yourself.
						
	self assert: portfolioSpecialAccountSummary executeReport equals: expectedResult! !

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 21:56:57'!
FAILURE!

portfolioSpecialAccountSummary executeReport!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 21:58:30' prior: 50497045!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary addReceptiveAccount: self.
	aSpecialAccountSummary goDownALevel.
	transactions do:[:transaction | transaction addToSpecialAccountSummary: aSpecialAccountSummary].
	aSpecialAccountSummary addBalance: self balance.
	aSpecialAccountSummary goUpALevel.! !
!AccountTransaction methodsFor: 'nil' stamp: 'AEC 5/29/2022 21:59:38'!
addToSpecialAccountSummary: aSpecialAccountSummary

	self subclassResponsibility ! !
!Deposit methodsFor: 'nil' stamp: 'AEC 5/29/2022 21:59:57' overrides: 50497186!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary addDeposit: self! !
!TransferDeposit methodsFor: 'nil' stamp: 'AEC 5/29/2022 22:00:06' overrides: 50497186!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary addTransferDeposit: self! !
!TransferWithdraw methodsFor: 'nil' stamp: 'AEC 5/29/2022 22:00:18' overrides: 50497186!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary addTransferWithdraw: self! !
!Withdraw methodsFor: 'nil' stamp: 'AEC 5/29/2022 22:00:27' overrides: 50497186!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary addWithdraw: self! !
!SpecialAccountSummary methodsFor: 'nil' stamp: 'AEC 5/29/2022 22:01:33'!
addDeposit: aDeposit

	| line |
	line := self addLevelSpacesTo: ('Deposito por ',aDeposit value).
	report add: line! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:02:05'!
addWithdraw: aWithdraw

	| line |
	line := self addLevelSpacesTo: ('Extraccion por ',aWithdraw value).
	report add: line! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:02:40'!
addTransferWithdraw: aTransferWithdraw

	| line |
	line := self addLevelSpacesTo: ('Salida por transferencia de ',aTransferWithdraw value).
	report add: line! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:03:01'!
addTransferDeposit: aTransferDeposit

	| line |
	line := self addLevelSpacesTo: ('Entrada por transferencia de ',aTransferDeposit value).
	report add: line! !
!SpecialAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:04:40' prior: 50497146!
test03XXX

	| portfolio portfolioSpecialAccountSummary account expectedResult otherAccount |
	
	otherAccount := ReceptiveAccount named: 'Cuenta de Juana'.
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	Deposit register: 100 on: account.
	Withdraw register: 10 on: account.
	Transfer from: account to: otherAccount for: 50.
	Transfer from: otherAccount to: account for: 25.
	
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	expectedResult := OrderedCollection new
						add: 'Portfolio de Tito'; 
						add: '  Cuenta de Tito'; 
						add: '    Deposito por 100';
						add: '    Balance = 100'; 
						add: '  Balance = 100'; yourself.
						
	self assert: portfolioSpecialAccountSummary executeReport equals: expectedResult! !
!SpecialAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:05:32' prior: 50497248!
test03XXX

	| portfolio portfolioSpecialAccountSummary account expectedResult otherAccount |
	
	otherAccount := ReceptiveAccount named: 'Cuenta de Juana'.
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	Deposit register: 100 on: account.
	Withdraw register: 10 on: account.
	Transfer from: account to: otherAccount for: 50.
	Transfer from: otherAccount to: account for: 25.
	
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	expectedResult := OrderedCollection new
						add: 'Portfolio de Tito'; 
						add: '  Cuenta de Tito'; 
						add: '    Deposito por 100';
						add: '    Extraccion por 10';
						add: '    Salida por transferencia de 50';
						add: '    Entrada por transferencia de 25';
						add: '    Balance = 65'; 
						add: '  Balance = 65'; yourself.
						
	self assert: portfolioSpecialAccountSummary executeReport equals: expectedResult! !

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 22:05:46'!
ERROR!
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:06:04' prior: 50497217!
addDeposit: aDeposit

	| line |
	line := self addLevelSpacesTo: ('Deposito por ',aDeposit value asString).
	report add: line! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:06:20' prior: 50497224!
addWithdraw: aWithdraw

	| line |
	line := self addLevelSpacesTo: ('Extraccion por ',aWithdraw value asString).
	report add: line! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:06:26' prior: 50497231!
addTransferWithdraw: aTransferWithdraw

	| line |
	line := self addLevelSpacesTo: ('Salida por transferencia de ',aTransferWithdraw value asString).
	report add: line! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:06:31' prior: 50497239!
addTransferDeposit: aTransferDeposit

	| line |
	line := self addLevelSpacesTo: ('Entrada por transferencia de ',aTransferDeposit value asString).
	report add: line! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 22:06:33'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 22:06:33'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 22:06:33'!
PASSED!
!SpecialAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:08:36' prior: 50497278!
test03XXX

	| portfolio portfolioSpecialAccountSummary account expectedResult otherAccount |
	
	otherAccount := ReceptiveAccount named: 'Cuenta de Juana'.
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	Deposit register: 100 on: account.
	Withdraw register: 10 on: account.
	Transfer from: account to: otherAccount for: 50.
	Transfer from: otherAccount to: account for: 25.
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	expectedResult := OrderedCollection new
						add: 'Portfolio de Tito'; 
						add: '  Cuenta de Tito'; 
						add: '    Deposito por 100';
						add: '    Extraccion por 10';
						add: '    Salida por transferencia de 50';
						add: '    Entrada por transferencia de 25';
						add: '    Balance = 65'; 
						add: '  Balance = 65'; yourself.
						
	self assert: portfolioSpecialAccountSummary executeReport equals: expectedResult! !

otherAccount := ReceptiveAccount named: 'Cuenta de Juana'.!

account := ReceptiveAccount named: 'Cuenta de Tito'.!

Deposit register: 100 on: account.!

Withdraw register: 10 on: account.!

Transfer from: account to: otherAccount for: 50.!

Transfer from: otherAccount to: account for: 25.!

portfolio := Portfolio named: 'Portfolio de Tito' with: account.!

portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.!

expectedResult := OrderedCollection new!

fatherPortfolio := Portfolio named: 'Portfolio de Darth Vader' with: portfolio.!

otherAccount := ReceptiveAccount named: 'Cuenta de Juana'.!

account := ReceptiveAccount named: 'Cuenta de Tito'.!

Deposit register: 100 on: account.!

Withdraw register: 10 on: account.!

Transfer from: account to: otherAccount for: 50.!

Transfer from: otherAccount to: account for: 25.!

portfolio := Portfolio named: 'Portfolio de Tito' with: account.!

fatherPortfolio := Portfolio named: 'Portfolio de Darth Vader' with: portfolio.!

portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.!

expectedResult := OrderedCollection new
					add: 'Portfolio de DarthVader'; 
					add: '  Portfolio de Tito'; 
					add: '    Cuenta de Tito'; 
					add: '      Deposito por 100';
					add: '      Extraccion por 10';
					add: '      Salida por transferencia de 50';
					add: '      Entrada por transferencia de 25';
					add: '      Balance = 65'; 
					add: '    Balance = 65';
					add: '  Balance = 65'; yourself.!

portfolioSpecialAccountSummary executeReport = expectedResult!

expectedResult!

portfolioSpecialAccountSummary executeReport!

portfolioSpecialAccountSummary := SpecialAccountSummary for: fatherPortfolio.!

portfolioSpecialAccountSummary executeReport = expectedResult!

portfolioSpecialAccountSummary executeReport!

expectedResult := OrderedCollection new
					add: 'Portfolio de DarthVader'; 
					add: '  Portfolio de Tito'; 
					add: '    Cuenta de Tito'; 
					add: '      Deposito por 100';
					add: '      Extraccion por 10';
					add: '      Salida por transferencia de 50';
					add: '      Entrada por transferencia de 25';
					add: '      Balance = 65'; 
					add: '    Balance = 65';
					add: '  Balance = 65'; yourself.!

portfolioSpecialAccountSummary executeReport = expectedResult!

expectedResult!

portfolioSpecialAccountSummary executeReport!

portfolioSpecialAccountSummary executeReport!

expectedResult!

portfolioSpecialAccountSummary executeReport == expectedResult!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 22:23:13'!
PASSED!
!Portfolio methodsFor: 'report' stamp: 'AEC 5/29/2022 22:31:13' prior: 50488868 overrides: 50488811!
affectReport: anAccountReport
	
	anAccountReport affectReportWithPortfolio: self.
	anAccountReport goDownALevel.
	accounts do: [ :account | account affectReport: anAccountReport ].
	anAccountReport goUpALevelFrom: self.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'AEC 5/29/2022 22:31:47' prior: 50488849 overrides: 50488811!
affectReport: anAccountReport
	
	anAccountReport affectReportWithReceptiveAccount: self.
	anAccountReport goDownALevel.
	transactions do: [:transaction | transaction affectReport: anAccountReport ].
	anAccountReport goUpALevelFrom: self! !
!AccountReport methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:32:53'!
affectReportWithReceptiveAccount: aReceptiveAccount

	^ self subclassResponsibility! !
!AccountReport methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:33:04'!
affectReportWithPortfolio: aPortfolio

	^ self subclassResponsibility! !

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 22:33:30'!
Object subclass: #AccountReport
	instanceVariableNames: 'account level'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReport methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:33:28'!
goDownALevel

	level := level + 1! !
!AccountReport methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:34:13'!
goUpALevelFrom: anAccount

	level := level - 1! !

AccountReport subclass: #SpecialAccountSummary
	instanceVariableNames: 'portfolio level report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReport subclass: #SpecialAccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SpecialAccountSummary category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 22:35:18'!
AccountReport subclass: #SpecialAccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReport subclass: #SpecialAccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SpecialAccountSummary category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 22:35:35'!
AccountReport subclass: #SpecialAccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReport subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio report level'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReport subclass: #PortfolioStructure
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Solucion' stamp: 'AEC 5/29/2022 22:35:55'!
AccountReport subclass: #PortfolioStructure
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:39:23' overrides: 50497672!
affectReportWithPortfolio: aPortfolio

	self addToReport: aPortfolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:39:23' prior: 50496559!
addToStructure: aPortfolioStructure
	
	aPortfolioStructure affectReportWithPortfolio: self.
	aPortfolioStructure goDownALevel.
	accounts do:[:account | account addToStructure: aPortfolioStructure ].
	aPortfolioStructure goUpALevel.
	! !

!methodRemoval: PortfolioStructure #addPortfolio: stamp: 'AEC 5/29/2022 22:39:23'!
addPortfolio: aPortfolio

	self addToReport: aPortfolio!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:39:49' overrides: 50497667!
affectReportWithReceptiveAccount: aReceptiveAccount

	self addToReport: aReceptiveAccount! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:39:49' prior: 50496132!
addToStructure: aPortfolioStructure

	aPortfolioStructure affectReportWithReceptiveAccount: self.! !

!methodRemoval: PortfolioStructure #addReceptiveAccount: stamp: 'AEC 5/29/2022 22:39:49'!
addReceptiveAccount: aReceptiveAccount

	self addToReport: aReceptiveAccount!
!AccountReport methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:39:56' prior: 50497667!
affectReportWithReceptiveAccount: aReceptiveAccount

	self subclassResponsibility! !
!AccountReport methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:40:01' prior: 50497672!
affectReportWithPortfolio: aPortfolio

	self subclassResponsibility! !
!AccountReport methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:40:14' prior: 50492608!
affectReportWithDeposit: aDeposit

	self subclassResponsibility! !
!AccountReport methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:40:18' prior: 50492646!
affectReportWithTransferDeposit: aTransferDeposit

	self subclassResponsibility! !
!AccountReport methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:40:22' prior: 50492692!
affectReportWithTransferWithdraw: aTransferWithdraw

	self subclassResponsibility! !
!AccountReport methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:40:25' prior: 50492739!
affectReportWithWithdraw: aWithdraw

	self subclassResponsibility! !
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:41:01'!
goUpALevel: anAccount
	
	level := level - 1! !

!methodRemoval: PortfolioStructure #goUpALevel stamp: 'AEC 5/29/2022 22:41:01'!
goUpALevel
	
	level := level - 1!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:41:12' overrides: 50497689!
goUpALevelFrom: anAccount
	
	level := level - 1! !

!methodRemoval: PortfolioStructure #goUpALevel: stamp: 'AEC 5/29/2022 22:41:12'!
goUpALevel: anAccount
	
	level := level - 1!

!methodRemoval: PortfolioStructure #goUpALevelFrom: stamp: 'AEC 5/29/2022 22:41:39'!
goUpALevelFrom: anAccount
	
	level := level - 1!
!PortfolioStructure methodsFor: 'nil' stamp: 'AEC 5/29/2022 22:42:23' overrides: 50497813!
affectReportWithWithdraw: aWithdraw! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:42:30' overrides: 50497807!
affectReportWithTransferWithdraw: aTransferWithdraw! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:42:37' overrides: 50497801!
affectReportWithTransferDeposit: aTransferDeposit! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:42:45' prior: 50497766 overrides: 50497785!
affectReportWithReceptiveAccount: aReceptiveAccount! !

!methodRemoval: PortfolioStructure #goDownALevel stamp: 'AEC 5/29/2022 22:43:03'!
goDownALevel
	
	level := level + 1!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:44:30' prior: 50496468 overrides: 50488294!
executeReport
	
	report := OrderedCollection new.
	
	account addToStructure: self.
	
	^report! !
!PortfolioStructure methodsFor: 'initialization' stamp: 'AEC 5/29/2022 22:44:39' prior: 50496247 overrides: 50488274!
initializeFor: aPortfolio 
	
	account := aPortfolio.
	level := 0! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 22:44:56'!
ERROR!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 22:44:56'!
ERROR!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 22:44:56'!
ERROR!

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 22:45:02'!
ERROR!

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 22:45:02'!
ERROR!
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:45:29' prior: 50497866 overrides: 50488294!
executeReport
	
	report := OrderedCollection new.
	
	account affectReport: self.
	
	^report! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 22:46:07'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 22:46:07'!
FAILURE!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 22:46:07'!
FAILURE!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 22:46:10'!
FAILURE!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 22:46:10'!
FAILURE!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:48:30' prior: 50497857 overrides: 50497785!
affectReportWithReceptiveAccount: aReceptiveAccount

	self addToReport: aReceptiveAccount! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 22:48:34'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 22:48:34'!
PASSED!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 22:48:34'!
PASSED!

!methodRemoval: Portfolio #addToStructure: stamp: 'AEC 5/29/2022 22:48:45'!
addToStructure: aPortfolioStructure
	
	aPortfolioStructure affectReportWithPortfolio: self.
	aPortfolioStructure goDownALevel.
	accounts do:[:account | account addToStructure: aPortfolioStructure ].
	aPortfolioStructure goUpALevel.
	!

!methodRemoval: ReceptiveAccount #addToStructure: stamp: 'AEC 5/29/2022 22:48:56'!
addToStructure: aPortfolioStructure

	aPortfolioStructure affectReportWithReceptiveAccount: self.!
!SpecialAccountSummary methodsFor: 'initialization' stamp: 'AEC 5/29/2022 22:49:46' overrides: 50488274!
initializeFor: aPortfolio 

	portfolio := aPortfolio.
	level := 0! !
!SpecialAccountSummary class methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:49:46' prior: 50496741 overrides: 50488091!
for: aPortfolio 

	^ self new initializeFor: aPortfolio! !

!methodRemoval: SpecialAccountSummary #initializeWith: stamp: 'AEC 5/29/2022 22:49:46'!
initializeWith: aPortfolio 

	portfolio := aPortfolio.
	level := 0!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:50:09' prior: 50496911 overrides: 50488294!
executeReport
	
	report := OrderedCollection new.
	account affectReport: self.
	
	^report! !
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:50:30' overrides: 50497796!
affectReportWithDeposit: aDeposit

	| line |
	line := self addLevelSpacesTo: ('Deposito por ',aDeposit value asString).
	report add: line! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:50:30' prior: 50497192 overrides: 50497186!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithDeposit: self! !

!methodRemoval: SpecialAccountSummary #addDeposit: stamp: 'AEC 5/29/2022 22:50:30'!
addDeposit: aDeposit

	| line |
	line := self addLevelSpacesTo: ('Deposito por ',aDeposit value asString).
	report add: line!
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:50:44' overrides: 50497791!
affectReportWithPortfolio: aPortfolio

	self addToReport: aPortfolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:50:44' prior: 50496918!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithPortfolio: self.
	aSpecialAccountSummary goDownALevel.
	accounts do:[:account | account addToSpecialAccountSummary: aSpecialAccountSummary ].
	aSpecialAccountSummary addBalance: self balance.
	aSpecialAccountSummary goUpALevel.
	! !

!methodRemoval: SpecialAccountSummary #addPortfolio: stamp: 'AEC 5/29/2022 22:50:44'!
addPortfolio: aPortfolio

	self addToReport: aPortfolio!
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:50:58' overrides: 50497785!
affectReportWithReceptiveAccount: aReceptiveAccount

	self addToReport: aReceptiveAccount! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:50:58' prior: 50497173!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithReceptiveAccount: self.
	aSpecialAccountSummary goDownALevel.
	transactions do:[:transaction | transaction addToSpecialAccountSummary: aSpecialAccountSummary].
	aSpecialAccountSummary addBalance: self balance.
	aSpecialAccountSummary goUpALevel.! !

!methodRemoval: SpecialAccountSummary #addReceptiveAccount: stamp: 'AEC 5/29/2022 22:50:58'!
addReceptiveAccount: aReceptiveAccount

	self addToReport: aReceptiveAccount!
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:51:16' overrides: 50497801!
affectReportWithTransferDeposit: aTransferDeposit

	| line |
	line := self addLevelSpacesTo: ('Entrada por transferencia de ',aTransferDeposit value asString).
	report add: line! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:51:16' prior: 50497198 overrides: 50497186!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithTransferDeposit: self! !

!methodRemoval: SpecialAccountSummary #addTransferDeposit: stamp: 'AEC 5/29/2022 22:51:16'!
addTransferDeposit: aTransferDeposit

	| line |
	line := self addLevelSpacesTo: ('Entrada por transferencia de ',aTransferDeposit value asString).
	report add: line!
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:51:26' overrides: 50497807!
affectReportWithTransferWithdraw: aTransferWithdraw

	| line |
	line := self addLevelSpacesTo: ('Salida por transferencia de ',aTransferWithdraw value asString).
	report add: line! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:51:26' prior: 50497205 overrides: 50497186!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithTransferWithdraw: self! !

!methodRemoval: SpecialAccountSummary #addTransferWithdraw: stamp: 'AEC 5/29/2022 22:51:27'!
addTransferWithdraw: aTransferWithdraw

	| line |
	line := self addLevelSpacesTo: ('Salida por transferencia de ',aTransferWithdraw value asString).
	report add: line!
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:51:41' overrides: 50497813!
affectReportWithWithdraw: aWithdraw

	| line |
	line := self addLevelSpacesTo: ('Extraccion por ',aWithdraw value asString).
	report add: line! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:51:41' prior: 50497211 overrides: 50497186!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithWithdraw: self! !

!methodRemoval: SpecialAccountSummary #addWithdraw: stamp: 'AEC 5/29/2022 22:51:41'!
addWithdraw: aWithdraw

	| line |
	line := self addLevelSpacesTo: ('Extraccion por ',aWithdraw value asString).
	report add: line!

!methodRemoval: SpecialAccountSummary #goDownALevel stamp: 'AEC 5/29/2022 22:51:52'!
goDownALevel
	
	level := level + 1!

!methodRemoval: SpecialAccountSummary #goUpALevel stamp: 'AEC 5/29/2022 22:52:02'!
goUpALevel
	
	level := level - 1!
!SpecialAccountSummary methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 22:52:50' overrides: 50497689!
goUpALevelFrom: anAccount

	self addBalance: anAccount balance.
	super goUpALevelFrom: anAccount! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 22:53:25'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 22:53:25'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 22:53:25'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 22:53:29'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 22:53:29'!
ERROR!
!SpecialAccountSummary methodsFor: 'initialization' stamp: 'AEC 5/29/2022 22:53:50' prior: 50497944 overrides: 50488274!
initializeFor: aPortfolio 

	account := aPortfolio.
	level := 0! !

!methodRemoval: PortfolioStructure #initializeFor: stamp: 'AEC 5/29/2022 22:54:07'!
initializeFor: aPortfolio 
	
	account := aPortfolio.
	level := 0!

!methodRemoval: SpecialAccountSummary #initializeFor: stamp: 'AEC 5/29/2022 22:54:12'!
initializeFor: aPortfolio 

	account := aPortfolio.
	level := 0!
!AccountReport methodsFor: 'initialization' stamp: 'AEC 5/29/2022 22:54:24' prior: 50488274!
initializeFor: anAccount

	account := anAccount.! !
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:55:09' prior: 50497893 overrides: 50488294!
executeReport
	
	report := OrderedCollection new.
	level := 0.

	account affectReport: self.
	
	^report! !
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:55:21' prior: 50497962 overrides: 50488294!
executeReport
	
	report := OrderedCollection new.
	level := 0.
	
	account affectReport: self.
	
	^report! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 22:55:43'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 22:55:43'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 22:55:43'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (52 to: 58)
		declaredAt: (52 to: 58)) affectReport:
		(self coverAll:
			{74 to: 77}) ] valueCoveringAll:
		{60 to: 72}.
	[
	(self coverAll:
		{81 to: 84}) addAccountBalanceLine ] valueCoveringAll:
		{86 to: 106}.
	^ report
		cover: (113 to: 118)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReport: anAccountReport
	[
	(anAccountReport
		cover: (34 to: 48)
		declaredAt: (15 to: 29)) affectReportWithReceptiveAccount:
		(self coverAll:
			{84 to: 87}) ] valueCoveringAll:
		{50 to: 82}.
	[
	(anAccountReport
		cover: (91 to: 105)
		declaredAt: (15 to: 29)) goDownALevel ] valueCoveringAll:
		{107 to: 118}.
	[
	(transactions
		cover: (122 to: 133)
		declaredAt: (122 to: 133)) do: [ :transaction |
		[
		(transaction
			cover: (155 to: 165)
			declaredAt: (141 to: 151)) affectReport:
			(anAccountReport
				cover: (181 to: 195)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{167 to: 179} ]] valueCoveringAll:
		{135 to: 137}.
	[
	(anAccountReport
		cover: (201 to: 215)
		declaredAt: (15 to: 29)) goUpALevelFrom:
		(self coverAll:
			{233 to: 236}) ] valueCoveringAll:
		{217 to: 231}.! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:56:05'!
ERROR!
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 22:56:05'!
ERROR!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 22:56:05'!
ERROR!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 22:56:05'!
ERROR!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
affectReport: anAccountReport
	[
	(anAccountReport
		cover: (34 to: 48)
		declaredAt: (15 to: 29)) affectReportWithPortfolio:
		(self coverAll:
			{77 to: 80}) ] valueCoveringAll:
		{50 to: 75}.
	[
	(anAccountReport
		cover: (84 to: 98)
		declaredAt: (15 to: 29)) goDownALevel ] valueCoveringAll:
		{100 to: 111}.
	[
	(accounts
		cover: (115 to: 122)
		declaredAt: (115 to: 122)) do: [ :account |
		[
		(account
			cover: (141 to: 147)
			declaredAt: (131 to: 137)) affectReport:
			(anAccountReport
				cover: (163 to: 177)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{149 to: 161} ]] valueCoveringAll:
		{124 to: 126}.
	[
	(anAccountReport
		cover: (183 to: 197)
		declaredAt: (15 to: 29)) goUpALevelFrom:
		(self coverAll:
			{215 to: 218}) ] valueCoveringAll:
		{199 to: 213}.! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:56:05'!
ERROR!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 22:56:05'!
ERROR!
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 22:56:05'!
ERROR!
!Behavior method!
named: anAccountName
	^ [
	([
	(self coverAll:
		{27 to: 30}) new ] valueCoveringAll:
		{32 to: 34}) initializeNamed:
		(anAccountName
			cover: (53 to: 65)
			declaredAt: (8 to: 20)) ] valueCoveringAll:
		{36 to: 51}.! !
!Behavior method!
initializeNamed: anAccountName
	(name _ anAccountName
		cover: (44 to: 56)
		declaredAt: (18 to: 30))
		cover: (36 to: 39)
		declaredAt: (36 to: 39).! !
!Behavior method!
for: aPortfolio
	^ [
	([
	(self coverAll:
		{21 to: 24}) new ] valueCoveringAll:
		{26 to: 28}) initializeFor:
		(aPortfolio
			cover: (45 to: 54)
			declaredAt: (6 to: 15)) ] valueCoveringAll:
		{30 to: 43}.! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	(level _ 0 coverAll:
		{61 to: 61})
		cover: (52 to: 56)
		declaredAt: (52 to: 56).
	[
	(account
		cover: (66 to: 72)
		declaredAt: (66 to: 72)) affectReport:
		(self coverAll:
			{88 to: 91}) ] valueCoveringAll:
		{74 to: 86}.
	^ report
		cover: (98 to: 103)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReportWithPortfolio: aPortfolio
	[
	(self coverAll:
		{41 to: 44}) addToReport:
		(aPortfolio
			cover: (59 to: 68)
			declaredAt: (28 to: 37)) ] valueCoveringAll:
		{46 to: 57}.! !
!Behavior method!
addToReport: anAccount
	[
	(report
		cover: (26 to: 31)
		declaredAt: (26 to: 31)) add:
		([
		(self coverAll:
			{39 to: 42}) addLevelSpacesTo:
			(anAccount
				cover: (62 to: 70)
				declaredAt: (14 to: 22)) ] valueCoveringAll:
			{44 to: 60}) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
addLevelSpacesTo: anAccount
	| accountName |
	(accountName _ [
	(anAccount
		cover: (65 to: 73)
		declaredAt: (19 to: 27)) accountName ] valueCoveringAll:
		{75 to: 85})
		cover: (50 to: 60)
		declaredAt: (33 to: 43).
	^ [
	(accountName
		cover: (90 to: 100)
		declaredAt: (33 to: 43))
		padded:
			(#left coverAll:
				{109 to: 113})
		to:
			([
			([
			(accountName
				cover: (119 to: 129)
				declaredAt: (33 to: 43)) size ] valueCoveringAll:
				{131 to: 134}) +
				([
				(2 coverAll:
					{139 to: 139}) *
					(level
						cover: (141 to: 145)
						declaredAt: (141 to: 145)) ] valueCoveringAll:
					{140 to: 140}) ] valueCoveringAll:
				{136 to: 136})
		with:
			($  coverAll:
				{154 to: 155}) ] valueCoveringAll:
		{102 to: 108. 115 to: 117. 149 to: 153}.! !
!Behavior method!
accountName
	^ name
		cover: (17 to: 20)
		declaredAt: (17 to: 20).! !
!Behavior method!
goDownALevel
	(level _ [
	(level
		cover: (16 to: 20)
		declaredAt: (16 to: 20)) +
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{31 to: 31})
		cover: (25 to: 29)
		declaredAt: (16 to: 20).! !
!Behavior method!
goUpALevelFrom: anAccount
	(level _ [
	(level
		cover: (29 to: 33)
		declaredAt: (29 to: 33)) -
		(1 coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{44 to: 44})
		cover: (38 to: 42)
		declaredAt: (29 to: 33).! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
named: anAccountName
	^ [
	([
	(self coverAll:
		{27 to: 30}) new ] valueCoveringAll:
		{32 to: 34}) initializeNamed:
		(anAccountName
			cover: (53 to: 65)
			declaredAt: (8 to: 20)) ] valueCoveringAll:
		{36 to: 51}.! !
!Behavior method!
initializeNamed: anAccountName
	(name _ anAccountName
		cover: (43 to: 55)
		declaredAt: (18 to: 30))
		cover: (35 to: 38)
		declaredAt: (35 to: 38).! !
!Behavior method!
named: anAccountName with: aReceptiveAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{51 to: 54}) new ] valueCoveringAll:
		{56 to: 58}.
	[
	cascadeReceiver initializeNamed:
		(anAccountName
			cover: (80 to: 92)
			declaredAt: (8 to: 20)) ] valueCoveringAll:
		{63 to: 78}.
	[
	cascadeReceiver add:
		(aReceptiveAccount
			cover: (103 to: 119)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{98 to: 101}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{125 to: 132} ] value.! !
!Behavior method!
affectReportWithReceptiveAccount: aReceptiveAccount
	[
	(self coverAll:
		{55 to: 58}) addToReport:
		(aReceptiveAccount
			cover: (73 to: 89)
			declaredAt: (35 to: 51)) ] valueCoveringAll:
		{60 to: 71}.! !
!Behavior method!
accountName
	^ name
		cover: (17 to: 20)
		declaredAt: (17 to: 20).! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
named: anAccountName with: aReceptiveAccount with: anotherReceptiveAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{82 to: 85}) new ] valueCoveringAll:
		{87 to: 89}.
	[
	cascadeReceiver initializeNamed:
		(anAccountName
			cover: (111 to: 123)
			declaredAt: (8 to: 20)) ] valueCoveringAll:
		{94 to: 109}.
	[
	cascadeReceiver add:
		(aReceptiveAccount
			cover: (134 to: 150)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{129 to: 132}.
	[
	cascadeReceiver add:
		(anotherReceptiveAccount
			cover: (161 to: 183)
			declaredAt: (52 to: 74)) ] valueCoveringAll:
		{156 to: 159}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{189 to: 196} ] value.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{32 to: 35}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (58 to: 66)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 56}.
	[
	cascadeReceiver add:
		(anotherAccount
			cover: (76 to: 89)
			declaredAt: (23 to: 36)) ] valueCoveringAll:
		{71 to: 74}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 22:56:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!
!Behavior method!
for: aPortfolio
	^ [
	([
	(self coverAll:
		{22 to: 25}) new ] valueCoveringAll:
		{27 to: 29}) initializeFor:
		(aPortfolio
			cover: (46 to: 55)
			declaredAt: (6 to: 15)) ] valueCoveringAll:
		{31 to: 44}.! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	(level _ 0 coverAll:
		{61 to: 61})
		cover: (52 to: 56)
		declaredAt: (52 to: 56).
	[
	(account
		cover: (67 to: 73)
		declaredAt: (67 to: 73)) affectReport:
		(self coverAll:
			{89 to: 92}) ] valueCoveringAll:
		{75 to: 87}.
	^ report
		cover: (99 to: 104)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReportWithPortfolio: aPortfolio
	[
	(self coverAll:
		{41 to: 44}) addToReport:
		(aPortfolio
			cover: (59 to: 68)
			declaredAt: (28 to: 37)) ] valueCoveringAll:
		{46 to: 57}.! !
!Behavior method!
addToReport: anAccount
	[
	(report
		cover: (26 to: 31)
		declaredAt: (26 to: 31)) add:
		([
		(self coverAll:
			{39 to: 42}) addLevelSpacesTo:
			([
			(anAccount
				cover: (62 to: 70)
				declaredAt: (14 to: 22)) accountName ] valueCoveringAll:
				{72 to: 82}) ] valueCoveringAll:
			{44 to: 60}) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
addLevelSpacesTo: aReportLine
	^ [
	(aReportLine
		cover: (34 to: 44)
		declaredAt: (19 to: 29))
		padded:
			(#left coverAll:
				{53 to: 57})
		to:
			([
			([
			(aReportLine
				cover: (63 to: 73)
				declaredAt: (19 to: 29)) size ] valueCoveringAll:
				{75 to: 78}) +
				([
				(2 coverAll:
					{83 to: 83}) *
					(level
						cover: (85 to: 89)
						declaredAt: (85 to: 89)) ] valueCoveringAll:
					{84 to: 84}) ] valueCoveringAll:
				{80 to: 80})
		with:
			($  coverAll:
				{98 to: 99}) ] valueCoveringAll:
		{46 to: 52. 59 to: 61. 93 to: 97}.! !
!Behavior method!
goUpALevelFrom: anAccount
	[
	(self coverAll:
		{29 to: 32}) addBalance:
		([
		(anAccount
			cover: (46 to: 54)
			declaredAt: (17 to: 25)) balance ] valueCoveringAll:
			{56 to: 62}) ] valueCoveringAll:
		{34 to: 44}.
	[
	super goUpALevelFrom:
		(anAccount
			cover: (88 to: 96)
			declaredAt: (17 to: 25)) ] valueCoveringAll:
		{72 to: 86}.! !
!Behavior method!
addBalance: aBalance
	| balance |
	(balance _ [
	(self coverAll:
		{50 to: 53}) addLevelSpacesTo:
		([
		('Balance = ' coverAll:
			{74 to: 85}) ,
			([
			(aBalance
				cover: (87 to: 94)
				declaredAt: (13 to: 20)) asString ] valueCoveringAll:
				{96 to: 103}) ] valueCoveringAll:
			{86 to: 86}) ] valueCoveringAll:
		{55 to: 71})
		cover: (39 to: 45)
		declaredAt: (26 to: 32).
	[
	(report
		cover: (110 to: 115)
		declaredAt: (110 to: 115)) add:
		(balance
			cover: (122 to: 128)
			declaredAt: (26 to: 32)) ] valueCoveringAll:
		{117 to: 120}.! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!
!Behavior method!
affectReportWithReceptiveAccount: aReceptiveAccount
	[
	(self coverAll:
		{55 to: 58}) addToReport:
		(aReceptiveAccount
			cover: (73 to: 89)
			declaredAt: (35 to: 51)) ] valueCoveringAll:
		{60 to: 71}.! !

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithDeposit:
		(self coverAll:
			{77 to: 80}) ] valueCoveringAll:
		{52 to: 75}.! !
!Behavior method!
affectReportWithDeposit: aDeposit
	| line |
	(line _ [
	(self coverAll:
		{55 to: 58}) addLevelSpacesTo:
		([
		('Deposito por ' coverAll:
			{79 to: 93}) ,
			([
			([
			(aDeposit
				cover: (95 to: 102)
				declaredAt: (26 to: 33)) value ] valueCoveringAll:
				{104 to: 108}) asString ] valueCoveringAll:
				{110 to: 117}) ] valueCoveringAll:
			{94 to: 94}) ] valueCoveringAll:
		{60 to: 76})
		cover: (47 to: 50)
		declaredAt: (39 to: 42).
	[
	(report
		cover: (122 to: 127)
		declaredAt: (122 to: 127)) add:
		(line
			cover: (134 to: 137)
			declaredAt: (39 to: 42)) ] valueCoveringAll:
		{129 to: 132}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithWithdraw:
		(self coverAll:
			{78 to: 81}) ] valueCoveringAll:
		{52 to: 76}.! !
!Behavior method!
affectReportWithWithdraw: aWithdraw
	| line |
	(line _ [
	(self coverAll:
		{57 to: 60}) addLevelSpacesTo:
		([
		('Extraccion por ' coverAll:
			{81 to: 97}) ,
			([
			([
			(aWithdraw
				cover: (99 to: 107)
				declaredAt: (27 to: 35)) value ] valueCoveringAll:
				{109 to: 113}) asString ] valueCoveringAll:
				{115 to: 122}) ] valueCoveringAll:
			{98 to: 98}) ] valueCoveringAll:
		{62 to: 78})
		cover: (49 to: 52)
		declaredAt: (41 to: 44).
	[
	(report
		cover: (127 to: 132)
		declaredAt: (127 to: 132)) add:
		(line
			cover: (139 to: 142)
			declaredAt: (41 to: 44)) ] valueCoveringAll:
		{134 to: 137}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithTransferWithdraw:
		(self coverAll:
			{86 to: 89}) ] valueCoveringAll:
		{52 to: 84}.! !
!Behavior method!
affectReportWithTransferWithdraw: aTransferWithdraw
	| line |
	(line _ [
	(self coverAll:
		{73 to: 76}) addLevelSpacesTo:
		([
		('Salida por transferencia de ' coverAll:
			{97 to: 126}) ,
			([
			([
			(aTransferWithdraw
				cover: (128 to: 144)
				declaredAt: (35 to: 51)) value ] valueCoveringAll:
				{146 to: 150}) asString ] valueCoveringAll:
				{152 to: 159}) ] valueCoveringAll:
			{127 to: 127}) ] valueCoveringAll:
		{78 to: 94})
		cover: (65 to: 68)
		declaredAt: (57 to: 60).
	[
	(report
		cover: (164 to: 169)
		declaredAt: (164 to: 169)) add:
		(line
			cover: (176 to: 179)
			declaredAt: (57 to: 60)) ] valueCoveringAll:
		{171 to: 174}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (37 to: 51)
		declaredAt: (15 to: 29)) affectReportWithTransferDeposit:
		(self coverAll:
			{86 to: 89}) ] valueCoveringAll:
		{53 to: 84}.! !
!Behavior method!
affectReportWithTransferDeposit: aTransferDeposit
	| line |
	(line _ [
	(self coverAll:
		{71 to: 74}) addLevelSpacesTo:
		([
		('Entrada por transferencia de ' coverAll:
			{95 to: 125}) ,
			([
			([
			(aTransferDeposit
				cover: (127 to: 142)
				declaredAt: (34 to: 49)) value ] valueCoveringAll:
				{144 to: 148}) asString ] valueCoveringAll:
				{150 to: 157}) ] valueCoveringAll:
			{126 to: 126}) ] valueCoveringAll:
		{76 to: 92})
		cover: (63 to: 66)
		declaredAt: (55 to: 58).
	[
	(report
		cover: (162 to: 167)
		declaredAt: (162 to: 167)) add:
		(line
			cover: (174 to: 177)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{169 to: 172}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!
!Behavior method!
executeReport
	(report _ 0 coverAll:
		{28 to: 28})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (32 to: 38)
		declaredAt: (32 to: 38)) affectReport:
		(self coverAll:
			{54 to: 57}) ] valueCoveringAll:
		{40 to: 52}.
	^ report
		cover: (64 to: 69)
		declaredAt: (18 to: 23).! !

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 22:56:07'!
ERROR!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 22:56:07'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 22:56:07'!
ERROR!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 22:56:07'!
ERROR!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 22:56:07'!
ERROR!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 22:56:07'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!
!Behavior method!
sentTransaction
	^ sentTransaction
		cover: (20 to: 34)
		declaredAt: (20 to: 34).! !
!Behavior method!
receivedTransaction
	^ receivedTransaction
		cover: (24 to: 42)
		declaredAt: (24 to: 42).! !

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!
!Behavior method!
cantHaveSameAccountAtBothEnds
	^ 'No se puede poner una misma cuenta como emisora y receptora de la misma transferencia.' coverAll:
		{35 to: 122}.! !

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!
!Behavior method!
amountMustBePositive
	^ 'El monto de la transferencia debe ser mayor a cero' coverAll:
		{26 to: 77}.! !

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 22:56:07'!
PASSED!

!methodRemoval: Portfolio #addToSpecialAccountSummary: stamp: 'AEC 5/29/2022 22:56:30'!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithPortfolio: self.
	aSpecialAccountSummary goDownALevel.
	accounts do:[:account | account addToSpecialAccountSummary: aSpecialAccountSummary ].
	aSpecialAccountSummary addBalance: self balance.
	aSpecialAccountSummary goUpALevel.
	!

!methodRemoval: ReceptiveAccount #addToSpecialAccountSummary: stamp: 'AEC 5/29/2022 22:56:38'!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithReceptiveAccount: self.
	aSpecialAccountSummary goDownALevel.
	transactions do:[:transaction | transaction addToSpecialAccountSummary: aSpecialAccountSummary].
	aSpecialAccountSummary addBalance: self balance.
	aSpecialAccountSummary goUpALevel.!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 22:56:56'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 22:56:56'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 22:56:57'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 22:56:57'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 22:56:57'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:57:18'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 22:57:18'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 22:57:18'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 22:57:18'!
ERROR!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:57:18'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 22:57:18'!
ERROR!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 22:57:18'!
ERROR!

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 22:57:18'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 22:57:18'!
ERROR!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 22:57:18'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 22:57:18'!
ERROR!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 22:57:18'!
ERROR!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 22:57:19'!
ERROR!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 22:57:19'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 22:57:19'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 22:57:19'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 22:57:19'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 22:57:19'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 22:57:19'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:57:35'!
ERROR!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:57:35'!
ERROR!
!AccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:58:12' overrides: 50497785!
affectReportWithReceptiveAccount: aReceptiveAccount! !
!AccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 22:58:22' overrides: 50497791!
affectReportWithPortfolio: aPortfolio! !
!TransferNet methodsFor: 'transfer-net' stamp: 'AEC 5/29/2022 22:58:27' overrides: 50497791!
affectReportWithPortfolio: aPortfolio! !
!TransferNet methodsFor: 'transfer-net' stamp: 'AEC 5/29/2022 22:58:37' overrides: 50497785!
affectReportWithReceptiveAccount: aReceptiveAccount! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 22:58:53'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 22:58:53'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:59:05'!
ERROR!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 22:59:05'!
ERROR!
!AccountReport methodsFor: 'initialization' stamp: 'AEC 5/29/2022 22:59:40' prior: 50498162!
initializeFor: anAccount

	account := anAccount.
	level := 0.! !
!PortfolioStructure methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:00:12' prior: 50498168 overrides: 50488294!
executeReport
	
	report := OrderedCollection new.
	
	account affectReport: self.
	
	^report! !
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:00:18' prior: 50498175 overrides: 50488294!
executeReport
	
	report := OrderedCollection new.
	
	account affectReport: self.
	
	^report! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 23:00:27'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(account _ anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (28 to: 34)
		declaredAt: (28 to: 34).
	(level _ 0 coverAll:
		{60 to: 60})
		cover: (51 to: 55)
		declaredAt: (51 to: 55).! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (52 to: 58)
		declaredAt: (52 to: 58)) affectReport:
		(self coverAll:
			{74 to: 77}) ] valueCoveringAll:
		{60 to: 72}.
	[
	(self coverAll:
		{81 to: 84}) addAccountBalanceLine ] valueCoveringAll:
		{86 to: 106}.
	^ report
		cover: (113 to: 118)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReport: anAccountReport
	[
	(anAccountReport
		cover: (34 to: 48)
		declaredAt: (15 to: 29)) affectReportWithReceptiveAccount:
		(self coverAll:
			{84 to: 87}) ] valueCoveringAll:
		{50 to: 82}.
	[
	(anAccountReport
		cover: (91 to: 105)
		declaredAt: (15 to: 29)) goDownALevel ] valueCoveringAll:
		{107 to: 118}.
	[
	(transactions
		cover: (122 to: 133)
		declaredAt: (122 to: 133)) do: [ :transaction |
		[
		(transaction
			cover: (155 to: 165)
			declaredAt: (141 to: 151)) affectReport:
			(anAccountReport
				cover: (181 to: 195)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{167 to: 179} ]] valueCoveringAll:
		{135 to: 137}.
	[
	(anAccountReport
		cover: (201 to: 215)
		declaredAt: (15 to: 29)) goUpALevelFrom:
		(self coverAll:
			{233 to: 236}) ] valueCoveringAll:
		{217 to: 231}.! !
!Behavior method!
affectReportWithReceptiveAccount: aReceptiveAccount
	^ self.! !
!Behavior method!
goDownALevel
	(level _ [
	(level
		cover: (16 to: 20)
		declaredAt: (16 to: 20)) +
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{31 to: 31})
		cover: (25 to: 29)
		declaredAt: (16 to: 20).! !
!Behavior method!
goUpALevelFrom: anAccount
	(level _ [
	(level
		cover: (29 to: 33)
		declaredAt: (29 to: 33)) -
		(1 coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{44 to: 44})
		cover: (38 to: 42)
		declaredAt: (29 to: 33).! !
!Behavior method!
addAccountBalanceLine
	^ [
	(report
		cover: (27 to: 32)
		declaredAt: (27 to: 32)) add:
		([
		('Balance = ' coverAll:
			{40 to: 51}) ,
			([
			([
			(account
				cover: (53 to: 59)
				declaredAt: (53 to: 59)) balance ] valueCoveringAll:
				{61 to: 67}) asString ] valueCoveringAll:
				{69 to: 76}) ] valueCoveringAll:
			{52 to: 52}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:00:31'!
PASSED!
!Behavior method!
register: aValueOrTransfer on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{76 to: 79}) for:
		(aValueOrTransfer
			cover: (86 to: 101)
			declaredAt: (11 to: 26)) ] valueCoveringAll:
		{81 to: 84})
		cover: (61 to: 71)
		declaredAt: (44 to: 54).
	[
	(account
		cover: (105 to: 111)
		declaredAt: (32 to: 38)) register:
		(transaction
			cover: (123 to: 133)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{113 to: 121}.
	^ transaction
		cover: (142 to: 152)
		declaredAt: (44 to: 54).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithDeposit:
		(self coverAll:
			{77 to: 80}) ] valueCoveringAll:
		{52 to: 75}.! !
!Behavior method!
affectReportWithDeposit: aDeposit
	[
	(report
		cover: (37 to: 42)
		declaredAt: (37 to: 42)) add:
		([
		('Deposito por ' coverAll:
			{50 to: 64}) ,
			([
			([
			(aDeposit
				cover: (66 to: 73)
				declaredAt: (26 to: 33)) value ] valueCoveringAll:
				{75 to: 79}) asString ] valueCoveringAll:
				{81 to: 88}) ] valueCoveringAll:
			{65 to: 65}) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 23:00:32'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithWithdraw:
		(self coverAll:
			{78 to: 81}) ] valueCoveringAll:
		{52 to: 76}.! !
!Behavior method!
affectReportWithWithdraw: aWithdraw
	[
	(report
		cover: (39 to: 44)
		declaredAt: (39 to: 44)) add:
		([
		('Extraccion por ' coverAll:
			{52 to: 68}) ,
			([
			([
			(aWithdraw
				cover: (70 to: 78)
				declaredAt: (27 to: 35)) value ] valueCoveringAll:
				{80 to: 84}) asString ] valueCoveringAll:
				{86 to: 93}) ] valueCoveringAll:
			{69 to: 69}) ] valueCoveringAll:
		{46 to: 49}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 23:00:32'!
PASSED!
!Behavior method!
from: aSender to: aReceiver for: anAmount
	[
	(self coverAll:
		{45 to: 48})
		assert:
			(aReceiver
				cover: (58 to: 66)
				declaredAt: (19 to: 27))
		isNotTheSameAs:
			(aSender
				cover: (84 to: 90)
				declaredAt: (7 to: 13)) ] valueCoveringAll:
		{50 to: 56. 68 to: 82}.
	[
	(self coverAll:
		{94 to: 97}) assertAmountIsPositive:
		(anAmount
			cover: (123 to: 130)
			declaredAt: (34 to: 41)) ] valueCoveringAll:
		{99 to: 121}.
	^ [
	([
	(self coverAll:
		{136 to: 139}) new ] valueCoveringAll:
		{141 to: 143})
		initializeFrom:
			(aSender
				cover: (161 to: 167)
				declaredAt: (7 to: 13))
		to:
			(aReceiver
				cover: (173 to: 181)
				declaredAt: (19 to: 27))
		for:
			(anAmount
				cover: (188 to: 195)
				declaredAt: (34 to: 41)) ] valueCoveringAll:
		{145 to: 159. 169 to: 171. 183 to: 186}.! !
!Behavior method!
assert: aReceiver isNotTheSameAs: aSender
	^ [
	([
	(aSender
		cover: (47 to: 53)
		declaredAt: (35 to: 41)) =
		(aReceiver
			cover: (57 to: 65)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{55 to: 55}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			(self coverAll:
				{87 to: 90}) cantHaveSameAccountAtBothEnds ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{67 to: 73}.! !
!Behavior method!
assertAmountIsPositive: anAmount
	^ [
	([
	(anAmount
		cover: (38 to: 45)
		declaredAt: (25 to: 32)) >
		(0 coverAll:
			{49 to: 49}) ] valueCoveringAll:
		{47 to: 47}) ifFalse: [
		[
		(self coverAll:
			{60 to: 63}) error:
			([
			(self coverAll:
				{72 to: 75}) amountMustBePositive ] valueCoveringAll:
				{77 to: 96}) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{51 to: 58}.! !
!Behavior method!
initializeFrom: aSender to: aReceiver for: anAmount
	(amount _ anAmount
		cover: (65 to: 72)
		declaredAt: (44 to: 51))
		cover: (55 to: 60)
		declaredAt: (55 to: 60).
	(sentTransaction _ [
	(TransferWithdraw
		cover: (95 to: 110)
		declaredAt: (95 to: 110))
		register:
			(self coverAll:
				{122 to: 125})
		on:
			(aSender
				cover: (131 to: 137)
				declaredAt: (17 to: 23)) ] valueCoveringAll:
		{112 to: 120. 127 to: 129})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).
	(receivedTransaction _ [
	(TransferDeposit
		cover: (164 to: 178)
		declaredAt: (164 to: 178))
		register:
			(self coverAll:
				{190 to: 193})
		on:
			(aReceiver
				cover: (200 to: 208)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{180 to: 188. 196 to: 198})
		cover: (141 to: 159)
		declaredAt: (141 to: 159).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
for: aTransfer
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aTransfer
			cover: (44 to: 52)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (36 to: 50)
		declaredAt: (15 to: 29)) affectReportWithTransferWithdraw:
		(self coverAll:
			{86 to: 89}) ] valueCoveringAll:
		{52 to: 84}.! !
!Behavior method!
affectReportWithTransferWithdraw: aTransferWithdraw
	[
	(report
		cover: (55 to: 60)
		declaredAt: (55 to: 60)) add:
		([
		('Salida por transferencia de ' coverAll:
			{68 to: 97}) ,
			([
			([
			(aTransferWithdraw
				cover: (99 to: 115)
				declaredAt: (35 to: 51)) value ] valueCoveringAll:
				{117 to: 121}) asString ] valueCoveringAll:
				{123 to: 130}) ] valueCoveringAll:
			{98 to: 98}) ] valueCoveringAll:
		{62 to: 65}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ amount
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
affectReport: anAccountReport
	^ [
	(anAccountReport
		cover: (37 to: 51)
		declaredAt: (15 to: 29)) affectReportWithTransferDeposit:
		(self coverAll:
			{86 to: 89}) ] valueCoveringAll:
		{53 to: 84}.! !
!Behavior method!
affectReportWithTransferDeposit: aTransferDeposit
	[
	(report
		cover: (53 to: 58)
		declaredAt: (53 to: 58)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{66 to: 96}) ,
			([
			([
			(aTransferDeposit
				cover: (98 to: 113)
				declaredAt: (34 to: 49)) value ] valueCoveringAll:
				{115 to: 119}) asString ] valueCoveringAll:
				{121 to: 128}) ] valueCoveringAll:
			{97 to: 97}) ] valueCoveringAll:
		{60 to: 63}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (10 to: 17)
		declaredAt: (10 to: 17)) value ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (30 to: 37)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{41 to: 44}) value ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{39 to: 39}.! !

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 23:00:32'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
affectReport: anAccountReport
	[
	(anAccountReport
		cover: (34 to: 48)
		declaredAt: (15 to: 29)) affectReportWithPortfolio:
		(self coverAll:
			{77 to: 80}) ] valueCoveringAll:
		{50 to: 75}.
	[
	(anAccountReport
		cover: (84 to: 98)
		declaredAt: (15 to: 29)) goDownALevel ] valueCoveringAll:
		{100 to: 111}.
	[
	(accounts
		cover: (115 to: 122)
		declaredAt: (115 to: 122)) do: [ :account |
		[
		(account
			cover: (141 to: 147)
			declaredAt: (131 to: 137)) affectReport:
			(anAccountReport
				cover: (163 to: 177)
				declaredAt: (15 to: 29)) ] valueCoveringAll:
			{149 to: 161} ]] valueCoveringAll:
		{124 to: 126}.
	[
	(anAccountReport
		cover: (183 to: 197)
		declaredAt: (15 to: 29)) goUpALevelFrom:
		(self coverAll:
			{215 to: 218}) ] valueCoveringAll:
		{199 to: 213}.! !
!Behavior method!
affectReportWithPortfolio: aPortfolio
	^ self.! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:00:32'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 23:00:32'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 23:00:32'!
PASSED!
!Behavior method!
named: anAccountName
	^ [
	([
	(self coverAll:
		{27 to: 30}) new ] valueCoveringAll:
		{32 to: 34}) initializeNamed:
		(anAccountName
			cover: (53 to: 65)
			declaredAt: (8 to: 20)) ] valueCoveringAll:
		{36 to: 51}.! !
!Behavior method!
initializeNamed: anAccountName
	(name _ anAccountName
		cover: (44 to: 56)
		declaredAt: (18 to: 30))
		cover: (36 to: 39)
		declaredAt: (36 to: 39).! !
!Behavior method!
for: aPortfolio
	^ [
	([
	(self coverAll:
		{21 to: 24}) new ] valueCoveringAll:
		{26 to: 28}) initializeFor:
		(aPortfolio
			cover: (45 to: 54)
			declaredAt: (6 to: 15)) ] valueCoveringAll:
		{30 to: 43}.! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (54 to: 60)
		declaredAt: (54 to: 60)) affectReport:
		(self coverAll:
			{76 to: 79}) ] valueCoveringAll:
		{62 to: 74}.
	^ report
		cover: (86 to: 91)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReportWithPortfolio: aPortfolio
	[
	(self coverAll:
		{41 to: 44}) addToReport:
		(aPortfolio
			cover: (59 to: 68)
			declaredAt: (28 to: 37)) ] valueCoveringAll:
		{46 to: 57}.! !
!Behavior method!
addToReport: anAccount
	[
	(report
		cover: (26 to: 31)
		declaredAt: (26 to: 31)) add:
		([
		(self coverAll:
			{39 to: 42}) addLevelSpacesTo:
			(anAccount
				cover: (62 to: 70)
				declaredAt: (14 to: 22)) ] valueCoveringAll:
			{44 to: 60}) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
addLevelSpacesTo: anAccount
	| accountName |
	(accountName _ [
	(anAccount
		cover: (65 to: 73)
		declaredAt: (19 to: 27)) accountName ] valueCoveringAll:
		{75 to: 85})
		cover: (50 to: 60)
		declaredAt: (33 to: 43).
	^ [
	(accountName
		cover: (90 to: 100)
		declaredAt: (33 to: 43))
		padded:
			(#left coverAll:
				{109 to: 113})
		to:
			([
			([
			(accountName
				cover: (119 to: 129)
				declaredAt: (33 to: 43)) size ] valueCoveringAll:
				{131 to: 134}) +
				([
				(2 coverAll:
					{139 to: 139}) *
					(level
						cover: (141 to: 145)
						declaredAt: (141 to: 145)) ] valueCoveringAll:
					{140 to: 140}) ] valueCoveringAll:
				{136 to: 136})
		with:
			($  coverAll:
				{154 to: 155}) ] valueCoveringAll:
		{102 to: 108. 115 to: 117. 149 to: 153}.! !
!Behavior method!
accountName
	^ name
		cover: (17 to: 20)
		declaredAt: (17 to: 20).! !

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 23:00:32'!
PASSED!
!Behavior method!
named: anAccountName
	^ [
	([
	(self coverAll:
		{27 to: 30}) new ] valueCoveringAll:
		{32 to: 34}) initializeNamed:
		(anAccountName
			cover: (53 to: 65)
			declaredAt: (8 to: 20)) ] valueCoveringAll:
		{36 to: 51}.! !
!Behavior method!
initializeNamed: anAccountName
	(name _ anAccountName
		cover: (43 to: 55)
		declaredAt: (18 to: 30))
		cover: (35 to: 38)
		declaredAt: (35 to: 38).! !
!Behavior method!
named: anAccountName with: aReceptiveAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{51 to: 54}) new ] valueCoveringAll:
		{56 to: 58}.
	[
	cascadeReceiver initializeNamed:
		(anAccountName
			cover: (80 to: 92)
			declaredAt: (8 to: 20)) ] valueCoveringAll:
		{63 to: 78}.
	[
	cascadeReceiver add:
		(aReceptiveAccount
			cover: (103 to: 119)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{98 to: 101}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{125 to: 132} ] value.! !
!Behavior method!
affectReportWithReceptiveAccount: aReceptiveAccount
	[
	(self coverAll:
		{55 to: 58}) addToReport:
		(aReceptiveAccount
			cover: (73 to: 89)
			declaredAt: (35 to: 51)) ] valueCoveringAll:
		{60 to: 71}.! !
!Behavior method!
accountName
	^ name
		cover: (17 to: 20)
		declaredAt: (17 to: 20).! !

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
named: anAccountName with: aReceptiveAccount with: anotherReceptiveAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{82 to: 85}) new ] valueCoveringAll:
		{87 to: 89}.
	[
	cascadeReceiver initializeNamed:
		(anAccountName
			cover: (111 to: 123)
			declaredAt: (8 to: 20)) ] valueCoveringAll:
		{94 to: 109}.
	[
	cascadeReceiver add:
		(aReceptiveAccount
			cover: (134 to: 150)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{129 to: 132}.
	[
	cascadeReceiver add:
		(anotherReceptiveAccount
			cover: (161 to: 183)
			declaredAt: (52 to: 74)) ] valueCoveringAll:
		{156 to: 159}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{189 to: 196} ] value.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{32 to: 35}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[
	cascadeReceiver add:
		(anAccount
			cover: (58 to: 66)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 56}.
	[
	cascadeReceiver add:
		(anotherAccount
			cover: (76 to: 89)
			declaredAt: (23 to: 36)) ] valueCoveringAll:
		{71 to: 74}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
for: aPortfolio
	^ [
	([
	(self coverAll:
		{22 to: 25}) new ] valueCoveringAll:
		{27 to: 29}) initializeFor:
		(aPortfolio
			cover: (46 to: 55)
			declaredAt: (6 to: 15)) ] valueCoveringAll:
		{31 to: 44}.! !
!Behavior method!
executeReport
	(report _ [
	(OrderedCollection
		cover: (28 to: 44)
		declaredAt: (28 to: 44)) new ] valueCoveringAll:
		{46 to: 48})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (54 to: 60)
		declaredAt: (54 to: 60)) affectReport:
		(self coverAll:
			{76 to: 79}) ] valueCoveringAll:
		{62 to: 74}.
	^ report
		cover: (86 to: 91)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReportWithPortfolio: aPortfolio
	[
	(self coverAll:
		{41 to: 44}) addToReport:
		(aPortfolio
			cover: (59 to: 68)
			declaredAt: (28 to: 37)) ] valueCoveringAll:
		{46 to: 57}.! !
!Behavior method!
addToReport: anAccount
	[
	(report
		cover: (26 to: 31)
		declaredAt: (26 to: 31)) add:
		([
		(self coverAll:
			{39 to: 42}) addLevelSpacesTo:
			([
			(anAccount
				cover: (62 to: 70)
				declaredAt: (14 to: 22)) accountName ] valueCoveringAll:
				{72 to: 82}) ] valueCoveringAll:
			{44 to: 60}) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
addLevelSpacesTo: aReportLine
	^ [
	(aReportLine
		cover: (34 to: 44)
		declaredAt: (19 to: 29))
		padded:
			(#left coverAll:
				{53 to: 57})
		to:
			([
			([
			(aReportLine
				cover: (63 to: 73)
				declaredAt: (19 to: 29)) size ] valueCoveringAll:
				{75 to: 78}) +
				([
				(2 coverAll:
					{83 to: 83}) *
					(level
						cover: (85 to: 89)
						declaredAt: (85 to: 89)) ] valueCoveringAll:
					{84 to: 84}) ] valueCoveringAll:
				{80 to: 80})
		with:
			($  coverAll:
				{98 to: 99}) ] valueCoveringAll:
		{46 to: 52. 59 to: 61. 93 to: 97}.! !
!Behavior method!
goUpALevelFrom: anAccount
	[
	(self coverAll:
		{29 to: 32}) addBalance:
		([
		(anAccount
			cover: (46 to: 54)
			declaredAt: (17 to: 25)) balance ] valueCoveringAll:
			{56 to: 62}) ] valueCoveringAll:
		{34 to: 44}.
	[
	super goUpALevelFrom:
		(anAccount
			cover: (88 to: 96)
			declaredAt: (17 to: 25)) ] valueCoveringAll:
		{72 to: 86}.! !
!Behavior method!
addBalance: aBalance
	| balance |
	(balance _ [
	(self coverAll:
		{50 to: 53}) addLevelSpacesTo:
		([
		('Balance = ' coverAll:
			{74 to: 85}) ,
			([
			(aBalance
				cover: (87 to: 94)
				declaredAt: (13 to: 20)) asString ] valueCoveringAll:
				{96 to: 103}) ] valueCoveringAll:
			{86 to: 86}) ] valueCoveringAll:
		{55 to: 71})
		cover: (39 to: 45)
		declaredAt: (26 to: 32).
	[
	(report
		cover: (110 to: 115)
		declaredAt: (110 to: 115)) add:
		(balance
			cover: (122 to: 128)
			declaredAt: (26 to: 32)) ] valueCoveringAll:
		{117 to: 120}.! !

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
affectReportWithReceptiveAccount: aReceptiveAccount
	[
	(self coverAll:
		{55 to: 58}) addToReport:
		(aReceptiveAccount
			cover: (73 to: 89)
			declaredAt: (35 to: 51)) ] valueCoveringAll:
		{60 to: 71}.! !

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
affectReportWithDeposit: aDeposit
	| line |
	(line _ [
	(self coverAll:
		{55 to: 58}) addLevelSpacesTo:
		([
		('Deposito por ' coverAll:
			{79 to: 93}) ,
			([
			([
			(aDeposit
				cover: (95 to: 102)
				declaredAt: (26 to: 33)) value ] valueCoveringAll:
				{104 to: 108}) asString ] valueCoveringAll:
				{110 to: 117}) ] valueCoveringAll:
			{94 to: 94}) ] valueCoveringAll:
		{60 to: 76})
		cover: (47 to: 50)
		declaredAt: (39 to: 42).
	[
	(report
		cover: (122 to: 127)
		declaredAt: (122 to: 127)) add:
		(line
			cover: (134 to: 137)
			declaredAt: (39 to: 42)) ] valueCoveringAll:
		{129 to: 132}.! !
!Behavior method!
affectReportWithWithdraw: aWithdraw
	| line |
	(line _ [
	(self coverAll:
		{57 to: 60}) addLevelSpacesTo:
		([
		('Extraccion por ' coverAll:
			{81 to: 97}) ,
			([
			([
			(aWithdraw
				cover: (99 to: 107)
				declaredAt: (27 to: 35)) value ] valueCoveringAll:
				{109 to: 113}) asString ] valueCoveringAll:
				{115 to: 122}) ] valueCoveringAll:
			{98 to: 98}) ] valueCoveringAll:
		{62 to: 78})
		cover: (49 to: 52)
		declaredAt: (41 to: 44).
	[
	(report
		cover: (127 to: 132)
		declaredAt: (127 to: 132)) add:
		(line
			cover: (139 to: 142)
			declaredAt: (41 to: 44)) ] valueCoveringAll:
		{134 to: 137}.! !
!Behavior method!
affectReportWithTransferWithdraw: aTransferWithdraw
	| line |
	(line _ [
	(self coverAll:
		{73 to: 76}) addLevelSpacesTo:
		([
		('Salida por transferencia de ' coverAll:
			{97 to: 126}) ,
			([
			([
			(aTransferWithdraw
				cover: (128 to: 144)
				declaredAt: (35 to: 51)) value ] valueCoveringAll:
				{146 to: 150}) asString ] valueCoveringAll:
				{152 to: 159}) ] valueCoveringAll:
			{127 to: 127}) ] valueCoveringAll:
		{78 to: 94})
		cover: (65 to: 68)
		declaredAt: (57 to: 60).
	[
	(report
		cover: (164 to: 169)
		declaredAt: (164 to: 169)) add:
		(line
			cover: (176 to: 179)
			declaredAt: (57 to: 60)) ] valueCoveringAll:
		{171 to: 174}.! !
!Behavior method!
affectReportWithTransferDeposit: aTransferDeposit
	| line |
	(line _ [
	(self coverAll:
		{71 to: 74}) addLevelSpacesTo:
		([
		('Entrada por transferencia de ' coverAll:
			{95 to: 125}) ,
			([
			([
			(aTransferDeposit
				cover: (127 to: 142)
				declaredAt: (34 to: 49)) value ] valueCoveringAll:
				{144 to: 148}) asString ] valueCoveringAll:
				{150 to: 157}) ] valueCoveringAll:
			{126 to: 126}) ] valueCoveringAll:
		{76 to: 92})
		cover: (63 to: 66)
		declaredAt: (55 to: 58).
	[
	(report
		cover: (162 to: 167)
		declaredAt: (162 to: 167)) add:
		(line
			cover: (174 to: 177)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{169 to: 172}.! !

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
executeReport
	(report _ 0 coverAll:
		{28 to: 28})
		cover: (18 to: 23)
		declaredAt: (18 to: 23).
	[
	(account
		cover: (32 to: 38)
		declaredAt: (32 to: 38)) affectReport:
		(self coverAll:
			{54 to: 57}) ] valueCoveringAll:
		{40 to: 52}.
	^ report
		cover: (64 to: 69)
		declaredAt: (18 to: 23).! !
!Behavior method!
affectReportWithReceptiveAccount: aReceptiveAccount
	^ self.! !

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
affectReportWithTransferWithdraw: aTransferWithdraw
	^ (report _ [
	(report
		cover: (57 to: 62)
		declaredAt: (57 to: 62)) -
		([
		(aTransferWithdraw
			cover: (76 to: 92)
			declaredAt: (35 to: 51)) value ] valueCoveringAll:
			{94 to: 98}) ] valueCoveringAll:
		{74 to: 74})
		cover: (67 to: 72)
		declaredAt: (57 to: 62).! !
!Behavior method!
affectReportWithTransferDeposit: aTransferDeposit
	^ (report _ [
	(report
		cover: (55 to: 60)
		declaredAt: (55 to: 60)) +
		([
		(aTransferDeposit
			cover: (74 to: 89)
			declaredAt: (34 to: 49)) value ] valueCoveringAll:
			{91 to: 95}) ] valueCoveringAll:
		{72 to: 72})
		cover: (65 to: 70)
		declaredAt: (55 to: 60).! !

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
affectReportWithDeposit: aDeposit
	^ self.! !
!Behavior method!
affectReportWithWithdraw: aWithdraw
	^ self.! !

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
affectReportWithPortfolio: aPortfolio
	^ self.! !

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 23:00:33'!
PASSED!
!Behavior method!
sentTransaction
	^ sentTransaction
		cover: (20 to: 34)
		declaredAt: (20 to: 34).! !
!Behavior method!
receivedTransaction
	^ receivedTransaction
		cover: (24 to: 42)
		declaredAt: (24 to: 42).! !

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 23:00:34'!
PASSED!
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
transfer
	^ transfer
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 23:00:34'!
PASSED!
!Behavior method!
cantHaveSameAccountAtBothEnds
	^ 'No se puede poner una misma cuenta como emisora y receptora de la misma transferencia.' coverAll:
		{35 to: 122}.! !

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 23:00:34'!
PASSED!
!Behavior method!
amountMustBePositive
	^ 'El monto de la transferencia debe ser mayor a cero' coverAll:
		{26 to: 77}.! !

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 23:00:34'!
PASSED!

!methodRemoval: Deposit #addToSpecialAccountSummary: stamp: 'AEC 5/29/2022 23:01:56'!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithDeposit: self!

!methodRemoval: TransferDeposit #addToSpecialAccountSummary: stamp: 'AEC 5/29/2022 23:02:02'!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithTransferDeposit: self!

!methodRemoval: TransferWithdraw #addToSpecialAccountSummary: stamp: 'AEC 5/29/2022 23:02:05'!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithTransferWithdraw: self!

!methodRemoval: Withdraw #addToSpecialAccountSummary: stamp: 'AEC 5/29/2022 23:02:09'!
addToSpecialAccountSummary: aSpecialAccountSummary

	aSpecialAccountSummary affectReportWithWithdraw: self!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 23:02:33' overrides: 50497796!
affectReportWithDeposit: aTransferDeposit! !

!methodRemoval: AccountTransaction #addToSpecialAccountSummary: stamp: 'AEC 5/29/2022 23:07:18'!
addToSpecialAccountSummary: aSpecialAccountSummary

	self subclassResponsibility !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 23:08:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 23:08:22'!
PASSED!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:09:40'!
test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio

	| portfolio portfolioStructure |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito')! !

!methodRemoval: PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/29/2022 23:09:45'!
test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio

	| portfolio portfolioStructure |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito')!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:10:06'!
test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio

	| portfolio portfolioStructure |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito')! !

!methodRemoval: PortfolioStructureTest #test01XXX stamp: 'AEC 5/29/2022 23:10:06'!
test01XXX

	| portfolio portfolioStructure |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito')!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:12:13'!
test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames

	| portfolio portfolioStructure account |
	
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito')! !

!methodRemoval: PortfolioStructureTest #test02XXX stamp: 'AEC 5/29/2022 23:12:13'!
test02XXX

	| portfolio portfolioStructure account |
	
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito')!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:13:19'!
test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames

	| portfolio portfolioStructure childPortfolio |	
	
	childPortfolio := Portfolio named: 'Portfolio de Pepe' with: (ReceptiveAccount named: 'Cuenta de Pepe').
	portfolio := Portfolio named: 'Portfolio de Tito' with: childPortfolio with: (ReceptiveAccount named: 'Cuenta de Tito').
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Portfolio de Pepe' with: '    Cuenta de Pepe' with: '  Cuenta de Tito')! !

!methodRemoval: PortfolioStructureTest #test03XXX stamp: 'AEC 5/29/2022 23:13:19'!
test03XXX

	| portfolio portfolioStructure childPortfolio |	
	
	childPortfolio := Portfolio named: 'Portfolio de Pepe' with: (ReceptiveAccount named: 'Cuenta de Pepe').
	portfolio := Portfolio named: 'Portfolio de Tito' with: childPortfolio with: (ReceptiveAccount named: 'Cuenta de Tito').
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: portfolioStructure executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Portfolio de Pepe' with: '    Cuenta de Pepe' with: '  Cuenta de Tito')!
!SpecialAccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:14:16'!
test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented

	| portfolio portfolioSpecialAccountSummary |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	self assert: portfolioSpecialAccountSummary executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Balance = 0')! !

!methodRemoval: SpecialAccountSummaryTest #test01XXX stamp: 'AEC 5/29/2022 23:14:16'!
test01XXX

	| portfolio portfolioSpecialAccountSummary |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	self assert: portfolioSpecialAccountSummary executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Balance = 0')!
!SpecialAccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:14:54'!
test02SpecialAccountSummaryForPortfolioWithAccountsIncludesAccountNamesWithItsIndentedBalances

	| portfolio portfolioSpecialAccountSummary |
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: (ReceptiveAccount named: 'Cuenta de Tito').
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	self assert: portfolioSpecialAccountSummary executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito' with: '    Balance = 0' with: '  Balance = 0')! !

!methodRemoval: SpecialAccountSummaryTest #test02XXX stamp: 'AEC 5/29/2022 23:14:54'!
test02XXX

	| portfolio portfolioSpecialAccountSummary |
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: (ReceptiveAccount named: 'Cuenta de Tito').
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	self assert: portfolioSpecialAccountSummary executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito' with: '    Balance = 0' with: '  Balance = 0')!
!SpecialAccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:15:34'!
test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances

	| portfolio portfolioSpecialAccountSummary |
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: (ReceptiveAccount named: 'Cuenta de Tito').
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	self assert: portfolioSpecialAccountSummary executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito' with: '    Balance = 0' with: '  Balance = 0')! !

!methodRemoval: SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/29/2022 23:15:34'!
test02SpecialAccountSummaryForPortfolioWithAccountsIncludesAccountNamesWithItsIndentedBalances

	| portfolio portfolioSpecialAccountSummary |
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: (ReceptiveAccount named: 'Cuenta de Tito').
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	self assert: portfolioSpecialAccountSummary executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito' with: '    Balance = 0' with: '  Balance = 0')!
!SpecialAccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:16:21'!
test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions

	| portfolio portfolioSpecialAccountSummary account expectedResult otherAccount |
	
	otherAccount := ReceptiveAccount named: 'Cuenta de Juana'.
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	Deposit register: 100 on: account.
	Withdraw register: 10 on: account.
	Transfer from: account to: otherAccount for: 50.
	Transfer from: otherAccount to: account for: 25.
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	expectedResult := OrderedCollection new
						add: 'Portfolio de Tito'; 
						add: '  Cuenta de Tito'; 
						add: '    Deposito por 100';
						add: '    Extraccion por 10';
						add: '    Salida por transferencia de 50';
						add: '    Entrada por transferencia de 25';
						add: '    Balance = 65'; 
						add: '  Balance = 65'; yourself.
						
	self assert: portfolioSpecialAccountSummary executeReport equals: expectedResult! !

!methodRemoval: SpecialAccountSummaryTest #test03XXX stamp: 'AEC 5/29/2022 23:16:22'!
test03XXX

	| portfolio portfolioSpecialAccountSummary account expectedResult otherAccount |
	
	otherAccount := ReceptiveAccount named: 'Cuenta de Juana'.
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	Deposit register: 100 on: account.
	Withdraw register: 10 on: account.
	Transfer from: account to: otherAccount for: 50.
	Transfer from: otherAccount to: account for: 25.
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	portfolioSpecialAccountSummary := SpecialAccountSummary for: portfolio.
	
	expectedResult := OrderedCollection new
						add: 'Portfolio de Tito'; 
						add: '  Cuenta de Tito'; 
						add: '    Deposito por 100';
						add: '    Extraccion por 10';
						add: '    Salida por transferencia de 50';
						add: '    Entrada por transferencia de 25';
						add: '    Balance = 65'; 
						add: '  Balance = 65'; yourself.
						
	self assert: portfolioSpecialAccountSummary executeReport equals: expectedResult!
!SpecialAccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:17:45' prior: 50501839!
test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions

	| portfolio account expectedResult otherAccount |
	
	otherAccount := ReceptiveAccount named: 'Cuenta de Juana'.
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	Deposit register: 100 on: account.
	Withdraw register: 10 on: account.
	Transfer from: account to: otherAccount for: 50.
	Transfer from: otherAccount to: account for: 25.
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	expectedResult := OrderedCollection new
						add: 'Portfolio de Tito'; 
						add: '  Cuenta de Tito'; 
						add: '    Deposito por 100';
						add: '    Extraccion por 10';
						add: '    Salida por transferencia de 50';
						add: '    Entrada por transferencia de 25';
						add: '    Balance = 65'; 
						add: '  Balance = 65'; yourself.
						
	self assert: (SpecialAccountSummary for: portfolio) executeReport equals: expectedResult! !
!SpecialAccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:18:25'!
specialAccountSummaryFor: portfolio

	^ (SpecialAccountSummary for: portfolio) executeReport! !
!SpecialAccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:18:25' prior: 50501908!
test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions

	| portfolio account expectedResult otherAccount |
	
	otherAccount := ReceptiveAccount named: 'Cuenta de Juana'.
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	Deposit register: 100 on: account.
	Withdraw register: 10 on: account.
	Transfer from: account to: otherAccount for: 50.
	Transfer from: otherAccount to: account for: 25.
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	expectedResult := OrderedCollection new
						add: 'Portfolio de Tito'; 
						add: '  Cuenta de Tito'; 
						add: '    Deposito por 100';
						add: '    Extraccion por 10';
						add: '    Salida por transferencia de 50';
						add: '    Entrada por transferencia de 25';
						add: '    Balance = 65'; 
						add: '  Balance = 65'; yourself.
						
	self assert: (self specialAccountSummaryFor: portfolio) equals: expectedResult! !
!SpecialAccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:19:25' prior: 50501799!
test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances

	| portfolio expectedResult |
	
	portfolio := Portfolio named: 'Portfolio de Tito' with: (ReceptiveAccount named: 'Cuenta de Tito').
	
	expectedResult := OrderedCollection with: 'Portfolio de Tito' 
									with: '  Cuenta de Tito' 
									with: '    Balance = 0' 
									with: '  Balance = 0'.
	
	self assert: (self specialAccountSummaryFor: portfolio) equals: expectedResult! !
!SpecialAccountSummaryTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:20:04' prior: 50501736!
test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented

	| portfolio |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	
	self assert: (self specialAccountSummaryFor: portfolio) equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Balance = 0')! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:21:04' prior: 50501694!
test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames

	| portfolio childPortfolio |	
	
	childPortfolio := Portfolio named: 'Portfolio de Pepe' with: (ReceptiveAccount named: 'Cuenta de Pepe').
	portfolio := Portfolio named: 'Portfolio de Tito' with: childPortfolio with: (ReceptiveAccount named: 'Cuenta de Tito').
	
	self assert: (PortfolioStructure for: portfolio) executeReport equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Portfolio de Pepe' with: '    Cuenta de Pepe' with: '  Cuenta de Tito')! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:21:24'!
portfolioStructureFor: portfolio

	^ (PortfolioStructure for: portfolio) executeReport! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:21:24' prior: 50502012!
test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames

	| portfolio childPortfolio |	
	
	childPortfolio := Portfolio named: 'Portfolio de Pepe' with: (ReceptiveAccount named: 'Cuenta de Pepe').
	portfolio := Portfolio named: 'Portfolio de Tito' with: childPortfolio with: (ReceptiveAccount named: 'Cuenta de Tito').
	
	self assert: (self portfolioStructureFor: portfolio) equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Portfolio de Pepe' with: '    Cuenta de Pepe' with: '  Cuenta de Tito')! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:22:11' prior: 50502038!
test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames

	| portfolio childPortfolio expectedResult |	
	
	childPortfolio := Portfolio named: 'Portfolio de Pepe' with: (ReceptiveAccount named: 'Cuenta de Pepe').
	portfolio := Portfolio named: 'Portfolio de Tito' with: childPortfolio with: (ReceptiveAccount named: 'Cuenta de Tito').
	
	expectedResult := OrderedCollection with: 'Portfolio de Tito' 
									with: '  Portfolio de Pepe' 
									with: '    Cuenta de Pepe' 
									with: '  Cuenta de Tito'.
	
	self assert: (self portfolioStructureFor: portfolio) equals: expectedResult! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:23:17' prior: 50501664!
test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames

	| portfolio portfolioStructure account |
	
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	portfolioStructure := PortfolioStructure for: portfolio.
	
	self assert: (self portfolioStructureFor: portfolio) equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito')! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:23:22' prior: 50502081!
test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames

	| portfolio account |
	
	account := ReceptiveAccount named: 'Cuenta de Tito'.
	portfolio := Portfolio named: 'Portfolio de Tito' with: account.
	
	self assert: (self portfolioStructureFor: portfolio) equals: (OrderedCollection with: 'Portfolio de Tito' with: '  Cuenta de Tito')! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'AEC 5/29/2022 23:23:31' prior: 50501640!
test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio

	| portfolio |
	
	portfolio := Portfolio named: 'Portfolio de Tito'.
	
	self assert: (self portfolioStructureFor: portfolio) equals: (OrderedCollection with: 'Portfolio de Tito')! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 23:23:55'!
PASSED!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 23:30:59' prior: 50474627!
with: anAccount

	^self named: '' with: anAccount! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AEC 5/29/2022 23:31:27' prior: 50474632!
with: anAccount with: anotherAccount

	^self named: '' with: anAccount with: anotherAccount! !
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:32:14' overrides: 16785646!
new

	^super new named: ''! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:33:01' overrides: 16785646!
new

	^super new named: ''! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:33:13'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 23:33:13'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 23:33:13'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 23:33:13'!
ERROR!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:33:13'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioStructureTest #test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 23:33:14'!
ERROR!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:33:25'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 23:33:25'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 23:33:25'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 23:33:25'!
ERROR!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:33:25'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 23:33:25'!
ERROR!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 23:33:25'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:34:42' prior: 50502332 overrides: 16785646!
new

	super new.
	^self named: ''! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:35:21' prior: 50502558 overrides: 16785646!
new

	^(super new) named: ''! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:35:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:35:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:35:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:35:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:35:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:35:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:35:27'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:36:06' prior: 50502564 overrides: 16785646!
new

	^self named: ''! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:36:42' prior: 50496025!
named: anAccountName 

	^ super new initializeNamed: anAccountName! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:36:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:36:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:36:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:36:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:36:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:36:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:36:47'!
PASSED!
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:38:13' prior: 50502327 overrides: 16785646!
new

	^self named: ''! !
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:38:40' prior: 50495975!
named: anAccountName
	
	^ super new initializeNamed: anAccountName! !
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:39:11' prior: 50496079!
named: anAccountName with: aReceptiveAccount 
	
	^super new 
		initializeNamed: anAccountName; 
		add: aReceptiveAccount; 
		yourself! !
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:39:16' prior: 50496545!
named: anAccountName with: aReceptiveAccount with: anotherReceptiveAccount 
 	
	^super new 
		initializeNamed: anAccountName; 
		add: aReceptiveAccount; 
		add: anotherReceptiveAccount; 
		yourself! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 23:39:29'!
PASSED!
!ReceptiveAccount class methodsFor: 'nil' stamp: 'AEC 5/29/2022 23:40:49'!
defaultName
	
	^'Cuenta sin nombre'! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:41:03' prior: 50502596 overrides: 16785646!
new

	^self named: self defaultName! !
!Portfolio class methodsFor: 'nil' stamp: 'AEC 5/29/2022 23:41:28'!
defaultName

	^'Portfolio sin nombre'! !
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:41:56' prior: 50502634 overrides: 16785646!
new

	^self named: self defaultName ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:42:02' prior: 50502315!
with: anAccount

	^self named: self defaultName with: anAccount! !
!Portfolio class methodsFor: 'instance creation' stamp: 'AEC 5/29/2022 23:42:06' prior: 50502320!
with: anAccount with: anotherAccount

	^self named: self defaultName with: anAccount with: anotherAccount! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:42:11'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 23:42:11'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 23:42:11'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 23:42:11'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:42:11'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 23:42:11'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 23:42:11'!
PASSED!

!testRun: #PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/29/2022 23:42:11'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames stamp: 'AEC 5/29/2022 23:42:11'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames stamp: 'AEC 5/29/2022 23:42:11'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 23:42:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 23:42:12'!
PASSED!
!AccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:47:35' prior: 50492614 overrides: 50497796!
affectReportWithDeposit: aDeposit

	report add: ('Deposito por ',aDeposit value asString)! !
!AccountSummary methodsFor: 'nil' stamp: 'AEC 5/29/2022 23:50:36'!
addToReport: aTransaction beginningWith: aPrefix

	report add: (aPrefix,aTransaction value asString)! !
!AccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:51:07' prior: 50503076 overrides: 50497796!
affectReportWithDeposit: aDeposit

	self addToReport: aDeposit beginningWith: 'Deposito por '! !
!AccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:51:29' prior: 50492652 overrides: 50497801!
affectReportWithTransferDeposit: aTransferDeposit

	self addToReport: aTransferDeposit beginningWith: 'Entrada por transferencia de '! !
!AccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:51:48' prior: 50492698 overrides: 50497807!
affectReportWithTransferWithdraw: aTransferWithdraw

	self addToReport: aTransferWithdraw beginningWith: 'Salida por transferencia de '! !
!AccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:52:42' prior: 50492745 overrides: 50497813!
affectReportWithWithdraw: aWithdraw

	self addToReport: aWithdraw beginningWith: 'Extraccion por '! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:52:46'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 23:52:47'!
PASSED!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:55:18' prior: 50498043 overrides: 50497801!
affectReportWithTransferDeposit: aTransferDeposit

	self addToReport: ('Entrada por transferencia de ',aTransferDeposit value asString)! !
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:55:34' prior: 50498069 overrides: 50497807!
affectReportWithTransferWithdraw: aTransferWithdraw

	self addToReport: ('Salida por transferencia de ',aTransferWithdraw value asString)! !
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:55:51' prior: 50498095 overrides: 50497813!
affectReportWithWithdraw: aWithdraw

	self addToReport: ('Extraccion por ',aWithdraw value asString)! !
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:56:07' prior: 50497969 overrides: 50497796!
affectReportWithDeposit: aDeposit

	self addToReport: ('Deposito por ',aDeposit value asString)! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/29/2022 23:56:11'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 23:56:11'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 23:56:12'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 23:56:12'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 23:56:12'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 23:56:12'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/29/2022 23:56:12'!
ERROR!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:56:43' prior: 50497991 overrides: 50497791!
affectReportWithPortfolio: aPortfolio

	self addToReport: aPortfolio accountName! !
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/29/2022 23:56:49' prior: 50498016 overrides: 50497785!
affectReportWithReceptiveAccount: aReceptiveAccount

	self addToReport: aReceptiveAccount accountName ! !
!SpecialAccountSummary methodsFor: 'executing - private' stamp: 'AEC 5/29/2022 23:57:01' prior: 50496983!
addToReport: aLine

	report add: (self addLevelSpacesTo: aLine)! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:57:08'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/29/2022 23:57:08'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/29/2022 23:57:08'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/29/2022 23:57:08'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/29/2022 23:57:09'!
PASSED!
!AccountSummary methodsFor: 'executing - private' stamp: 'AEC 5/30/2022 00:00:10'!
prefixValue: aNumber withString: aPrefix

	^(aPrefix,aNumber asString)! !
!AccountSummary methodsFor: 'executing - private' stamp: 'AEC 5/30/2022 00:00:31' prior: 50503081!
addToReport: aTransaction beginningWith: aPrefix

	report add: (self prefixValue: aTransaction value withString: aPrefix)! !
!AccountSummary methodsFor: 'executing - private' stamp: 'AEC 5/30/2022 00:01:12' prior: 50488592!
addAccountBalanceLine

	^ report add: (self prefixValue: account balance withString: 'Balance = ')! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/30/2022 00:01:14'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/30/2022 00:01:14'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/30/2022 00:01:14'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/30/2022 00:01:14'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/30/2022 00:01:14'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/30/2022 00:01:14'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/30/2022 00:01:14'!
PASSED!

!testRun: #PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/30/2022 00:01:14'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames stamp: 'AEC 5/30/2022 00:01:14'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/30/2022 00:01:15'!
PASSED!
!AccountReport methodsFor: 'executing - private' stamp: 'AEC 5/30/2022 00:01:25'!
prefixValue: aNumber withString: aPrefix

	^(aPrefix,aNumber asString)! !

!methodRemoval: AccountSummary #prefixValue:withString: stamp: 'AEC 5/30/2022 00:01:25'!
prefixValue: aNumber withString: aPrefix

	^(aPrefix,aNumber asString)!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/30/2022 00:02:01' prior: 50503333 overrides: 50497796!
affectReportWithDeposit: aDeposit

	self addToReport: (self prefixValue: aDeposit value withString: 'Deposito por ')! !
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/30/2022 00:02:39' prior: 50503309 overrides: 50497801!
affectReportWithTransferDeposit: aTransferDeposit

	self addToReport: (self prefixValue: aTransferDeposit value withString: 'Deposito por ')! !
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/30/2022 00:03:19' prior: 50503317 overrides: 50497807!
affectReportWithTransferWithdraw: aTransferWithdraw

	self addToReport: (self prefixValue: aTransferWithdraw value withString: 'Salida por transferencia de ')! !
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/30/2022 00:03:49' prior: 50503326 overrides: 50497813!
affectReportWithWithdraw: aWithdraw

	self addToReport: (self prefixValue: aWithdraw value withString: 'Extraccion por ')! !
!SpecialAccountSummary methodsFor: 'executing - private' stamp: 'AEC 5/30/2022 00:04:33' prior: 50496967!
addBalance: aBalance

	| balance |
	
	balance := self addLevelSpacesTo: (self prefixValue: aBalance withString: 'Balance = ').
	
	report add: balance
	! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/30/2022 00:05:47'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/30/2022 00:05:47'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/30/2022 00:05:47'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/30/2022 00:05:47'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/30/2022 00:05:48'!
FAILURE!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/30/2022 00:05:48'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/30/2022 00:05:48'!
FAILURE!

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/30/2022 00:06:00'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/30/2022 00:06:00'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/30/2022 00:06:00'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/30/2022 00:06:00'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/30/2022 00:06:00'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/30/2022 00:06:00'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/30/2022 00:06:00'!
PASSED!

!testRun: #PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/30/2022 00:06:00'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/30/2022 00:06:01'!
FAILURE!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/30/2022 00:06:01'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/30/2022 00:06:01'!
FAILURE!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/30/2022 00:06:31' prior: 50503976 overrides: 50497801!
affectReportWithTransferDeposit: aTransferDeposit

	self addToReport: (self prefixValue: aTransferDeposit value withString: 'Entrada por transferencia de')! !

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/30/2022 00:06:42'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/30/2022 00:06:42'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/30/2022 00:06:42'!
FAILURE!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/30/2022 00:06:42'!
FAILURE!
!SpecialAccountSummary methodsFor: 'executing' stamp: 'AEC 5/30/2022 00:08:01' prior: 50504404 overrides: 50497801!
affectReportWithTransferDeposit: aTransferDeposit

	self addToReport: (self prefixValue: aTransferDeposit value withString: 'Entrada por transferencia de ')! !

!testRun: #AccountSummaryTest #test01AccountWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithOneDepositSummaryIncludesDepositAndBalanceLines stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawSummaryIncludesDepositWithdrawAndBalanceLines stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountsBeingPartOfATransferIncludeCorrectPartOfThatTransfer stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioWithNoTransactionsSummaryOnlyIncludesBalanceZeroLine stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfPortfolioWithEmptyChildPortfolioIsASingleBalanceZeroLine stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioSummaryIncludesTransactionsFromChildAccounts stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioStructureTest #test01PortfolioStructureForEmptyPortfolioIsTheNameOfThePortfolio stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioStructureForPortfolioWithAccountsIncludesIndentedAccountNames stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioStructureForPortfolioWithPortfoliosAndAccountsIncludesIndentedPortfolioNames stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AEC 5/30/2022 00:08:02'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test01SpecialAccountSummaryForEmptyPortfolioIsTheNameOfThePortfolioWithItsBalanceIndented stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test02SpecialAccountSummaryForPortfolioWithEmptyAccountsIncludesAccountNamesWithItsIndentedBalances stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #SpecialAccountSummaryTest #test03SpecialAccountSummaryForPortfolioWithAccountsWithTransactionsIncludesIndentedTransactions stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForAccountWithNoTransactionsIs0 stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAccountsInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAccountsInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForEmptyPortfolioIs0 stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransfer stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForPortfolioWithAccountInvolvedInATransferConsidersTheTransferButNotOtherTransactions stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsImpactsBothBalances stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #TransferTest #test02EachAccountRegistersItsPartOfTheTransfer stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromEndsOfTransferToTheTransfer stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #TransferTest #test04CantMakeATransferWithSameAccountAtBothEnds stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

!testRun: #TransferTest #test05CantMakeATransferWithNonPositiveAmount stamp: 'AEC 5/30/2022 00:08:03'!
PASSED!

----QUIT----(30 May 2022 00:08:14) CuisUniversity-5096.image priorSource: 5240904!
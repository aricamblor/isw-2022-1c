
!WorkingMerchantProcessor methodsFor: 'accessing' stamp: 'fm 6/12/2022 11:59:23'!
amountToDebit

	^ amountToDebit! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 11:59:23' prior: 50476633!
test08AmountIsSentFormattedToMerchantProcessor
	
	| cart cashier salesList merchantProcessor |
	
	cart := self defaultCart.
	merchantProcessor := WorkingMerchantProcessor new.
	
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	
	cashier checkout: cart withCard: self validCreditCard.
	
	self assert: '10.00' equals: merchantProcessor amountToDebit! !

!methodRemoval: WorkingMerchantProcessor #amountReceived stamp: 'fm 6/12/2022 11:59:23'!
amountReceived

	^ amountToDebit!
!Behavior method!
for: aCatalog
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aCatalog
			cover: (44 to: 51)
			declaredAt: (6 to: 13)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aCatalog
	(books _ [
	(Bag
		cover: (36 to: 38)
		declaredAt: (36 to: 38)) new ] valueCoveringAll:
		{40 to: 42})
		cover: (27 to: 31)
		declaredAt: (27 to: 31).
	(catalog _ aCatalog
		cover: (57 to: 64)
		declaredAt: (16 to: 23))
		cover: (46 to: 52)
		declaredAt: (46 to: 52).! !
!Behavior method!
isEmpty
	^ [
	(books
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
addBook: aBookISBN quantity: aQuantity
	[
	(self coverAll:
		{44 to: 47}) assertBookIsInCatalog:
		(aBookISBN
			cover: (72 to: 80)
			declaredAt: (10 to: 18)) ] valueCoveringAll:
		{49 to: 70}.
	[
	(self coverAll:
		{84 to: 87}) assertQuantityIsValid:
		(aQuantity
			cover: (112 to: 120)
			declaredAt: (30 to: 38)) ] valueCoveringAll:
		{89 to: 110}.
	[
	(books
		cover: (124 to: 128)
		declaredAt: (124 to: 128))
		add:
			(aBookISBN
				cover: (135 to: 143)
				declaredAt: (10 to: 18))
		withOccurrences:
			(aQuantity
				cover: (162 to: 170)
				declaredAt: (30 to: 38)) ] valueCoveringAll:
		{130 to: 133. 145 to: 160}.! !
!Behavior method!
assertBookIsInCatalog: aBookISBN
	[
	([
	(catalog
		cover: (37 to: 43)
		declaredAt: (37 to: 43)) includesKey:
		(aBookISBN
			cover: (58 to: 66)
			declaredAt: (24 to: 32)) ] valueCoveringAll:
		{45 to: 56}) ifFalse: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			([
			(self coverAll:
				{90 to: 93}) class ] valueCoveringAll:
				{95 to: 99}) bookNotInCatalogErrorDescription ] valueCoveringAll:
				{101 to: 132}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 76}.! !
!Behavior method!
assertQuantityIsValid: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) >
		(0 coverAll:
			{48 to: 48}) ] valueCoveringAll:
		{46 to: 46}) ifFalse: [
		[
		(self coverAll:
			{59 to: 62}) error:
			([
			([
			(self coverAll:
				{71 to: 74}) class ] valueCoveringAll:
				{76 to: 80}) nonPositiveBookQuantityErrorDescription ] valueCoveringAll:
				{82 to: 120}) ] valueCoveringAll:
			{64 to: 69} ]] valueCoveringAll:
		{50 to: 57}.
	[
	([
	(aQuantity
		cover: (126 to: 134)
		declaredAt: (24 to: 32)) isInteger ] valueCoveringAll:
		{136 to: 144}) ifFalse: [
		[
		(self coverAll:
			{155 to: 158}) error:
			([
			([
			(self coverAll:
				{167 to: 170}) class ] valueCoveringAll:
				{172 to: 176}) nonIntegerBookQuantityErrorDescription ] valueCoveringAll:
				{178 to: 215}) ] valueCoveringAll:
			{160 to: 165} ]] valueCoveringAll:
		{146 to: 153}.! !
!Behavior method!
hasBook: aBookISBN
	^ [
	(books
		cover: (25 to: 29)
		declaredAt: (25 to: 29)) includes:
		(aBookISBN
			cover: (41 to: 49)
			declaredAt: (10 to: 18)) ] valueCoveringAll:
		{31 to: 39}.! !

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
quantityOfBooksWithISBN: aBookISBN
	^ [
	(books
		cover: (42 to: 46)
		declaredAt: (42 to: 46)) occurrencesOf:
		(aBookISBN
			cover: (63 to: 71)
			declaredAt: (26 to: 34)) ] valueCoveringAll:
		{48 to: 61}.! !

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'fm 6/12/2022 12:01:16'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
bookNotInCatalogErrorDescription
	^ 'El libro no se encuentra en el catalogo.' coverAll:
		{38 to: 79}.! !

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
nonPositiveBookQuantityErrorDescription
	^ 'La cantidad de libros a agregar no es positiva.' coverAll:
		{45 to: 93}.! !

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
nonIntegerBookQuantityErrorDescription
	^ 'La cantidad de libros a agregar no es un numero entero.' coverAll:
		{44 to: 100}.! !

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
listContents
	^ [
	(books
		cover: (18 to: 22)
		declaredAt: (18 to: 22)) sortedElements ] valueCoveringAll:
		{24 to: 37}.! !

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'fm 6/12/2022 12:01:16'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
emptyOwnerNameErrorDescription
	^ 'El nombre de titular de la tarjeta esta vacio' coverAll:
		{37 to: 83}.! !
!Behavior method!
for: anOwner number: aCreditCardNumber expiringOn: aGregorianMonthOfYear
	[
	(self coverAll:
		{77 to: 80}) assertNumberHas16Digits:
		(aCreditCardNumber
			cover: (107 to: 123)
			declaredAt: (22 to: 38)) ] valueCoveringAll:
		{82 to: 105}.
	[
	(self coverAll:
		{127 to: 130}) assertOwnerNameIsNotBlank:
		(anOwner
			cover: (159 to: 165)
			declaredAt: (6 to: 12)) ] valueCoveringAll:
		{132 to: 157}.
	^ [
	([
	(self coverAll:
		{173 to: 176}) new ] valueCoveringAll:
		{178 to: 180})
		initializeFor:
			(anOwner
				cover: (197 to: 203)
				declaredAt: (6 to: 12))
		number:
			(aCreditCardNumber
				cover: (213 to: 229)
				declaredAt: (22 to: 38))
		expiringOn:
			(aGregorianMonthOfYear
				cover: (243 to: 263)
				declaredAt: (52 to: 72)) ] valueCoveringAll:
		{182 to: 195. 205 to: 211. 231 to: 241}.! !
!Behavior method!
assertNumberHas16Digits: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (48 to: 64)
		declaredAt: (26 to: 42)) numberOfDigitsInBase:
		(10 coverAll:
			{88 to: 89}) ] valueCoveringAll:
		{66 to: 86}) =
		(16 coverAll:
			{94 to: 95}) ] valueCoveringAll:
		{92 to: 92}) ifFalse: [
		[
		(self coverAll:
			{108 to: 111}) error:
			([
			(self coverAll:
				{120 to: 123}) invalidNumberOfDigitsErrorDescription ] valueCoveringAll:
				{125 to: 161}) ] valueCoveringAll:
			{113 to: 118} ]] valueCoveringAll:
		{98 to: 105}.! !
!Behavior method!
assertOwnerNameIsNotBlank: anOwner
	[
	([
	([
	(anOwner
		cover: (38 to: 44)
		declaredAt: (28 to: 34)) withBlanksTrimmed ] valueCoveringAll:
		{46 to: 62}) isEmpty ] valueCoveringAll:
		{64 to: 70}) ifTrue: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(self coverAll:
				{93 to: 96}) emptyOwnerNameErrorDescription ] valueCoveringAll:
				{98 to: 127}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{72 to: 78}.! !

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
invalidNumberOfDigitsErrorDescription
	^ 'El numero de tarjeta no tiene 16 digitos.' coverAll:
		{43 to: 85}.! !

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
initialize
	(timesCalled _ 0 coverAll:
		{28 to: 29})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).! !
!Behavior method!
debitingTo: aMerchantProcessor
	^ [
	([
	(self coverAll:
		{36 to: 39}) new ] valueCoveringAll:
		{41 to: 43}) initializeDebitingTo:
		(aMerchantProcessor
			cover: (67 to: 84)
			declaredAt: (13 to: 30)) ] valueCoveringAll:
		{45 to: 65}.! !
!Behavior method!
initializeDebitingTo: aMerchantProcessor
	(merchantProcessor _ aMerchantProcessor
		cover: (67 to: 84)
		declaredAt: (23 to: 40))
		cover: (46 to: 62)
		declaredAt: (46 to: 62).! !
!Behavior method!
initializeFor: anOwner number: aCreditCardNumber expiringOn: aGregorianMonthOfYear
	(owner _ anOwner
		cover: (96 to: 102)
		declaredAt: (16 to: 22))
		cover: (87 to: 91)
		declaredAt: (87 to: 91).
	(number _ aCreditCardNumber
		cover: (116 to: 132)
		declaredAt: (32 to: 48))
		cover: (106 to: 111)
		declaredAt: (106 to: 111).
	(expirationMonthOfYear _ aGregorianMonthOfYear
		cover: (161 to: 181)
		declaredAt: (62 to: 82))
		cover: (136 to: 156)
		declaredAt: (136 to: 156).! !
!Behavior method!
checkout: aCart withCard: aCreditCard
	| price |
	[
	(self coverAll:
		{56 to: 59}) assertCartIsNotEmpty:
		(aCart
			cover: (83 to: 87)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{61 to: 81}.
	(price _ [
	(aCart
		cover: (100 to: 104)
		declaredAt: (11 to: 15)) value ] valueCoveringAll:
		{106 to: 110})
		cover: (91 to: 95)
		declaredAt: (45 to: 49).
	[
	([
	(aCreditCard
		cover: (115 to: 125)
		declaredAt: (27 to: 37)) isExpiredOn:
		([
		(FixedGregorianDate
			cover: (140 to: 157)
			declaredAt: (140 to: 157)) today ] valueCoveringAll:
			{159 to: 163}) ] valueCoveringAll:
		{127 to: 138}) ifTrue: [
		[
		(self coverAll:
			{174 to: 177}) error:
			([
			([
			(self coverAll:
				{186 to: 189}) class ] valueCoveringAll:
				{191 to: 195}) expiredCreditCardErrorDescription ] valueCoveringAll:
				{197 to: 229}) ] valueCoveringAll:
			{179 to: 184} ]] valueCoveringAll:
		{166 to: 172}.
	[
	(self coverAll:
		{234 to: 237}) assertNameIsValidToSendToMerchantProcessor:
		(aCreditCard
			cover: (283 to: 293)
			declaredAt: (27 to: 37)) ] valueCoveringAll:
		{239 to: 281}.
	[
	(self coverAll:
		{297 to: 300}) assertAmountIsValidToSendToMerchantProcessor:
		(price
			cover: (348 to: 352)
			declaredAt: (45 to: 49)) ] valueCoveringAll:
		{302 to: 346}.
	[
	(merchantProcessor
		cover: (358 to: 374)
		declaredAt: (358 to: 374))
		debit:
			([
			(self coverAll:
				{384 to: 387}) formatAmount:
				(price
					cover: (403 to: 407)
					declaredAt: (45 to: 49)) ] valueCoveringAll:
				{389 to: 401})
		from:
			(aCreditCard
				cover: (416 to: 426)
				declaredAt: (27 to: 37)) ] valueCoveringAll:
		{376 to: 381. 410 to: 414}.
	^ [
	([
	(aCart
		cover: (432 to: 436)
		declaredAt: (11 to: 15)) listContents ] valueCoveringAll:
		{438 to: 449}) ->
		(price
			cover: (454 to: 458)
			declaredAt: (45 to: 49)) ] valueCoveringAll:
		{451 to: 452}.! !
!Behavior method!
assertCartIsNotEmpty: aCart
	^ [
	([
	(aCart
		cover: (33 to: 37)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{39 to: 45}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			([
			(self coverAll:
				{67 to: 70}) class ] valueCoveringAll:
				{72 to: 76}) emptyCartErrorDescription ] valueCoveringAll:
				{78 to: 102}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{47 to: 53}.! !
!Behavior method!
emptyCartErrorDescription
	^ 'El carrito esta vacio.' coverAll:
		{32 to: 55}.! !

!testRun: #CheckoutTest #test03SaleisNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
value
	^ [
	(books
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) sum: [ :aBookISBN |
		[
		(catalog
			cover: (36 to: 42)
			declaredAt: (36 to: 42)) at:
			(aBookISBN
				cover: (48 to: 56)
				declaredAt: (23 to: 31)) ] valueCoveringAll:
			{44 to: 46} ]] valueCoveringAll:
		{16 to: 19}.! !
!Behavior method!
isExpiredOn: aFixedGregorianDate
	^ [
	([
	(expirationMonthOfYear
		cover: (38 to: 58)
		declaredAt: (38 to: 58)) lastDate ] valueCoveringAll:
		{60 to: 67}) <
		(aFixedGregorianDate
			cover: (71 to: 89)
			declaredAt: (14 to: 32)) ] valueCoveringAll:
		{69 to: 69}.! !
!Behavior method!
expiredCreditCardErrorDescription
	^ 'La tarjeta de credito esta vencida.' coverAll:
		{39 to: 75}.! !

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
assertNameIsValidToSendToMerchantProcessor: aCreditCard
	[
	([
	([
	([
	([
	(aCreditCard
		cover: (59 to: 69)
		declaredAt: (45 to: 55)) owner ] valueCoveringAll:
		{71 to: 75}) withBlanksTrimmed ] valueCoveringAll:
		{77 to: 93}) size ] valueCoveringAll:
		{95 to: 98}) >
		(30 coverAll:
			{102 to: 103}) ] valueCoveringAll:
		{100 to: 100}) ifTrue: [
		[
		(self coverAll:
			{115 to: 118}) error:
			([
			([
			(self coverAll:
				{127 to: 130}) class ] valueCoveringAll:
				{132 to: 136}) nameTooLongToSendToMerchantProcessor ] valueCoveringAll:
				{138 to: 173}) ] valueCoveringAll:
			{120 to: 125} ]] valueCoveringAll:
		{105 to: 111}.! !
!Behavior method!
owner
	^ owner
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
assertAmountIsValidToSendToMerchantProcessor: anAmount
	[
	([
	([
	([
	(anAmount
		cover: (59 to: 66)
		declaredAt: (47 to: 54)) truncated ] valueCoveringAll:
		{68 to: 76}) numberOfDigitsInBase:
		(10 coverAll:
			{100 to: 101}) ] valueCoveringAll:
		{78 to: 98}) >
		(15 coverAll:
			{107 to: 108}) ] valueCoveringAll:
		{105 to: 105}) ifTrue: [
		[
		(self coverAll:
			{120 to: 123}) error:
			([
			([
			(self coverAll:
				{132 to: 135}) class ] valueCoveringAll:
				{137 to: 141}) amountTooBigToSendToMerchantProcessor ] valueCoveringAll:
				{143 to: 179}) ] valueCoveringAll:
			{125 to: 130} ]] valueCoveringAll:
		{110 to: 116}.! !
!Behavior method!
formatAmount: anAmount
	^ [
	(anAmount
		cover: (28 to: 35)
		declaredAt: (15 to: 22)) printStringFractionDigits:
		(2 coverAll:
			{63 to: 64}) ] valueCoveringAll:
		{37 to: 62}.! !
!Behavior method!
debit: anAmount from: aCreditCard
	(amountToDebit _ anAmount
		cover: (54 to: 61)
		declaredAt: (8 to: 15))
		cover: (37 to: 49)
		declaredAt: (37 to: 49).
	(timesCalled _ [
	(timesCalled
		cover: (65 to: 75)
		declaredAt: (65 to: 75)) +
		(1 coverAll:
			{93 to: 94}) ] valueCoveringAll:
		{92 to: 92})
		cover: (80 to: 90)
		declaredAt: (65 to: 75).! !

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
nameTooLongToSendToMerchantProcessor
	^ 'El nombre del cliente debe tener como maximo 30 digitos.' coverAll:
		{42 to: 99}.! !
!Behavior method!
timesCalled
	^ timesCalled
		cover: (17 to: 27)
		declaredAt: (17 to: 27).! !

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
amountTooBigToSendToMerchantProcessor
	^ 'El monto puede tener hasta 15 digitos.' coverAll:
		{43 to: 82}.! !

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
amountToDebit
	^ amountToDebit
		cover: (19 to: 31)
		declaredAt: (19 to: 31).! !

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
debit: anAmount from: aCreditCard
	[
	(self coverAll:
		{37 to: 40}) error:
		([
		([
		(self coverAll:
			{49 to: 52}) class ] valueCoveringAll:
			{54 to: 58}) cannotProcessDebit ] valueCoveringAll:
			{60 to: 77}) ] valueCoveringAll:
		{42 to: 47}.! !
!Behavior method!
cannotProcessDebit
	^ 'No se puede procesar el pago.' coverAll:
		{24 to: 54}.! !

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
withCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	^ [
	([
	(self coverAll:
		{103 to: 106}) new ] valueCoveringAll:
		{108 to: 110})
		initializeWithCatalog:
			(aCatalog
				cover: (135 to: 142)
				declaredAt: (14 to: 21))
		withAuthenticator:
			(anAuthenticator
				cover: (163 to: 177)
				declaredAt: (42 to: 56))
		andMerchantProcessor:
			(aMerchantProcessor
				cover: (201 to: 218)
				declaredAt: (80 to: 97)) ] valueCoveringAll:
		{112 to: 133. 144 to: 161. 179 to: 199}.! !
!Behavior method!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	(lastCartID _ 0 coverAll:
		{126 to: 126})
		cover: (112 to: 121)
		declaredAt: (112 to: 121).
	(lastTransactionID _ 0 coverAll:
		{151 to: 151})
		cover: (130 to: 146)
		declaredAt: (130 to: 146).
	(carts _ [
	(Dictionary
		cover: (164 to: 173)
		declaredAt: (164 to: 173)) new ] valueCoveringAll:
		{175 to: 177})
		cover: (155 to: 159)
		declaredAt: (155 to: 159).
	(catalog _ aCatalog
		cover: (192 to: 199)
		declaredAt: (24 to: 31))
		cover: (181 to: 187)
		declaredAt: (181 to: 187).
	(authenticator _ anAuthenticator
		cover: (220 to: 234)
		declaredAt: (52 to: 66))
		cover: (203 to: 215)
		declaredAt: (203 to: 215).
	(cashier _ [
	(Cashier
		cover: (249 to: 255)
		declaredAt: (249 to: 255)) debitingTo:
		(aMerchantProcessor
			cover: (269 to: 286)
			declaredAt: (90 to: 107)) ] valueCoveringAll:
		{257 to: 267})
		cover: (238 to: 244)
		declaredAt: (238 to: 244).
	(salesList _ [
	(Dictionary
		cover: (303 to: 312)
		declaredAt: (164 to: 173)) new ] valueCoveringAll:
		{314 to: 316})
		cover: (290 to: 298)
		declaredAt: (290 to: 298).
	(customerSales _ [
	(Dictionary
		cover: (337 to: 346)
		declaredAt: (164 to: 173)) new ] valueCoveringAll:
		{348 to: 350})
		cover: (320 to: 332)
		declaredAt: (320 to: 332).! !
!Behavior method!
createCartForCustomerID: aCustomerID andPassword: aPassword
	| newID |
	[
	(self coverAll:
		{75 to: 78})
		ifCanAuthenticateUsing:
			(aCustomerID
				cover: (106 to: 116)
				declaredAt: (26 to: 36))
		and:
			(aPassword
				cover: (125 to: 133)
				declaredAt: (51 to: 59))
		do: [
			(newID _ [
			(self coverAll:
				{155 to: 158}) nextCartID ] valueCoveringAll:
				{160 to: 169})
				cover: (146 to: 150)
				declaredAt: (65 to: 69).
			[
			(carts
				cover: (175 to: 179)
				declaredAt: (175 to: 179))
				at:
					(newID
						cover: (185 to: 189)
						declaredAt: (65 to: 69))
				put:
					([
					([
					(self coverAll:
						{197 to: 200}) emptyCart ] valueCoveringAll:
						{202 to: 210}) ->
						(aCustomerID
							cover: (213 to: 223)
							declaredAt: (26 to: 36)) ] valueCoveringAll:
						{211 to: 212}) ] valueCoveringAll:
				{181 to: 183. 191 to: 194} ]] valueCoveringAll:
		{82 to: 104. 120 to: 123. 137 to: 139}.
	^ newID
		cover: (235 to: 239)
		declaredAt: (65 to: 69).! !
!Behavior method!
ifCanAuthenticateUsing: aCustomerID and: aPassword do: aBlock
	[
	([
	(authenticator
		cover: (66 to: 78)
		declaredAt: (66 to: 78))
		authenticateUserID:
			(aCustomerID
				cover: (100 to: 110)
				declaredAt: (25 to: 35))
		withPassword:
			(aPassword
				cover: (126 to: 134)
				declaredAt: (42 to: 50)) ] valueCoveringAll:
		{80 to: 98. 112 to: 124})
		ifTrue:
			(aBlock
				cover: (147 to: 152)
				declaredAt: (56 to: 61))
		ifFalse: [
			[
			(self coverAll:
				{167 to: 170}) error:
				([
				([
				(self coverAll:
					{179 to: 182}) class ] valueCoveringAll:
					{184 to: 188}) authenticationErrorMessage ] valueCoveringAll:
					{190 to: 215}) ] valueCoveringAll:
				{172 to: 177} ]] valueCoveringAll:
		{139 to: 145. 156 to: 163}.! !
!Behavior method!
authenticateUserID: aCustomerID withPassword: aPassword
	^ true coverAll:
		{60 to: 63}.! !
!Behavior method!
nextCartID
	(lastCartID _ [
	(lastCartID
		cover: (15 to: 24)
		declaredAt: (15 to: 24)) +
		(1 coverAll:
			{42 to: 42}) ] valueCoveringAll:
		{40 to: 40})
		cover: (29 to: 38)
		declaredAt: (15 to: 24).
	^ lastCartID
		cover: (47 to: 56)
		declaredAt: (15 to: 24).! !
!Behavior method!
emptyCart
	^ [
	(Cart
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) for:
		(catalog
			cover: (25 to: 31)
			declaredAt: (25 to: 31)) ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
listCartWithID: aCartID
	^ [
	([
	([
	(carts
		cover: (29 to: 33)
		declaredAt: (29 to: 33)) at:
		(aCartID
			cover: (39 to: 45)
			declaredAt: (17 to: 23)) ] valueCoveringAll:
		{35 to: 37}) key ] valueCoveringAll:
		{48 to: 50}) listContents ] valueCoveringAll:
		{52 to: 63}.! !

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 12:01:16'!
PASSED!
!Behavior method!
authenticateUserID: aCustomerID withPassword: aPassword
	^ false coverAll:
		{60 to: 64}.! !
!Behavior method!
authenticationErrorMessage
	^ 'Error al autenticarse.' coverAll:
		{31 to: 54}.! !

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 12:01:17'!
PASSED!
!Behavior method!
addToCartWithID: aCartID book: aBook quantity: aQuantity
	| cart |
	(cart _ [
	([
	(carts
		cover: (81 to: 85)
		declaredAt: (81 to: 85))
		at:
			(aCartID
				cover: (91 to: 97)
				declaredAt: (18 to: 24))
		ifAbsent: [
			[
			(self coverAll:
				{110 to: 113}) error:
				([
				([
				(self coverAll:
					{122 to: 125}) class ] valueCoveringAll:
					{127 to: 131}) invalidCartIDErrorMessage ] valueCoveringAll:
					{133 to: 157}) ] valueCoveringAll:
				{115 to: 120} ]] valueCoveringAll:
		{87 to: 89. 99 to: 107}) key ] valueCoveringAll:
		{161 to: 163})
		cover: (72 to: 75)
		declaredAt: (62 to: 65).
	[
	(cart
		cover: (167 to: 170)
		declaredAt: (62 to: 65))
		addBook:
			(aBook
				cover: (181 to: 185)
				declaredAt: (32 to: 36))
		quantity:
			(aQuantity
				cover: (197 to: 205)
				declaredAt: (48 to: 56)) ] valueCoveringAll:
		{172 to: 179. 187 to: 195}.! !

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 12:01:17'!
PASSED!
!Behavior method!
invalidCartIDErrorMessage
	^ 'El ID de carrito no es valido.' coverAll:
		{31 to: 62}.! !

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 12:01:17'!
PASSED!
!Behavior method!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner
	| creditCard sale |
	(creditCard _ [
	(CreditCard
		cover: (157 to: 166)
		declaredAt: (157 to: 166))
		for:
			(anOwner
				cover: (173 to: 179)
				declaredAt: (110 to: 116))
		number:
			(aCreditCardNumber
				cover: (189 to: 205)
				declaredAt: (52 to: 68))
		expiringOn:
			([
			(self coverAll:
				{220 to: 223}) createGregorianMonthOfYearFrom:
				(aMonthOfYearString
					cover: (257 to: 274)
					declaredAt: (82 to: 99)) ] valueCoveringAll:
				{225 to: 255}) ] valueCoveringAll:
		{168 to: 171. 181 to: 187. 207 to: 217})
		cover: (143 to: 152)
		declaredAt: (122 to: 131).
	(sale _ [
	(cashier
		cover: (289 to: 295)
		declaredAt: (289 to: 295))
		checkout:
			([
			([
			(carts
				cover: (308 to: 312)
				declaredAt: (308 to: 312)) at:
				(aCartID
					cover: (318 to: 324)
					declaredAt: (21 to: 27)) ] valueCoveringAll:
				{314 to: 316}) key ] valueCoveringAll:
				{327 to: 329})
		withCard:
			(creditCard
				cover: (341 to: 350)
				declaredAt: (122 to: 131)) ] valueCoveringAll:
		{297 to: 305. 331 to: 339})
		cover: (281 to: 284)
		declaredAt: (133 to: 136).
	[
	(salesList
		cover: (354 to: 362)
		declaredAt: (354 to: 362)) add:
		([
		([
		(self coverAll:
			{369 to: 372}) nextTransactionID ] valueCoveringAll:
			{374 to: 390}) ->
			(sale
				cover: (395 to: 398)
				declaredAt: (133 to: 136)) ] valueCoveringAll:
			{392 to: 393}) ] valueCoveringAll:
		{364 to: 367}.
	[
	(customerSales
		cover: (402 to: 414)
		declaredAt: (402 to: 414)) add:
		([
		([
		([
		(carts
			cover: (423 to: 427)
			declaredAt: (308 to: 312)) at:
			(aCartID
				cover: (433 to: 439)
				declaredAt: (21 to: 27)) ] valueCoveringAll:
			{429 to: 431}) value ] valueCoveringAll:
			{442 to: 446}) ->
			(lastTransactionID
				cover: (450 to: 466)
				declaredAt: (450 to: 466)) ] valueCoveringAll:
			{448 to: 449}) ] valueCoveringAll:
		{416 to: 419}.
	^ lastTransactionID
		cover: (474 to: 490)
		declaredAt: (450 to: 466).! !
!Behavior method!
createGregorianMonthOfYearFrom: aMonthOfYearString
	(month _ [
	(Number
		cover: (63 to: 68)
		declaredAt: (63 to: 68)) readFrom:
		([
		(aMonthOfYearString
			cover: (81 to: 98)
			declaredAt: (33 to: 50)) first:
			(2 coverAll:
				{107 to: 107}) ] valueCoveringAll:
			{100 to: 105}) ] valueCoveringAll:
		{70 to: 78})
		cover: (54 to: 58)
		declaredAt: (54 to: 58).
	(year _ [
	(Number
		cover: (120 to: 125)
		declaredAt: (63 to: 68)) readFrom:
		([
		(aMonthOfYearString
			cover: (138 to: 155)
			declaredAt: (33 to: 50)) last:
			(4 coverAll:
				{163 to: 163}) ] valueCoveringAll:
			{157 to: 161}) ] valueCoveringAll:
		{127 to: 135})
		cover: (112 to: 115)
		declaredAt: (112 to: 115).
	^ [
	(GregorianMonthOfYear
		cover: (172 to: 191)
		declaredAt: (172 to: 191))
		yearNumber:
			(year
				cover: (205 to: 208)
				declaredAt: (112 to: 115))
		monthNumber:
			(month
				cover: (223 to: 227)
				declaredAt: (54 to: 58)) ] valueCoveringAll:
		{193 to: 203. 210 to: 221}.! !
!Behavior method!
nextTransactionID
	(lastTransactionID _ [
	(lastTransactionID
		cover: (22 to: 38)
		declaredAt: (22 to: 38)) +
		(1 coverAll:
			{63 to: 63}) ] valueCoveringAll:
		{61 to: 61})
		cover: (43 to: 59)
		declaredAt: (22 to: 38).
	^ lastTransactionID
		cover: (68 to: 84)
		declaredAt: (22 to: 38).! !
!Behavior method!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	| allSales |
	(allSales _ [
	(OrderedCollection
		cover: (93 to: 109)
		declaredAt: (93 to: 109)) new ] valueCoveringAll:
		{111 to: 113})
		cover: (81 to: 88)
		declaredAt: (67 to: 74).
	[
	(self coverAll:
		{117 to: 120})
		ifCanAuthenticateUsing:
			(aCustomerID
				cover: (146 to: 156)
				declaredAt: (28 to: 38))
		and:
			(aPassword
				cover: (163 to: 171)
				declaredAt: (53 to: 61))
		do: [
			[
			(customerSales
				cover: (181 to: 193)
				declaredAt: (181 to: 193)) keysAndValuesDo: [ :customerID :transactionID |
				[
				([
				(customerID
					cover: (243 to: 252)
					declaredAt: (215 to: 224)) =
					(aCustomerID
						cover: (256 to: 266)
						declaredAt: (28 to: 38)) ] valueCoveringAll:
					{254 to: 254}) ifTrue: [
					[
					(allSales
						cover: (278 to: 285)
						declaredAt: (67 to: 74)) add:
						([
						(salesList
							cover: (293 to: 301)
							declaredAt: (293 to: 301)) at:
							(transactionID
								cover: (307 to: 319)
								declaredAt: (227 to: 239)) ] valueCoveringAll:
							{303 to: 305}) ] valueCoveringAll:
						{287 to: 290} ]] valueCoveringAll:
					{268 to: 274} ]] valueCoveringAll:
				{196 to: 211} ]] valueCoveringAll:
		{122 to: 144. 158 to: 161. 173 to: 175}.
	^ allSales
		cover: (332 to: 339)
		declaredAt: (67 to: 74).! !

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 12:01:17'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 12:02:22'!
test03SaleIsNotRegisteredWhenCartIsEmpty
	
	| cart cashier salesList |
	
	cart := Cart for: self defaultCatalog.
	cashier := self cashierWithWorkingMerchantProcessor.
	salesList := OrderedCollection new.
	
	self should: [salesList add: (cashier checkout: cart withCard: self validCreditCard)] 
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier emptyCartErrorDescription	 equals: anError messageText.
			self assert: salesList isEmpty
		]! !

!methodRemoval: CheckoutTest #test03SaleisNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 12:02:22'!
test03SaleisNotRegisteredWhenCartIsEmpty
	
	| cart cashier salesList |
	
	cart := Cart for: self defaultCatalog.
	cashier := self cashierWithWorkingMerchantProcessor.
	salesList := OrderedCollection new.
	
	self should: [salesList add: (cashier checkout: cart withCard: self validCreditCard)] 
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier emptyCartErrorDescription	 equals: anError messageText.
			self assert: salesList isEmpty
		]!
!Cashier methodsFor: 'paying' stamp: 'fm 6/12/2022 12:06:19'!
checkout: aCart withCard: aCreditCard on: aGregorianDate  
	
	| price |
	
	self assertCartIsNotEmpty: aCart.
	price := aCart value.
	(aCreditCard isExpiredOn: FixedGregorianDate today) ifTrue:[self error: self class expiredCreditCardErrorDescription].
	self assertNameIsValidToSendToMerchantProcessor: aCreditCard.
	self assertAmountIsValidToSendToMerchantProcessor: price.
	
	merchantProcessor debit: (self formatAmount: price) from: aCreditCard.
	^ aCart listContents -> price! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:06:19' prior: 50476554!
test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong
	
	| cart cashier salesList cardWithLongName merchantProcessor |
	
	cart := self defaultCart.
	
	merchantProcessor := WorkingMerchantProcessor new.
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	cardWithLongName := CreditCard for: 'Una Persona Con Un Nombre Super Muy Pero Muy Largo' number: self validCreditCardNumber expiringOn: self nonExpiredMonthOfYear.
	
	self
		should: [ cashier checkout: cart withCard: cardWithLongName on: aGregorianDate ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier nameTooLongToSendToMerchantProcessor.
			self assert: salesList isEmpty.
			self assert: merchantProcessor timesCalled isZero]! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:06:19' prior: 50479518!
test08AmountIsSentFormattedToMerchantProcessor
	
	| cart cashier salesList merchantProcessor |
	
	cart := self defaultCart.
	merchantProcessor := WorkingMerchantProcessor new.
	
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	
	cashier checkout: cart withCard: self validCreditCard on: aGregorianDate.
	
	self assert: '10.00' equals: merchantProcessor amountToDebit! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:06:19' prior: 50478027!
test04SaleIsNotRegisteredWhenCreditCardIsExpired
	
	| cart cashier creditCard salesList |
	
	cart := self defaultCart.
	
	salesList := OrderedCollection new.
	cashier := self cashierWithWorkingMerchantProcessor.
	creditCard := CreditCard for: 'Alan Kay' number: self validCreditCardNumber expiringOn: self expiredMonthOfYear.
	
	self should:[salesList add: (cashier checkout: cart withCard: creditCard on: aGregorianDate)]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier expiredCreditCardErrorDescription	 equals: anError messageText.
			self assert: salesList isEmpty
		]! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:06:19' prior: 50478082!
test05SaleIsRegisteredOnSalesListWithContentsAndPrice
	
	| cart cashier expectedSale salesList |
	
	cart := self defaultCart.
	
	salesList := OrderedCollection new.
	cashier := self cashierWithWorkingMerchantProcessor.
	salesList add: (cashier checkout: cart withCard: self validCreditCard on: aGregorianDate).
	
	expectedSale := cart listContents -> (5 + (2*2.5)).
	
	self assert: 1 equals: salesList size.
	self assert: salesList includes: expectedSale! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:06:19' prior: 50476587!
test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig
	
	| cart cashier catalog salesList merchantProcessor |
	
	catalog := Dictionary with: 1->5000000000000000 with: 2->2.5.
	cart := Cart for: catalog.
	cart addBook: 1 quantity: 1.
	cart addBook: 2 quantity: 2.
	merchantProcessor := WorkingMerchantProcessor new.
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	
	self
		should: [ cashier checkout: cart withCard: self validCreditCard on: aGregorianDate ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier amountTooBigToSendToMerchantProcessor.
			self assert: salesList isEmpty.
			self assert: merchantProcessor timesCalled isZero ]! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:06:19' prior: 50476613!
test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit
	
	| cart cashier salesList merchantProcessor |
	
	cart := self defaultCart.
	merchantProcessor := FailingMerchantProcessor new.
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	
	self
		should:	[ cashier checkout: cart withCard: self validCreditCard on: aGregorianDate ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: FailingMerchantProcessor cannotProcessDebit.
			self assert: salesList isEmpty ]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:06:19' prior: 50477892!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard sale |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	sale := cashier checkout: (carts at: aCartID) key withCard: creditCard on: aGregorianDate.
	salesList add: self nextTransactionID -> sale.
	customerSales add: ((carts at: aCartID) value)->lastTransactionID.
	
	^ lastTransactionID! !

!methodRemoval: Cashier #checkout:withCard: stamp: 'fm 6/12/2022 12:06:19'!
checkout: aCart withCard: aCreditCard 
	
	| price |
	
	self assertCartIsNotEmpty: aCart.
	price := aCart value.
	(aCreditCard isExpiredOn: FixedGregorianDate today) ifTrue:[self error: self class expiredCreditCardErrorDescription].
	self assertNameIsValidToSendToMerchantProcessor: aCreditCard.
	self assertAmountIsValidToSendToMerchantProcessor: price.
	
	merchantProcessor debit: (self formatAmount: price) from: aCreditCard.
	^ aCart listContents -> price!
!Cashier methodsFor: 'paying' stamp: 'fm 6/12/2022 12:06:30' prior: 50480412!
checkout: aCart withCard: aCreditCard on: aGregorianDate  
	
	| price |
	
	self assertCartIsNotEmpty: aCart.
	price := aCart value.
	(aCreditCard isExpiredOn: aGregorianDate) ifTrue:[self error: self class expiredCreditCardErrorDescription].
	self assertNameIsValidToSendToMerchantProcessor: aCreditCard.
	self assertAmountIsValidToSendToMerchantProcessor: price.
	
	merchantProcessor debit: (self formatAmount: price) from: aCreditCard.
	^ aCart listContents -> price! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 12:07:59' prior: 50480475!
test04SaleIsNotRegisteredWhenCreditCardIsExpired
	
	| cart cashier creditCard salesList |
	
	cart := self defaultCart.
	
	salesList := OrderedCollection new.
	cashier := self cashierWithWorkingMerchantProcessor.
	creditCard := CreditCard for: 'Alan Kay' number: self validCreditCardNumber expiringOn: self expiredMonthOfYear.
	
	self should:[salesList add: (cashier checkout: cart withCard: creditCard on: self today)]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier expiredCreditCardErrorDescription	 equals: anError messageText.
			self assert: salesList isEmpty
		]! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 12:08:05' prior: 50480497!
test05SaleIsRegisteredOnSalesListWithContentsAndPrice
	
	| cart cashier expectedSale salesList |
	
	cart := self defaultCart.
	
	salesList := OrderedCollection new.
	cashier := self cashierWithWorkingMerchantProcessor.
	salesList add: (cashier checkout: cart withCard: self validCreditCard on: self today).
	
	expectedSale := cart listContents -> (5 + (2*2.5)).
	
	self assert: 1 equals: salesList size.
	self assert: salesList includes: expectedSale! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 12:08:10' prior: 50480431!
test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong
	
	| cart cashier salesList cardWithLongName merchantProcessor |
	
	cart := self defaultCart.
	
	merchantProcessor := WorkingMerchantProcessor new.
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	cardWithLongName := CreditCard for: 'Una Persona Con Un Nombre Super Muy Pero Muy Largo' number: self validCreditCardNumber expiringOn: self nonExpiredMonthOfYear.
	
	self
		should: [ cashier checkout: cart withCard: cardWithLongName on: self today ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier nameTooLongToSendToMerchantProcessor.
			self assert: salesList isEmpty.
			self assert: merchantProcessor timesCalled isZero]! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 12:08:16' prior: 50480515!
test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig
	
	| cart cashier catalog salesList merchantProcessor |
	
	catalog := Dictionary with: 1->5000000000000000 with: 2->2.5.
	cart := Cart for: catalog.
	cart addBook: 1 quantity: 1.
	cart addBook: 2 quantity: 2.
	merchantProcessor := WorkingMerchantProcessor new.
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	
	self
		should: [ cashier checkout: cart withCard: self validCreditCard on: self today ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier amountTooBigToSendToMerchantProcessor.
			self assert: salesList isEmpty.
			self assert: merchantProcessor timesCalled isZero ]! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 12:08:20' prior: 50480459!
test08AmountIsSentFormattedToMerchantProcessor
	
	| cart cashier salesList merchantProcessor |
	
	cart := self defaultCart.
	merchantProcessor := WorkingMerchantProcessor new.
	
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	
	cashier checkout: cart withCard: self validCreditCard on: self today.
	
	self assert: '10.00' equals: merchantProcessor amountToDebit! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 12:08:46' prior: 50480708!
test08AmountIsSentFormattedToMerchantProcessor
	
	| cart cashier merchantProcessor |
	
	cart := self defaultCart.
	merchantProcessor := WorkingMerchantProcessor new.
	cashier := Cashier debitingTo: merchantProcessor.
	
	cashier checkout: cart withCard: self validCreditCard on: self today.
	
	self assert: '10.00' equals: merchantProcessor amountToDebit! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 12:08:52' prior: 50480541!
test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit
	
	| cart cashier salesList merchantProcessor |
	
	cart := self defaultCart.
	merchantProcessor := FailingMerchantProcessor new.
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	
	self
		should:	[ cashier checkout: cart withCard: self validCreditCard on: self today ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: FailingMerchantProcessor cannotProcessDebit.
			self assert: salesList isEmpty ]! !
!TusLibrosSystemFacade methodsFor: 'cart-checkout' stamp: 'fm 6/12/2022 12:10:09' prior: 50480562!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard sale |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	sale := cashier checkout: (carts at: aCartID) key withCard: creditCard on: (FixedGregorianDate today).
	salesList add: self nextTransactionID -> sale.
	customerSales add: ((carts at: aCartID) value)->lastTransactionID.
	
	^ lastTransactionID! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 12:10:15'!
FAILURE!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 12:10:15'!
FAILURE!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 12:10:15'!
ERROR!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 12:10:15'!
FAILURE!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 12:10:15'!
FAILURE!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 12:10:15'!
ERROR!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 12:10:15'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 12:10:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 12:10:15'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 12:10:41' prior: 50480377!
test03SaleIsNotRegisteredWhenCartIsEmpty
	
	| cart cashier salesList |
	
	cart := Cart for: self defaultCatalog.
	cashier := self cashierWithWorkingMerchantProcessor.
	salesList := OrderedCollection new.
	
	self should: [salesList add: (cashier checkout: cart withCard: self validCreditCard on: self today)] 
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier emptyCartErrorDescription	 equals: anError messageText.
			self assert: salesList isEmpty
		]! !
!CheckoutTest methodsFor: 'test-support' stamp: 'fm 6/12/2022 12:11:15'!
today

	^ FixedGregorianDate today! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 12:11:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 12:11:18'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'cart-checkout' stamp: 'fm 6/12/2022 12:16:08' prior: 50480759!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard sale currentTransactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	sale := cashier checkout: (carts at: aCartID) key withCard: creditCard on: (FixedGregorianDate today).
	currentTransactionID := self nextTransactionID.
	salesList add: currentTransactionID -> sale.
	customerSales add: ((carts at: aCartID) value)->currentTransactionID.
	
	^ currentTransactionID! !

!classDefinition: #CartSession category: 'TusLibros' stamp: 'fm 6/12/2022 12:31:27'!
Object subclass: #CartSession
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'cart-creation' stamp: 'fm 6/12/2022 12:31:18' prior: 50476997!
createCartForCustomerID: aCustomerID andPassword: aPassword

	| newID |

	self
		ifCanAuthenticateUsing: aCustomerID
		and: aPassword
		do: [
			newID := self nextCartID.
			carts add: (CartSession for: self emptyCart withID: newID belongingTo: aCustomerID)
		].

	^ newID! !
!CartSession class methodsFor: 'nil' stamp: 'fm 6/12/2022 12:32:07'!
for: aCart withID: aCartID belongingTo: aCustomerID

	^ self new initializeFor: aCart withID: aCartID belongingTo: aCustomerID! !

!classDefinition: #CartSession category: 'TusLibros' stamp: 'fm 6/12/2022 12:32:40'!
Object subclass: #CartSession
	instanceVariableNames: 'customerID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'no messages' stamp: 'fm 6/12/2022 12:32:35'!
initializeFor: aCart withID: aCartID belongingTo: aCustomerID

	| cart cartID |
	cart := aCart.
	cartID := aCartID.
	customerID := aCustomerID! !

Object subclass: #CartSession
	instanceVariableNames: 'customerID cart cardID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'fm 6/12/2022 12:33:23'!
Object subclass: #CartSession
	instanceVariableNames: 'customerID carton'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'fm 6/12/2022 12:33:31'!
Object subclass: #CartSession
	instanceVariableNames: 'customerID carton cartIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:33:30' prior: 50481017!
initializeFor: aCart withID: aCartID belongingTo: aCustomerID

	carton := aCart.
	cartIDs := aCartID.
	customerID := aCustomerID! !

!classDefinition: #CartSession category: 'TusLibros' stamp: 'fm 6/12/2022 12:33:37'!
Object subclass: #CartSession
	instanceVariableNames: 'customerID cart cartIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:33:37' prior: 50481044!
initializeFor: aCart withID: aCartID belongingTo: aCustomerID

	cart := aCart.
	cartIDs := aCartID.
	customerID := aCustomerID! !

!classDefinition: #CartSession category: 'TusLibros' stamp: 'fm 6/12/2022 12:33:43'!
Object subclass: #CartSession
	instanceVariableNames: 'customerID cart cartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:33:43' prior: 50481059!
initializeFor: aCart withID: aCartID belongingTo: aCustomerID

	cart := aCart.
	cartID := aCartID.
	customerID := aCustomerID! !
!CartSession methodsFor: 'accessing' stamp: 'fm 6/12/2022 12:34:33'!
cart

	^ cart! !
!CartSession methodsFor: 'accessing' stamp: 'fm 6/12/2022 12:34:37'!
cartID

	^ cartID! !
!CartSession methodsFor: 'accessing' stamp: 'fm 6/12/2022 12:34:43'!
customerID

	^ customerID! !
!TusLibrosSystemFacade methodsFor: 'cart-listing' stamp: 'fm 6/12/2022 12:37:11' prior: 50476913!
listCartWithID: aCartID

	^ (carts detect: [:cartSession | cartSession cartID = aCartID]) listContents! !
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'fm 6/12/2022 12:37:21' prior: 50476973!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	
	lastCartID := 0.
	lastTransactionID := 0.
	carts := OrderedCollection new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cashier := Cashier debitingTo: aMerchantProcessor.
	salesList := Dictionary new.
	customerSales := Dictionary new! !
!TusLibrosSystemFacade methodsFor: 'cart-adding' stamp: 'fm 6/12/2022 12:39:32' prior: 50477187!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cart |
	
	cart := carts detect: [:cartSession | cartSession cartID = aCartID] ifNone: [self error: self class invalidCartIDErrorMessage].
	cart addBook: aBook quantity: aQuantity! !
!TusLibrosSystemFacade methodsFor: 'cart-checkout' stamp: 'fm 6/12/2022 12:42:02' prior: 50480963!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard sale currentTransactionID aCartSession |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	aCartSession := carts detect: [:cartSession | cartSession cartID = aCartID] ifNone: [self error: self class invalidCartIDErrorMessage].
	sale := cashier checkout: aCartSession cart withCard: creditCard on: (FixedGregorianDate today).
	currentTransactionID := self nextTransactionID.
	salesList add: currentTransactionID -> sale.
	customerSales add: aCartSession customerID ->currentTransactionID.
	
	^ currentTransactionID! !
!TusLibrosSystemFacade methodsFor: 'cart-checkout' stamp: 'fm 6/12/2022 12:43:18'!
cartSessionFromCartID: aCartID

	^ carts detect: [:cartSession | cartSession cartID = aCartID] ifNone: [self error: self class invalidCartIDErrorMessage]! !
!TusLibrosSystemFacade methodsFor: 'cart-adding' stamp: 'fm 6/12/2022 12:43:18' prior: 50481113!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cart |
	
	cart := self cartSessionFromCartID: aCartID.
	cart addBook: aBook quantity: aQuantity! !
!TusLibrosSystemFacade methodsFor: 'cart-checkout' stamp: 'fm 6/12/2022 12:43:18' prior: 50481124!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard sale currentTransactionID aCartSession |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	aCartSession := self cartSessionFromCartID: aCartID.
	sale := cashier checkout: aCartSession cart withCard: creditCard on: (FixedGregorianDate today).
	currentTransactionID := self nextTransactionID.
	salesList add: currentTransactionID -> sale.
	customerSales add: aCartSession customerID ->currentTransactionID.
	
	^ currentTransactionID! !
!TusLibrosSystemFacade methodsFor: 'cart-adding' stamp: 'fm 6/12/2022 12:43:27' prior: 50481158!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cartSession |
	
	cartSession := self cartSessionFromCartID: aCartID.
	cartSession addBook: aBook quantity: aQuantity! !
!TusLibrosSystemFacade methodsFor: 'cart-adding' stamp: 'fm 6/12/2022 12:43:32' prior: 50481191!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cartSession |
	
	cartSession := self cartSessionFromCartID: aCartID.
	cartSession cart addBook: aBook quantity: aQuantity! !
!TusLibrosSystemFacade methodsFor: 'cart-listing' stamp: 'fm 6/12/2022 12:44:15' prior: 50481091!
listCartWithID: aCartID

	^ (self cartSessionFromCartID: aCartID) cart listContents! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 12:44:20'!
PASSED!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'fm 6/12/2022 12:45:37'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'cartSessions lastCartID catalog authenticator cashier salesList lastTransactionID customerSales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:45:37' prior: 50481098!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	
	lastCartID := 0.
	lastTransactionID := 0.
	cartSessions := OrderedCollection new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cashier := Cashier debitingTo: aMerchantProcessor.
	salesList := Dictionary new.
	customerSales := Dictionary new! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:45:37' prior: 50481150!
cartSessionFromCartID: aCartID

	^ cartSessions detect: [:cartSession | cartSession cartID = aCartID] ifNone: [self error: self class invalidCartIDErrorMessage]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 12:45:37' prior: 50480992!
createCartForCustomerID: aCustomerID andPassword: aPassword

	| newID |

	self
		ifCanAuthenticateUsing: aCustomerID
		and: aPassword
		do: [
			newID := self nextCartID.
			cartSessions add: (CartSession for: self emptyCart withID: newID belongingTo: aCustomerID)
		].

	^ newID! !
!TusLibrosSystemFacade methodsFor: 'cart-checkout' stamp: 'fm 6/12/2022 12:46:15' prior: 50481167!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard sale currentTransactionID cartSession |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionFromCartID: aCartID.
	sale := cashier checkout: cartSession cart withCard: creditCard on: (FixedGregorianDate today).
	currentTransactionID := self nextTransactionID.
	salesList add: currentTransactionID -> sale.
	customerSales add: cartSession customerID ->currentTransactionID.
	
	^ currentTransactionID! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'fm 6/12/2022 13:13:58'!
Object subclass: #Sale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'paying' stamp: 'fm 6/12/2022 13:13:52'!
checkout: aCart for: aCustomerID withCard: aCreditCard on: aGregorianDate registeringOn: aSalesList 

	| price currentTransactionID |
	
	self assertCartIsNotEmpty: aCart.
	price := aCart value.
	(aCreditCard isExpiredOn: aGregorianDate) ifTrue:[self error: self class expiredCreditCardErrorDescription].
	self assertNameIsValidToSendToMerchantProcessor: aCreditCard.
	self assertAmountIsValidToSendToMerchantProcessor: price.
	
	merchantProcessor debit: (self formatAmount: price) from: aCreditCard.
	
	currentTransactionID := self nextTransactionID.
	aSalesList add: (Sale of: aCart listContents totalling: price to: aCustomerID with: currentTransactionID).
	
	^ currentTransactionID! !
!Sale class methodsFor: 'no messages' stamp: 'fm 6/12/2022 13:15:10'!
of: itemsSold totalling: aPrice to: aCustomerID with: currentTransactionID

	^ self new initializeOf: itemsSold totalling: aPrice to: aCustomerID with: currentTransactionID! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'fm 6/12/2022 13:16:04'!
Object subclass: #Sale
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'fm 6/12/2022 13:16:05'!
Object subclass: #Sale
	instanceVariableNames: 'items price'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'fm 6/12/2022 13:16:06'!
Object subclass: #Sale
	instanceVariableNames: 'items price customerID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'fm 6/12/2022 13:16:07'!
Object subclass: #Sale
	instanceVariableNames: 'items price customerID transactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'nil' stamp: 'fm 6/12/2022 13:16:02'!
initializeOf: itemsSold totalling: aPrice to: aCustomerID with: currentTransactionID

	items := itemsSold.
	price := aPrice.
	customerID := aCustomerID.
	transactionID := currentTransactionID! !
!Cashier methodsFor: 'paying' stamp: 'fm 6/12/2022 13:24:35' prior: 50481372!
checkout: aCart for: aCustomerID withCard: aCreditCard on: aGregorianDate registeringOn: aSalesList 

	| price |
	
	self assertCartIsNotEmpty: aCart.
	price := aCart value.
	(aCreditCard isExpiredOn: aGregorianDate) ifTrue:[self error: self class expiredCreditCardErrorDescription].
	self assertNameIsValidToSendToMerchantProcessor: aCreditCard.
	self assertAmountIsValidToSendToMerchantProcessor: price.
	
	merchantProcessor debit: (self formatAmount: price) from: aCreditCard.

	aSalesList add: (Sale of: aCart listContents totalling: price to: aCustomerID)! !
!Sale methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 13:24:50' prior: 50481431!
initializeOf: itemsSold totalling: aPrice to: aCustomerID with: currentTransactionID

	items := itemsSold.
	price := aPrice.
	customerID := aCustomerID! !
!Sale methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 13:24:59'!
initializeOf: itemsSold totalling: aPrice to: aCustomerID 

	items := itemsSold.
	price := aPrice.
	customerID := aCustomerID! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 13:24:59' prior: 50481396!
of: itemsSold totalling: aPrice to: aCustomerID with: currentTransactionID

	^ self new initializeOf: itemsSold totalling: aPrice to: aCustomerID ! !

!methodRemoval: Sale #initializeOf:totalling:to:with: stamp: 'fm 6/12/2022 13:24:59'!
initializeOf: itemsSold totalling: aPrice to: aCustomerID with: currentTransactionID

	items := itemsSold.
	price := aPrice.
	customerID := aCustomerID!
!Sale class methodsFor: 'as yet unclassified' stamp: 'fm 6/12/2022 13:25:07'!
of: itemsSold totalling: aPrice to: aCustomerID 

	^ self new initializeOf: itemsSold totalling: aPrice to: aCustomerID ! !

!methodRemoval: Sale class #of:totalling:to:with: stamp: 'fm 6/12/2022 13:25:08'!
of: itemsSold totalling: aPrice to: aCustomerID with: currentTransactionID

	^ self new initializeOf: itemsSold totalling: aPrice to: aCustomerID !

!classDefinition: #Sale category: 'TusLibros' stamp: 'fm 6/12/2022 13:25:15'!
Object subclass: #Sale
	instanceVariableNames: 'items price customerID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'fm 6/12/2022 13:28:28'!
customerID

	^ customerID! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 13:31:14' prior: 50480859!
test03SaleIsNotRegisteredWhenCartIsEmpty
	
	| cart cashier salesList |
	
	cart := Cart for: self defaultCatalog.
	cashier := self cashierWithWorkingMerchantProcessor.
	salesList := OrderedCollection new.
	
	self should: [self checkout: cart using: cashier] 
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier emptyCartErrorDescription	 equals: anError messageText.
			self assert: salesList isEmpty
		]! !
!CheckoutTest methodsFor: 'test-support' stamp: 'fm 6/12/2022 13:33:43'!
checkout: aCart using: aCashier debitingOn: aCreditCard registeringOn: aSalesList

	^ aCashier checkout: aCart for: 1 withCard: aCreditCard on: self today registeringOn: aSalesList! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 13:34:22' prior: 50481516!
test03SaleIsNotRegisteredWhenCartIsEmpty
	
	| cart cashier salesList |
	
	cart := Cart for: self defaultCatalog.
	cashier := self cashierWithWorkingMerchantProcessor.
	salesList := OrderedCollection new.
	
	self should: [self checkout: cart using: cashier debitingOn: self validCreditCard registeringOn: salesList] 
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier emptyCartErrorDescription	 equals: anError messageText.
			self assert: salesList isEmpty
		]! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 13:35:50' prior: 50480616!
test04SaleIsNotRegisteredWhenCreditCardIsExpired
	
	| cart cashier creditCard salesList |
	
	cart := self defaultCart.
	
	salesList := OrderedCollection new.
	cashier := self cashierWithWorkingMerchantProcessor.
	creditCard := CreditCard for: 'Alan Kay' number: self validCreditCardNumber expiringOn: self expiredMonthOfYear.
	
	self should:[self checkout: cart using: cashier debitingOn: creditCard registeringOn: salesList]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier expiredCreditCardErrorDescription	 equals: anError messageText.
			self assert: salesList isEmpty
		]! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 13:39:35' prior: 50480638!
test05SaleIsRegisteredOnSalesListWithContentsAndPrice
	
	| cart cashier expectedSale salesList |
	
	cart := self defaultCart.
	
	salesList := OrderedCollection new.
	cashier := self cashierWithWorkingMerchantProcessor.
	self checkout: cart using: cashier debitingOn: self validCreditCard registeringOn: salesList.
	
	expectedSale := Sale of: cart listContents totalling: 5 + (2*2.5) to: 1.
	
	self assert: 1 equals: salesList size.
	self assert: salesList any includes: expectedSale! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 13:40:30' prior: 50481581!
test05SaleIsRegisteredOnSalesListWithContentsAndPrice
	
	| cart cashier expectedSale salesList |
	
	cart := self defaultCart.
	
	salesList := OrderedCollection new.
	cashier := self cashierWithWorkingMerchantProcessor.
	self checkout: cart using: cashier debitingOn: self validCreditCard registeringOn: salesList.
	
	expectedSale := Sale of: cart listContents totalling: 5 + (2*2.5) to: 1.
	
	self assert: 1 equals: salesList size.
	self assert: salesList equals: (OrderedCollection with: expectedSale)! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 13:41:31' prior: 50480655!
test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong
	
	| cart cashier salesList cardWithLongName merchantProcessor |
	
	cart := self defaultCart.
	
	merchantProcessor := WorkingMerchantProcessor new.
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	cardWithLongName := CreditCard for: 'Una Persona Con Un Nombre Super Muy Pero Muy Largo' number: self validCreditCardNumber expiringOn: self nonExpiredMonthOfYear.
	
	self
		should: [ self checkout: cart using: cashier debitingOn: cardWithLongName registeringOn: salesList ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier nameTooLongToSendToMerchantProcessor.
			self assert: salesList isEmpty.
			self assert: merchantProcessor timesCalled isZero]! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 13:41:49' prior: 50480682!
test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig
	
	| cart cashier catalog salesList merchantProcessor |
	
	catalog := Dictionary with: 1->5000000000000000 with: 2->2.5.
	cart := Cart for: catalog.
	cart addBook: 1 quantity: 1.
	cart addBook: 2 quantity: 2.
	merchantProcessor := WorkingMerchantProcessor new.
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	
	self
		should: [ self checkout: cart using: cashier debitingOn: self validCreditCard registeringOn: salesList ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier amountTooBigToSendToMerchantProcessor.
			self assert: salesList isEmpty.
			self assert: merchantProcessor timesCalled isZero ]! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 13:42:28' prior: 50480724!
test08AmountIsSentFormattedToMerchantProcessor
	
	| cart cashier merchantProcessor salesList |
	
	cart := self defaultCart.
	merchantProcessor := WorkingMerchantProcessor new.
	cashier := Cashier debitingTo: merchantProcessor.
	salesList := OrderedCollection new.
	self checkout: cart using: cashier debitingOn: self validCreditCard registeringOn: salesList.
	
	self assert: '10.00' equals: merchantProcessor amountToDebit! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 13:42:59' prior: 50480738!
test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit
	
	| cart cashier salesList merchantProcessor |
	
	cart := self defaultCart.
	merchantProcessor := FailingMerchantProcessor new.
	salesList := OrderedCollection new.
	cashier := Cashier debitingTo: merchantProcessor.
	
	self
		should:	[ self checkout: cart using: cashier debitingOn: self validCreditCard registeringOn: salesList ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: FailingMerchantProcessor cannotProcessDebit.
			self assert: salesList isEmpty ]! !
!TusLibrosSystemFacade methodsFor: 'cart-checkout' stamp: 'fm 6/12/2022 13:45:46' prior: 50481343!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard sale cartSession |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionFromCartID: aCartID.
	sale := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: FixedGregorianDate today registeringOn: salesList.
	
	^ self nextTransactionID! !
!TusLibrosSystemFacade methodsFor: 'cart-checkout' stamp: 'fm 6/12/2022 13:45:55' prior: 50481710!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionFromCartID: aCartID.
	cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: FixedGregorianDate today registeringOn: salesList.
	
	^ self nextTransactionID! !
!Behavior method!
for: aCatalog
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aCatalog
			cover: (44 to: 51)
			declaredAt: (6 to: 13)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aCatalog
	(books _ [
	(Bag
		cover: (36 to: 38)
		declaredAt: (36 to: 38)) new ] valueCoveringAll:
		{40 to: 42})
		cover: (27 to: 31)
		declaredAt: (27 to: 31).
	(catalog _ aCatalog
		cover: (57 to: 64)
		declaredAt: (16 to: 23))
		cover: (46 to: 52)
		declaredAt: (46 to: 52).! !
!Behavior method!
isEmpty
	^ [
	(books
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
addBook: aBookISBN quantity: aQuantity
	[
	(self coverAll:
		{44 to: 47}) assertBookIsInCatalog:
		(aBookISBN
			cover: (72 to: 80)
			declaredAt: (10 to: 18)) ] valueCoveringAll:
		{49 to: 70}.
	[
	(self coverAll:
		{84 to: 87}) assertQuantityIsValid:
		(aQuantity
			cover: (112 to: 120)
			declaredAt: (30 to: 38)) ] valueCoveringAll:
		{89 to: 110}.
	[
	(books
		cover: (124 to: 128)
		declaredAt: (124 to: 128))
		add:
			(aBookISBN
				cover: (135 to: 143)
				declaredAt: (10 to: 18))
		withOccurrences:
			(aQuantity
				cover: (162 to: 170)
				declaredAt: (30 to: 38)) ] valueCoveringAll:
		{130 to: 133. 145 to: 160}.! !
!Behavior method!
assertBookIsInCatalog: aBookISBN
	[
	([
	(catalog
		cover: (37 to: 43)
		declaredAt: (37 to: 43)) includesKey:
		(aBookISBN
			cover: (58 to: 66)
			declaredAt: (24 to: 32)) ] valueCoveringAll:
		{45 to: 56}) ifFalse: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			([
			(self coverAll:
				{90 to: 93}) class ] valueCoveringAll:
				{95 to: 99}) bookNotInCatalogErrorDescription ] valueCoveringAll:
				{101 to: 132}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 76}.! !
!Behavior method!
assertQuantityIsValid: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) >
		(0 coverAll:
			{48 to: 48}) ] valueCoveringAll:
		{46 to: 46}) ifFalse: [
		[
		(self coverAll:
			{59 to: 62}) error:
			([
			([
			(self coverAll:
				{71 to: 74}) class ] valueCoveringAll:
				{76 to: 80}) nonPositiveBookQuantityErrorDescription ] valueCoveringAll:
				{82 to: 120}) ] valueCoveringAll:
			{64 to: 69} ]] valueCoveringAll:
		{50 to: 57}.
	[
	([
	(aQuantity
		cover: (126 to: 134)
		declaredAt: (24 to: 32)) isInteger ] valueCoveringAll:
		{136 to: 144}) ifFalse: [
		[
		(self coverAll:
			{155 to: 158}) error:
			([
			([
			(self coverAll:
				{167 to: 170}) class ] valueCoveringAll:
				{172 to: 176}) nonIntegerBookQuantityErrorDescription ] valueCoveringAll:
				{178 to: 215}) ] valueCoveringAll:
			{160 to: 165} ]] valueCoveringAll:
		{146 to: 153}.! !
!Behavior method!
hasBook: aBookISBN
	^ [
	(books
		cover: (25 to: 29)
		declaredAt: (25 to: 29)) includes:
		(aBookISBN
			cover: (41 to: 49)
			declaredAt: (10 to: 18)) ] valueCoveringAll:
		{31 to: 39}.! !

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
quantityOfBooksWithISBN: aBookISBN
	^ [
	(books
		cover: (42 to: 46)
		declaredAt: (42 to: 46)) occurrencesOf:
		(aBookISBN
			cover: (63 to: 71)
			declaredAt: (26 to: 34)) ] valueCoveringAll:
		{48 to: 61}.! !

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'fm 6/12/2022 13:46:03'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
bookNotInCatalogErrorDescription
	^ 'El libro no se encuentra en el catalogo.' coverAll:
		{38 to: 79}.! !

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
nonPositiveBookQuantityErrorDescription
	^ 'La cantidad de libros a agregar no es positiva.' coverAll:
		{45 to: 93}.! !

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
nonIntegerBookQuantityErrorDescription
	^ 'La cantidad de libros a agregar no es un numero entero.' coverAll:
		{44 to: 100}.! !

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
listContents
	^ [
	(books
		cover: (18 to: 22)
		declaredAt: (18 to: 22)) sortedElements ] valueCoveringAll:
		{24 to: 37}.! !

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'fm 6/12/2022 13:46:03'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
emptyOwnerNameErrorDescription
	^ 'El nombre de titular de la tarjeta esta vacio' coverAll:
		{37 to: 83}.! !
!Behavior method!
for: anOwner number: aCreditCardNumber expiringOn: aGregorianMonthOfYear
	[
	(self coverAll:
		{77 to: 80}) assertNumberHas16Digits:
		(aCreditCardNumber
			cover: (107 to: 123)
			declaredAt: (22 to: 38)) ] valueCoveringAll:
		{82 to: 105}.
	[
	(self coverAll:
		{127 to: 130}) assertOwnerNameIsNotBlank:
		(anOwner
			cover: (159 to: 165)
			declaredAt: (6 to: 12)) ] valueCoveringAll:
		{132 to: 157}.
	^ [
	([
	(self coverAll:
		{173 to: 176}) new ] valueCoveringAll:
		{178 to: 180})
		initializeFor:
			(anOwner
				cover: (197 to: 203)
				declaredAt: (6 to: 12))
		number:
			(aCreditCardNumber
				cover: (213 to: 229)
				declaredAt: (22 to: 38))
		expiringOn:
			(aGregorianMonthOfYear
				cover: (243 to: 263)
				declaredAt: (52 to: 72)) ] valueCoveringAll:
		{182 to: 195. 205 to: 211. 231 to: 241}.! !
!Behavior method!
assertNumberHas16Digits: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (48 to: 64)
		declaredAt: (26 to: 42)) numberOfDigitsInBase:
		(10 coverAll:
			{88 to: 89}) ] valueCoveringAll:
		{66 to: 86}) =
		(16 coverAll:
			{94 to: 95}) ] valueCoveringAll:
		{92 to: 92}) ifFalse: [
		[
		(self coverAll:
			{108 to: 111}) error:
			([
			(self coverAll:
				{120 to: 123}) invalidNumberOfDigitsErrorDescription ] valueCoveringAll:
				{125 to: 161}) ] valueCoveringAll:
			{113 to: 118} ]] valueCoveringAll:
		{98 to: 105}.! !
!Behavior method!
assertOwnerNameIsNotBlank: anOwner
	[
	([
	([
	(anOwner
		cover: (38 to: 44)
		declaredAt: (28 to: 34)) withBlanksTrimmed ] valueCoveringAll:
		{46 to: 62}) isEmpty ] valueCoveringAll:
		{64 to: 70}) ifTrue: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(self coverAll:
				{93 to: 96}) emptyOwnerNameErrorDescription ] valueCoveringAll:
				{98 to: 127}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{72 to: 78}.! !

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
invalidNumberOfDigitsErrorDescription
	^ 'El numero de tarjeta no tiene 16 digitos.' coverAll:
		{43 to: 85}.! !

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
initialize
	(timesCalled _ 0 coverAll:
		{28 to: 29})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).! !
!Behavior method!
debitingTo: aMerchantProcessor
	^ [
	([
	(self coverAll:
		{36 to: 39}) new ] valueCoveringAll:
		{41 to: 43}) initializeDebitingTo:
		(aMerchantProcessor
			cover: (67 to: 84)
			declaredAt: (13 to: 30)) ] valueCoveringAll:
		{45 to: 65}.! !
!Behavior method!
initializeDebitingTo: aMerchantProcessor
	(merchantProcessor _ aMerchantProcessor
		cover: (67 to: 84)
		declaredAt: (23 to: 40))
		cover: (46 to: 62)
		declaredAt: (46 to: 62).! !
!Behavior method!
initializeFor: anOwner number: aCreditCardNumber expiringOn: aGregorianMonthOfYear
	(owner _ anOwner
		cover: (96 to: 102)
		declaredAt: (16 to: 22))
		cover: (87 to: 91)
		declaredAt: (87 to: 91).
	(number _ aCreditCardNumber
		cover: (116 to: 132)
		declaredAt: (32 to: 48))
		cover: (106 to: 111)
		declaredAt: (106 to: 111).
	(expirationMonthOfYear _ aGregorianMonthOfYear
		cover: (161 to: 181)
		declaredAt: (62 to: 82))
		cover: (136 to: 156)
		declaredAt: (136 to: 156).! !
!Behavior method!
checkout: aCart for: aCustomerID withCard: aCreditCard on: aGregorianDate registeringOn: aSalesList
	| price |
	[
	(self coverAll:
		{117 to: 120}) assertCartIsNotEmpty:
		(aCart
			cover: (144 to: 148)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{122 to: 142}.
	(price _ [
	(aCart
		cover: (161 to: 165)
		declaredAt: (11 to: 15)) value ] valueCoveringAll:
		{167 to: 171})
		cover: (152 to: 156)
		declaredAt: (106 to: 110).
	[
	([
	(aCreditCard
		cover: (176 to: 186)
		declaredAt: (44 to: 54)) isExpiredOn:
		(aGregorianDate
			cover: (201 to: 214)
			declaredAt: (60 to: 73)) ] valueCoveringAll:
		{188 to: 199}) ifTrue: [
		[
		(self coverAll:
			{225 to: 228}) error:
			([
			([
			(self coverAll:
				{237 to: 240}) class ] valueCoveringAll:
				{242 to: 246}) expiredCreditCardErrorDescription ] valueCoveringAll:
				{248 to: 280}) ] valueCoveringAll:
			{230 to: 235} ]] valueCoveringAll:
		{217 to: 223}.
	[
	(self coverAll:
		{285 to: 288}) assertNameIsValidToSendToMerchantProcessor:
		(aCreditCard
			cover: (334 to: 344)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{290 to: 332}.
	[
	(self coverAll:
		{348 to: 351}) assertAmountIsValidToSendToMerchantProcessor:
		(price
			cover: (399 to: 403)
			declaredAt: (106 to: 110)) ] valueCoveringAll:
		{353 to: 397}.
	[
	(merchantProcessor
		cover: (409 to: 425)
		declaredAt: (409 to: 425))
		debit:
			([
			(self coverAll:
				{435 to: 438}) formatAmount:
				(price
					cover: (454 to: 458)
					declaredAt: (106 to: 110)) ] valueCoveringAll:
				{440 to: 452})
		from:
			(aCreditCard
				cover: (467 to: 477)
				declaredAt: (44 to: 54)) ] valueCoveringAll:
		{427 to: 432. 461 to: 465}.
	[
	(aSalesList
		cover: (482 to: 491)
		declaredAt: (90 to: 99)) add:
		([
		(Sale
			cover: (499 to: 502)
			declaredAt: (499 to: 502))
			of:
				([
				(aCart
					cover: (508 to: 512)
					declaredAt: (11 to: 15)) listContents ] valueCoveringAll:
					{514 to: 525})
			totalling:
				(price
					cover: (538 to: 542)
					declaredAt: (106 to: 110))
			to:
				(aCustomerID
					cover: (548 to: 558)
					declaredAt: (22 to: 32)) ] valueCoveringAll:
			{504 to: 506. 527 to: 536. 544 to: 546}) ] valueCoveringAll:
		{493 to: 496}.! !
!Behavior method!
assertCartIsNotEmpty: aCart
	^ [
	([
	(aCart
		cover: (33 to: 37)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{39 to: 45}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			([
			(self coverAll:
				{67 to: 70}) class ] valueCoveringAll:
				{72 to: 76}) emptyCartErrorDescription ] valueCoveringAll:
				{78 to: 102}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{47 to: 53}.! !
!Behavior method!
emptyCartErrorDescription
	^ 'El carrito esta vacio.' coverAll:
		{32 to: 55}.! !

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
value
	^ [
	(books
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) sum: [ :aBookISBN |
		[
		(catalog
			cover: (36 to: 42)
			declaredAt: (36 to: 42)) at:
			(aBookISBN
				cover: (48 to: 56)
				declaredAt: (23 to: 31)) ] valueCoveringAll:
			{44 to: 46} ]] valueCoveringAll:
		{16 to: 19}.! !
!Behavior method!
isExpiredOn: aFixedGregorianDate
	^ [
	([
	(expirationMonthOfYear
		cover: (38 to: 58)
		declaredAt: (38 to: 58)) lastDate ] valueCoveringAll:
		{60 to: 67}) <
		(aFixedGregorianDate
			cover: (71 to: 89)
			declaredAt: (14 to: 32)) ] valueCoveringAll:
		{69 to: 69}.! !
!Behavior method!
expiredCreditCardErrorDescription
	^ 'La tarjeta de credito esta vencida.' coverAll:
		{39 to: 75}.! !

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
assertNameIsValidToSendToMerchantProcessor: aCreditCard
	[
	([
	([
	([
	([
	(aCreditCard
		cover: (59 to: 69)
		declaredAt: (45 to: 55)) owner ] valueCoveringAll:
		{71 to: 75}) withBlanksTrimmed ] valueCoveringAll:
		{77 to: 93}) size ] valueCoveringAll:
		{95 to: 98}) >
		(30 coverAll:
			{102 to: 103}) ] valueCoveringAll:
		{100 to: 100}) ifTrue: [
		[
		(self coverAll:
			{115 to: 118}) error:
			([
			([
			(self coverAll:
				{127 to: 130}) class ] valueCoveringAll:
				{132 to: 136}) nameTooLongToSendToMerchantProcessor ] valueCoveringAll:
				{138 to: 173}) ] valueCoveringAll:
			{120 to: 125} ]] valueCoveringAll:
		{105 to: 111}.! !
!Behavior method!
owner
	^ owner
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
assertAmountIsValidToSendToMerchantProcessor: anAmount
	[
	([
	([
	([
	(anAmount
		cover: (59 to: 66)
		declaredAt: (47 to: 54)) truncated ] valueCoveringAll:
		{68 to: 76}) numberOfDigitsInBase:
		(10 coverAll:
			{100 to: 101}) ] valueCoveringAll:
		{78 to: 98}) >
		(15 coverAll:
			{107 to: 108}) ] valueCoveringAll:
		{105 to: 105}) ifTrue: [
		[
		(self coverAll:
			{120 to: 123}) error:
			([
			([
			(self coverAll:
				{132 to: 135}) class ] valueCoveringAll:
				{137 to: 141}) amountTooBigToSendToMerchantProcessor ] valueCoveringAll:
				{143 to: 179}) ] valueCoveringAll:
			{125 to: 130} ]] valueCoveringAll:
		{110 to: 116}.! !
!Behavior method!
formatAmount: anAmount
	^ [
	(anAmount
		cover: (28 to: 35)
		declaredAt: (15 to: 22)) printStringFractionDigits:
		(2 coverAll:
			{63 to: 64}) ] valueCoveringAll:
		{37 to: 62}.! !
!Behavior method!
debit: anAmount from: aCreditCard
	(amountToDebit _ anAmount
		cover: (54 to: 61)
		declaredAt: (8 to: 15))
		cover: (37 to: 49)
		declaredAt: (37 to: 49).
	(timesCalled _ [
	(timesCalled
		cover: (65 to: 75)
		declaredAt: (65 to: 75)) +
		(1 coverAll:
			{93 to: 94}) ] valueCoveringAll:
		{92 to: 92})
		cover: (80 to: 90)
		declaredAt: (65 to: 75).! !
!Behavior method!
of: itemsSold totalling: aPrice to: aCustomerID
	^ [
	([
	(self coverAll:
		{54 to: 57}) new ] valueCoveringAll:
		{59 to: 61})
		initializeOf:
			(itemsSold
				cover: (77 to: 85)
				declaredAt: (5 to: 13))
		totalling:
			(aPrice
				cover: (98 to: 103)
				declaredAt: (26 to: 31))
		to:
			(aCustomerID
				cover: (109 to: 119)
				declaredAt: (37 to: 47)) ] valueCoveringAll:
		{63 to: 75. 87 to: 96. 105 to: 107}.! !
!Behavior method!
initializeOf: itemsSold totalling: aPrice to: aCustomerID
	(items _ itemsSold
		cover: (71 to: 79)
		declaredAt: (15 to: 23))
		cover: (62 to: 66)
		declaredAt: (62 to: 66).
	(price _ aPrice
		cover: (92 to: 97)
		declaredAt: (36 to: 41))
		cover: (83 to: 87)
		declaredAt: (83 to: 87).
	(customerID _ aCustomerID
		cover: (115 to: 125)
		declaredAt: (47 to: 57))
		cover: (101 to: 110)
		declaredAt: (101 to: 110).! !

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 13:46:03'!
FAILURE!
!Behavior method!
nameTooLongToSendToMerchantProcessor
	^ 'El nombre del cliente debe tener como maximo 30 digitos.' coverAll:
		{42 to: 99}.! !
!Behavior method!
timesCalled
	^ timesCalled
		cover: (17 to: 27)
		declaredAt: (17 to: 27).! !

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
amountTooBigToSendToMerchantProcessor
	^ 'El monto puede tener hasta 15 digitos.' coverAll:
		{43 to: 82}.! !

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
amountToDebit
	^ amountToDebit
		cover: (19 to: 31)
		declaredAt: (19 to: 31).! !

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
debit: anAmount from: aCreditCard
	[
	(self coverAll:
		{37 to: 40}) error:
		([
		([
		(self coverAll:
			{49 to: 52}) class ] valueCoveringAll:
			{54 to: 58}) cannotProcessDebit ] valueCoveringAll:
			{60 to: 77}) ] valueCoveringAll:
		{42 to: 47}.! !
!Behavior method!
cannotProcessDebit
	^ 'No se puede procesar el pago.' coverAll:
		{24 to: 54}.! !

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
withCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	^ [
	([
	(self coverAll:
		{103 to: 106}) new ] valueCoveringAll:
		{108 to: 110})
		initializeWithCatalog:
			(aCatalog
				cover: (135 to: 142)
				declaredAt: (14 to: 21))
		withAuthenticator:
			(anAuthenticator
				cover: (163 to: 177)
				declaredAt: (42 to: 56))
		andMerchantProcessor:
			(aMerchantProcessor
				cover: (201 to: 218)
				declaredAt: (80 to: 97)) ] valueCoveringAll:
		{112 to: 133. 144 to: 161. 179 to: 199}.! !
!Behavior method!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	(lastCartID _ 0 coverAll:
		{126 to: 126})
		cover: (112 to: 121)
		declaredAt: (112 to: 121).
	(lastTransactionID _ 0 coverAll:
		{151 to: 151})
		cover: (130 to: 146)
		declaredAt: (130 to: 146).
	(cartSessions _ [
	(OrderedCollection
		cover: (171 to: 187)
		declaredAt: (171 to: 187)) new ] valueCoveringAll:
		{189 to: 191})
		cover: (155 to: 166)
		declaredAt: (155 to: 166).
	(catalog _ aCatalog
		cover: (206 to: 213)
		declaredAt: (24 to: 31))
		cover: (195 to: 201)
		declaredAt: (195 to: 201).
	(authenticator _ anAuthenticator
		cover: (234 to: 248)
		declaredAt: (52 to: 66))
		cover: (217 to: 229)
		declaredAt: (217 to: 229).
	(cashier _ [
	(Cashier
		cover: (263 to: 269)
		declaredAt: (263 to: 269)) debitingTo:
		(aMerchantProcessor
			cover: (283 to: 300)
			declaredAt: (90 to: 107)) ] valueCoveringAll:
		{271 to: 281})
		cover: (252 to: 258)
		declaredAt: (252 to: 258).
	(salesList _ [
	(Dictionary
		cover: (317 to: 326)
		declaredAt: (317 to: 326)) new ] valueCoveringAll:
		{328 to: 330})
		cover: (304 to: 312)
		declaredAt: (304 to: 312).
	(customerSales _ [
	(Dictionary
		cover: (351 to: 360)
		declaredAt: (317 to: 326)) new ] valueCoveringAll:
		{362 to: 364})
		cover: (334 to: 346)
		declaredAt: (334 to: 346).! !
!Behavior method!
createCartForCustomerID: aCustomerID andPassword: aPassword
	| newID |
	[
	(self coverAll:
		{75 to: 78})
		ifCanAuthenticateUsing:
			(aCustomerID
				cover: (106 to: 116)
				declaredAt: (26 to: 36))
		and:
			(aPassword
				cover: (125 to: 133)
				declaredAt: (51 to: 59))
		do: [
			(newID _ [
			(self coverAll:
				{155 to: 158}) nextCartID ] valueCoveringAll:
				{160 to: 169})
				cover: (146 to: 150)
				declaredAt: (65 to: 69).
			[
			(cartSessions
				cover: (175 to: 186)
				declaredAt: (175 to: 186)) add:
				([
				(CartSession
					cover: (194 to: 204)
					declaredAt: (194 to: 204))
					for:
						([
						(self coverAll:
							{211 to: 214}) emptyCart ] valueCoveringAll:
							{216 to: 224})
					withID:
						(newID
							cover: (234 to: 238)
							declaredAt: (65 to: 69))
					belongingTo:
						(aCustomerID
							cover: (253 to: 263)
							declaredAt: (26 to: 36)) ] valueCoveringAll:
					{206 to: 209. 226 to: 232. 240 to: 251}) ] valueCoveringAll:
				{188 to: 191} ]] valueCoveringAll:
		{82 to: 104. 120 to: 123. 137 to: 139}.
	^ newID
		cover: (275 to: 279)
		declaredAt: (65 to: 69).! !
!Behavior method!
ifCanAuthenticateUsing: aCustomerID and: aPassword do: aBlock
	[
	([
	(authenticator
		cover: (66 to: 78)
		declaredAt: (66 to: 78))
		authenticateUserID:
			(aCustomerID
				cover: (100 to: 110)
				declaredAt: (25 to: 35))
		withPassword:
			(aPassword
				cover: (126 to: 134)
				declaredAt: (42 to: 50)) ] valueCoveringAll:
		{80 to: 98. 112 to: 124})
		ifTrue:
			(aBlock
				cover: (147 to: 152)
				declaredAt: (56 to: 61))
		ifFalse: [
			[
			(self coverAll:
				{167 to: 170}) error:
				([
				([
				(self coverAll:
					{179 to: 182}) class ] valueCoveringAll:
					{184 to: 188}) authenticationErrorMessage ] valueCoveringAll:
					{190 to: 215}) ] valueCoveringAll:
				{172 to: 177} ]] valueCoveringAll:
		{139 to: 145. 156 to: 163}.! !
!Behavior method!
authenticateUserID: aCustomerID withPassword: aPassword
	^ true coverAll:
		{60 to: 63}.! !
!Behavior method!
nextCartID
	(lastCartID _ [
	(lastCartID
		cover: (15 to: 24)
		declaredAt: (15 to: 24)) +
		(1 coverAll:
			{42 to: 42}) ] valueCoveringAll:
		{40 to: 40})
		cover: (29 to: 38)
		declaredAt: (15 to: 24).
	^ lastCartID
		cover: (47 to: 56)
		declaredAt: (15 to: 24).! !
!Behavior method!
emptyCart
	^ [
	(Cart
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) for:
		(catalog
			cover: (25 to: 31)
			declaredAt: (25 to: 31)) ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
for: aCart withID: aCartID belongingTo: aCustomerID
	^ [
	([
	(self coverAll:
		{57 to: 60}) new ] valueCoveringAll:
		{62 to: 64})
		initializeFor:
			(aCart
				cover: (81 to: 85)
				declaredAt: (6 to: 10))
		withID:
			(aCartID
				cover: (95 to: 101)
				declaredAt: (20 to: 26))
		belongingTo:
			(aCustomerID
				cover: (116 to: 126)
				declaredAt: (41 to: 51)) ] valueCoveringAll:
		{66 to: 79. 87 to: 93. 103 to: 114}.! !
!Behavior method!
initializeFor: aCart withID: aCartID belongingTo: aCustomerID
	(cart _ aCart
		cover: (73 to: 77)
		declaredAt: (16 to: 20))
		cover: (65 to: 68)
		declaredAt: (65 to: 68).
	(cartID _ aCartID
		cover: (91 to: 97)
		declaredAt: (30 to: 36))
		cover: (81 to: 86)
		declaredAt: (81 to: 86).
	(customerID _ aCustomerID
		cover: (115 to: 125)
		declaredAt: (51 to: 61))
		cover: (101 to: 110)
		declaredAt: (101 to: 110).! !
!Behavior method!
listCartWithID: aCartID
	^ [
	([
	([
	(self coverAll:
		{30 to: 33}) cartSessionFromCartID:
		(aCartID
			cover: (58 to: 64)
			declaredAt: (17 to: 23)) ] valueCoveringAll:
		{35 to: 56}) cart ] valueCoveringAll:
		{67 to: 70}) listContents ] valueCoveringAll:
		{72 to: 83}.! !
!Behavior method!
cartSessionFromCartID: aCartID
	^ [
	(cartSessions
		cover: (36 to: 47)
		declaredAt: (36 to: 47))
		detect: [ :cartSession |
			[
			([
			(cartSession
				cover: (73 to: 83)
				declaredAt: (59 to: 69)) cartID ] valueCoveringAll:
				{85 to: 90}) =
				(aCartID
					cover: (94 to: 100)
					declaredAt: (24 to: 30)) ] valueCoveringAll:
				{92 to: 92} ]
		ifNone: [
			[
			(self coverAll:
				{112 to: 115}) error:
				([
				([
				(self coverAll:
					{124 to: 127}) class ] valueCoveringAll:
					{129 to: 133}) invalidCartIDErrorMessage ] valueCoveringAll:
					{135 to: 159}) ] valueCoveringAll:
				{117 to: 122} ]] valueCoveringAll:
		{49 to: 55. 103 to: 109}.! !
!Behavior method!
cartID
	^ cartID
		cover: (12 to: 17)
		declaredAt: (12 to: 17).! !
!Behavior method!
cart
	^ cart
		cover: (10 to: 13)
		declaredAt: (10 to: 13).! !

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
authenticateUserID: aCustomerID withPassword: aPassword
	^ false coverAll:
		{60 to: 64}.! !
!Behavior method!
authenticationErrorMessage
	^ 'Error al autenticarse.' coverAll:
		{31 to: 54}.! !

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
addToCartWithID: aCartID book: aBook quantity: aQuantity
	| cartSession |
	(cartSession _ [
	(self coverAll:
		{94 to: 97}) cartSessionFromCartID:
		(aCartID
			cover: (122 to: 128)
			declaredAt: (18 to: 24)) ] valueCoveringAll:
		{99 to: 120})
		cover: (79 to: 89)
		declaredAt: (62 to: 72).
	[
	([
	(cartSession
		cover: (132 to: 142)
		declaredAt: (62 to: 72)) cart ] valueCoveringAll:
		{144 to: 147})
		addBook:
			(aBook
				cover: (158 to: 162)
				declaredAt: (32 to: 36))
		quantity:
			(aQuantity
				cover: (174 to: 182)
				declaredAt: (48 to: 56)) ] valueCoveringAll:
		{149 to: 156. 164 to: 172}.! !

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
invalidCartIDErrorMessage
	^ 'El ID de carrito no es valido.' coverAll:
		{31 to: 62}.! !

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 13:46:03'!
PASSED!
!Behavior method!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner
	| creditCard cartSession |
	(creditCard _ [
	(CreditCard
		cover: (164 to: 173)
		declaredAt: (164 to: 173))
		for:
			(anOwner
				cover: (180 to: 186)
				declaredAt: (110 to: 116))
		number:
			(aCreditCardNumber
				cover: (196 to: 212)
				declaredAt: (52 to: 68))
		expiringOn:
			([
			(self coverAll:
				{227 to: 230}) createGregorianMonthOfYearFrom:
				(aMonthOfYearString
					cover: (264 to: 281)
					declaredAt: (82 to: 99)) ] valueCoveringAll:
				{232 to: 262}) ] valueCoveringAll:
		{175 to: 178. 188 to: 194. 214 to: 224})
		cover: (150 to: 159)
		declaredAt: (122 to: 131).
	(cartSession _ [
	(self coverAll:
		{303 to: 306}) cartSessionFromCartID:
		(aCartID
			cover: (331 to: 337)
			declaredAt: (21 to: 27)) ] valueCoveringAll:
		{308 to: 329})
		cover: (288 to: 298)
		declaredAt: (133 to: 143).
	[
	(cashier
		cover: (341 to: 347)
		declaredAt: (341 to: 347))
		checkout:
			([
			(cartSession
				cover: (359 to: 369)
				declaredAt: (133 to: 143)) cart ] valueCoveringAll:
				{371 to: 374})
		for:
			([
			(cartSession
				cover: (381 to: 391)
				declaredAt: (133 to: 143)) customerID ] valueCoveringAll:
				{393 to: 402})
		withCard:
			(creditCard
				cover: (414 to: 423)
				declaredAt: (122 to: 131))
		on:
			([
			(FixedGregorianDate
				cover: (429 to: 446)
				declaredAt: (429 to: 446)) today ] valueCoveringAll:
				{448 to: 452})
		registeringOn:
			(salesList
				cover: (469 to: 477)
				declaredAt: (469 to: 477)) ] valueCoveringAll:
		{349 to: 357. 376 to: 379. 404 to: 412. 425 to: 427. 454 to: 467}.
	^ [
	(self coverAll:
		{485 to: 488}) nextTransactionID ] valueCoveringAll:
		{490 to: 506}.! !
!Behavior method!
createGregorianMonthOfYearFrom: aMonthOfYearString
	(month _ [
	(Number
		cover: (63 to: 68)
		declaredAt: (63 to: 68)) readFrom:
		([
		(aMonthOfYearString
			cover: (81 to: 98)
			declaredAt: (33 to: 50)) first:
			(2 coverAll:
				{107 to: 107}) ] valueCoveringAll:
			{100 to: 105}) ] valueCoveringAll:
		{70 to: 78})
		cover: (54 to: 58)
		declaredAt: (54 to: 58).
	(year _ [
	(Number
		cover: (120 to: 125)
		declaredAt: (63 to: 68)) readFrom:
		([
		(aMonthOfYearString
			cover: (138 to: 155)
			declaredAt: (33 to: 50)) last:
			(4 coverAll:
				{163 to: 163}) ] valueCoveringAll:
			{157 to: 161}) ] valueCoveringAll:
		{127 to: 135})
		cover: (112 to: 115)
		declaredAt: (112 to: 115).
	^ [
	(GregorianMonthOfYear
		cover: (172 to: 191)
		declaredAt: (172 to: 191))
		yearNumber:
			(year
				cover: (205 to: 208)
				declaredAt: (112 to: 115))
		monthNumber:
			(month
				cover: (223 to: 227)
				declaredAt: (54 to: 58)) ] valueCoveringAll:
		{193 to: 203. 210 to: 221}.! !
!Behavior method!
customerID
	^ customerID
		cover: (16 to: 25)
		declaredAt: (16 to: 25).! !

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 13:46:03'!
ERROR!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 13:46:16'!
FAILURE!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 13:46:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 13:46:16'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 13:46:47'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 13:46:47'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'fm 6/12/2022 13:47:50' prior: 50481307!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	
	lastCartID := 0.
	lastTransactionID := 0.
	cartSessions := OrderedCollection new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cashier := Cashier debitingTo: aMerchantProcessor.
	salesList := OrderedCollection new.
	customerSales := Dictionary new! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 13:47:54'!
FAILURE!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 13:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 13:47:54'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 13:48:00'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 13:48:00'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'cart-list purchases' stamp: 'fm 6/12/2022 13:54:35' prior: 50477442!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	
	^ salesList collect: [:aSale | aSale belongsTo: aCustomerID ]! !
!Sale methodsFor: 'accessing' stamp: 'fm 6/12/2022 13:54:48'!
belongsTo

	^ customerID! !

!methodRemoval: Sale #customerID stamp: 'fm 6/12/2022 13:54:48'!
customerID

	^ customerID!
!Sale methodsFor: 'accessing' stamp: 'fm 6/12/2022 13:55:08'!
belongsTo: aCustomerID

	^ customerID! !

!methodRemoval: Sale #belongsTo stamp: 'fm 6/12/2022 13:55:08'!
belongsTo

	^ customerID!
!Sale methodsFor: 'accessing' stamp: 'fm 6/12/2022 13:55:21' prior: 50482827!
belongsTo: aCustomerID

	^ aCustomerID = customerID! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'fm 6/12/2022 13:59:08' prior: 50477631!
test05CheckoutCartWillAddSaleOnPurchaseListForCustomer

	| systemFacade cartID expectedResult transactionID |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	transactionID := systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
		
	expectedResult := OrderedCollection with: (Sale of: (systemFacade listCartWithID: cartID) totalling: 10 to: 'ID').
	
	self assert: expectedResult equals: (systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password')! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'fm 6/12/2022 13:59:23' prior: 50482839!
test05CheckoutCartWillAddSaleOnPurchaseListForCustomer

	| systemFacade cartID expectedResult |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
		
	expectedResult := OrderedCollection with: (Sale of: (systemFacade listCartWithID: cartID) totalling: 10 to: 'ID').
	
	self assert: expectedResult equals: (systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password')! !

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 13:59:26'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'cart-list purchases' stamp: 'fm 6/12/2022 14:01:02' prior: 50482815!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	
	^ salesList select: [:aSale | aSale belongsTo: aCustomerID ]! !

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:01:05'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:01:05'!
FAILURE!
!Sale methodsFor: 'initialization' stamp: 'fm 6/12/2022 14:18:28'!
listContents

	^ items->price! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'fm 6/12/2022 14:18:36' prior: 50482865!
test05CheckoutCartWillAddSaleOnPurchaseListForCustomer

	| systemFacade cartID purchases |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	Sale of: 1 totalling: 10 to: 'ID'.
	
	self
		assert: 1 equals: purchases size;
		assert: (systemFacade listCartWithID: cartID) equals: purchases any listContents;
		assert: purchases any belongsTo: 'ID'! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'fm 6/12/2022 14:18:42' prior: 50482913!
test05CheckoutCartWillAddSaleOnPurchaseListForCustomer

	| systemFacade cartID purchases |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	self
		assert: 1 equals: purchases size;
		assert: (systemFacade listCartWithID: cartID) equals: purchases any listContents;
		assert: purchases any belongsTo: 'ID'! !

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:18:44'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'fm 6/12/2022 14:19:01' prior: 50482940!
test05CheckoutCartWillAddSaleOnPurchaseListForCustomer

	| systemFacade cartID purchases |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	self
		assert: 1 equals: purchases size;
		assert: (systemFacade listCartWithID: cartID) equals: purchases first listContents;
		assert: purchases first belongsTo: 'ID'! !

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:19:02'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'fm 6/12/2022 14:22:27' prior: 50482969!
test05CheckoutCartWillAddSaleOnPurchaseListForCustomer

	| systemFacade cartID purchases |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	self
		assert: 1 equals: purchases size;
		assert: (systemFacade listCartWithID: cartID)->10 equals: purchases first listContents;
		assert: purchases first belongsTo: 'ID'! !

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:22:28'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'fm 6/12/2022 14:22:39' prior: 50482999!
test05CheckoutCartWillAddSaleOnPurchaseListForCustomer

	| systemFacade cartID purchases |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	self
		assert: 1 equals: purchases size;
		assert: (systemFacade listCartWithID: cartID)->10 equals: purchases first listContents;
		assert: (purchases first belongsTo: 'ID')! !

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:22:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 14:22:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 14:22:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 14:22:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 14:22:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:22:41'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'fm 6/12/2022 14:22:44'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'fm 6/12/2022 14:22:44'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 14:22:45'!
FAILURE!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:22:45'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 14:22:45'!
FAILURE!
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 14:26:21' prior: 50481599!
test05SaleIsRegisteredOnSalesListWithContentsAndPrice
	
	| cart cashier salesList |
	
	cart := self defaultCart.
	
	salesList := OrderedCollection new.
	cashier := self cashierWithWorkingMerchantProcessor.
	self checkout: cart using: cashier debitingOn: self validCreditCard registeringOn: salesList.
	
	self
		assert: 1 equals: salesList size;
		assert: salesList first listContents equals: cart listContents->(5 + (2*2.5));
		assert: (salesList first belongsTo: 1)! !

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 14:26:25'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 14:26:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 14:26:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 14:26:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 14:26:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 14:26:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:26:30'!
PASSED!
!Sale methodsFor: 'initialization' stamp: 'fm 6/12/2022 14:30:34'!
items

	^ items! !
!Sale methodsFor: 'initialization' stamp: 'fm 6/12/2022 14:30:39'!
price

	^ price! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'fm 6/12/2022 14:31:16' prior: 50483029!
test05CheckoutCartWillAddSaleOnPurchaseListForCustomer

	| systemFacade cartID purchases |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	self
		assert: 1 equals: purchases size;
		assert: (systemFacade listCartWithID: cartID) equals: purchases first items;
		assert: 10 equals: purchases first price;
		assert: (purchases first belongsTo: 'ID')! !

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:31:27'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 14:31:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:31:32'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 14:34:33' prior: 50483162!
test05SaleIsRegisteredOnSalesListWithContentsAndPrice
	
	| cart cashier salesList |
	
	cart := self defaultCart.
	
	salesList := OrderedCollection new.
	cashier := self cashierWithWorkingMerchantProcessor.
	self checkout: cart using: cashier debitingOn: self validCreditCard registeringOn: salesList.
	
	self
		assert: 1 equals: salesList size;
		assert: cart listContents equals: salesList first items;
		assert: 5 + (2*2.5) equals: salesList first price;
		assert: (salesList first belongsTo: 1)! !

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 14:34:33'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 14:34:34'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 14:34:34'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 14:34:34'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 14:34:34'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 14:34:34'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 14:34:34'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 14:34:34'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 14:34:34'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 14:34:34'!
PASSED!

!methodRemoval: Sale #listContents stamp: 'fm 6/12/2022 14:34:48'!
listContents

	^ items->price!
!CheckoutTest methodsFor: 'test-support' stamp: 'fm 6/12/2022 14:43:07' prior: 50481532!
checkout: aCart using: aCashier debitingOn: aCreditCard registeringOn: aSalesList

	^ aCashier checkout: aCart for: 'ID' withCard: aCreditCard on: self today registeringOn: aSalesList! !
!CheckoutTest methodsFor: 'tests' stamp: 'fm 6/12/2022 14:43:12' prior: 50483382!
test05SaleIsRegisteredOnSalesListWithContentsAndPrice
	
	| cart cashier salesList |
	
	cart := self defaultCart.
	
	salesList := OrderedCollection new.
	cashier := self cashierWithWorkingMerchantProcessor.
	self checkout: cart using: cashier debitingOn: self validCreditCard registeringOn: salesList.
	
	self
		assert: 1 equals: salesList size;
		assert: cart listContents equals: salesList first items;
		assert: 5 + (2*2.5) equals: salesList first price;
		assert: (salesList first belongsTo: 'ID')! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'fm 6/12/2022 14:43:19'!
PASSED!

----SNAPSHOT----(12 June 2022 14:46:26) CuisUniversity-5096.image priorSource: 4731503!

----SNAPSHOT----(12 June 2022 14:50:15) CuisUniversity-5096.image priorSource: 4860753!

----STARTUP---- (12 June 2022 18:25:23) as /mnt/c/Users/Ari/Desktop/Ingenieria/CuisUniversity/TusLibros-03/linux64/CuisUniversity-5096.image!


!methodRemoval: Cashier #checkout:withCard:on: stamp: 'AEC 6/12/2022 18:46:54'!
checkout: aCart withCard: aCreditCard on: aGregorianDate  
	
	| price |
	
	self assertCartIsNotEmpty: aCart.
	price := aCart value.
	(aCreditCard isExpiredOn: aGregorianDate) ifTrue:[self error: self class expiredCreditCardErrorDescription].
	self assertNameIsValidToSendToMerchantProcessor: aCreditCard.
	self assertAmountIsValidToSendToMerchantProcessor: price.
	
	merchantProcessor debit: (self formatAmount: price) from: aCreditCard.
	^ aCart listContents -> price!
!Sale methodsFor: 'initialization' stamp: 'AEC 6/12/2022 19:03:22'!
initializeOf: itemsSold totalling: aPrice to: aCustomerID withTransactionID: aTransactionID  

	items := itemsSold.
	price := aPrice.
	customerID := aCustomerID! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 19:03:22' prior: 50481491!
of: itemsSold totalling: aPrice to: aCustomerID 

	^ self new initializeOf: itemsSold totalling: aPrice to: aCustomerID withTransactionID: transactionID ! !

!methodRemoval: Sale #initializeOf:totalling:to: stamp: 'AEC 6/12/2022 19:03:22'!
initializeOf: itemsSold totalling: aPrice to: aCustomerID 

	items := itemsSold.
	price := aPrice.
	customerID := aCustomerID!

!classDefinition: #Sale category: 'TusLibros' stamp: 'AEC 6/12/2022 19:03:39'!
Object subclass: #Sale
	instanceVariableNames: 'items price customerID transactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'AEC 6/12/2022 19:03:37' prior: 50483579!
initializeOf: itemsSold totalling: aPrice to: aCustomerID withTransactionID: aTransactionID  

	transactionID := aTransactionID.
	items := itemsSold.
	price := aPrice.
	customerID := aCustomerID! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 19:04:50'!
of: itemsSold totalling: aPrice to: aCustomerID withTransactionID: aTransactionID  

	^ self new initializeOf: itemsSold totalling: aPrice to: aCustomerID withTransactionID: transactionID ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 19:04:50' prior: 50481440!
checkout: aCart for: aCustomerID withCard: aCreditCard on: aGregorianDate registeringOn: aSalesList 

	| price |
	
	self assertCartIsNotEmpty: aCart.
	price := aCart value.
	(aCreditCard isExpiredOn: aGregorianDate) ifTrue:[self error: self class expiredCreditCardErrorDescription].
	self assertNameIsValidToSendToMerchantProcessor: aCreditCard.
	self assertAmountIsValidToSendToMerchantProcessor: price.
	
	merchantProcessor debit: (self formatAmount: price) from: aCreditCard.

	aSalesList add: (Sale of: aCart listContents totalling: price to: aCustomerID withTransactionID: transactionID)! !

!methodRemoval: Sale class #of:totalling:to: stamp: 'AEC 6/12/2022 19:04:50'!
of: itemsSold totalling: aPrice to: aCustomerID 

	^ self new initializeOf: itemsSold totalling: aPrice to: aCustomerID withTransactionID: transactionID !
!Cashier methodsFor: 'paying' stamp: 'AEC 6/12/2022 19:05:21' prior: 50483628!
checkout: aCart for: aCustomerID withCard: aCreditCard on: aGregorianDate registeringOn: aSalesList 

	| price transactionID |
	
	self assertCartIsNotEmpty: aCart.
	price := aCart value.
	(aCreditCard isExpiredOn: aGregorianDate) ifTrue:[self error: self class expiredCreditCardErrorDescription].
	self assertNameIsValidToSendToMerchantProcessor: aCreditCard.
	self assertAmountIsValidToSendToMerchantProcessor: price.
	
	merchantProcessor debit: (self formatAmount: price) from: aCreditCard.

	transactionID := self nextTransactionID.
	aSalesList add: (Sale of: aCart listContents totalling: price to: aCustomerID withTransactionID: transactionID).
	
	^transactionID! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'AEC 6/12/2022 19:06:02'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor lastTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'nil' stamp: 'AEC 6/12/2022 19:05:57'!
nextTransactionID
	
	lastTransactionID := lastTransactionID + 1.
	^lastTransactionID! !

!methodRemoval: TusLibrosSystemFacade #nextTransactionID stamp: 'AEC 6/12/2022 19:07:25'!
nextTransactionID
	
	lastTransactionID := lastTransactionID + 1.
	^lastTransactionID!
!TusLibrosSystemFacade methodsFor: 'cart-checkout' stamp: 'AEC 6/12/2022 19:07:59' prior: 50481730!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionFromCartID: aCartID.
	transactionID := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: FixedGregorianDate today registeringOn: salesList.
	
	^transactionID ! !
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AEC 6/12/2022 19:10:00' prior: 50482710!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	
	lastCartID := 0.
	cartSessions := OrderedCollection new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cashier := Cashier debitingTo: aMerchantProcessor.
	salesList := OrderedCollection new.
	customerSales := Dictionary new! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AEC 6/12/2022 19:10:06'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'cartSessions lastCartID catalog authenticator cashier salesList customerSales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AEC 6/12/2022 19:11:20' prior: 50483720!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	
	lastCartID := 0.
	cartSessions := OrderedCollection new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cashier := Cashier debitingTo: aMerchantProcessor.
	salesList := OrderedCollection new! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AEC 6/12/2022 19:12:23'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'cartSessions lastCartID catalog authenticator cashier salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'accessing' stamp: 'AEC 6/12/2022 19:15:55' prior: 50474431!
listContents
	
	^books copy! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 19:15:58'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 19:15:58'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 19:15:58'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 19:15:58'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 19:15:58'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 19:15:58'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 19:15:58'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 19:15:58'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 19:15:58'!
FAILURE!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 19:15:58'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 19:15:58'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 19:15:59'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 19:15:59'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 19:15:59'!
ERROR!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 19:15:59'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 19:15:59'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 19:15:59'!
ERROR!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 19:15:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 19:15:59'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 19:15:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:15:59'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 19:15:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'AEC 6/12/2022 19:15:59'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:18:15' prior: 50474179!
test09ListOfCartWithBooksReturnsBooksAndQuantities

	| cart catalog expectedResult |
	
	catalog := Dictionary with: 1->5 with: 2->2.5 with: 3->1.
	cart := Cart for: catalog.
	
	cart addBook: 1 quantity: 2.
	cart addBook: 2 quantity: 3.
	cart addBook: 3 quantity: 7.
	cart addBook: 1 quantity: 2.
	
	expectedResult := Bag new 
					add: 1 withOccurrences: 4;
					add: 2 withOccurrences: 3;
					add: 3 withOccurrences: 7; yourself.
					
	self assert: expectedResult equals: cart listContents ! !

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 19:18:17'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 19:18:17'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 19:18:17'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 19:18:17'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 19:18:17'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 19:18:17'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 19:18:17'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 19:18:17'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 19:18:17'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 19:18:17'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 19:18:25'!
ERROR!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 19:18:25'!
ERROR!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 19:18:25'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:18:25'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 19:18:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'AEC 6/12/2022 19:18:25'!
ERROR!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 19:19:10'!
ERROR!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 19:19:10'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'AEC 6/12/2022 19:19:41' prior: 50476542!
initializeDebitingTo: aMerchantProcessor 
	
	merchantProcessor := aMerchantProcessor.
	lastTransactionID := 0! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 19:19:44'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:19:44'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'AEC 6/12/2022 19:19:44'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:19:51' prior: 50476268!
test01ListCartOfNewlyCreatedCartIsEmpty

	| cartID systemFacade |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'.
	
	self assert: Bag new equals: (systemFacade listCartWithID: cartID).
	
	
	
	
	
	
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:20:36' prior: 50476389!
test03ListCartWithBooksAddedWillShowThem

	| systemFacade cartID expectedResult |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'.
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	
	expectedResult := Bag new add: 1 withOccurrences: 2.
	
	self assert: expectedResult equals: (systemFacade listCartWithID: cartID)
	
	
	
	
	
	
	! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:20:45'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'AEC 6/12/2022 19:20:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:20:45'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:21:16' prior: 50484092!
test03ListCartWithBooksAddedWillShowThem

	| systemFacade cartID expectedResult |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'.
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	
	expectedResult := Bag new add: 1 withOccurrences: 2 yourself.
	
	self assert: expectedResult equals: (systemFacade listCartWithID: cartID)
	
	
	
	
	
	
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:21:36' prior: 50484194!
test03ListCartWithBooksAddedWillShowThem

	| systemFacade cartID expectedResult |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'.
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	
	expectedResult := Bag new.
	expectedResult add: 1 withOccurrences: 2.
	
	self assert: expectedResult equals: (systemFacade listCartWithID: cartID)
	
	
	
	
	
	
	! !

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:21:39'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'AEC 6/12/2022 19:21:41'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'cart-list purchases' stamp: 'AEC 6/12/2022 19:26:45' prior: 50482894!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	
	| customerSales totalAmount |
	customerSales := Bag new.
	totalAmount := 0.
	
	salesList do: [:aSale | (aSale belongsTo: aCustomerID) ifTrue: [
			customerSales addAll: aSale items.
			totalAmount := totalAmount + aSale price.
	]].
	
	! !
!TusLibrosSystemFacade methodsFor: 'cart-list purchases' stamp: 'AEC 6/12/2022 19:28:26' prior: 50484314!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	
	| customerPurchases totalAmount |
	customerPurchases := Bag new.
	totalAmount := 0.
	
	salesList do: [:aSale | (aSale belongsTo: aCustomerID) ifTrue: [
			customerPurchases addAll: aSale items.
			totalAmount := totalAmount + aSale price.
	]].

	^ customerPurchases -> totalAmount 
	
	! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 19:29:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 19:29:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:29:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 19:29:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'AEC 6/12/2022 19:29:44'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'AEC 6/12/2022 19:29:44'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:30:44' prior: 50483271!
test05CheckoutCartWillAddSaleOnPurchaseListForCustomer

	| systemFacade cartID purchases |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	self
		assert: 1 equals: purchases size;
		assert: (systemFacade listCartWithID: cartID) equals: purchases key;
		assert: 10 equals: purchases value;
		assert: (purchases first belongsTo: 'ID')! !

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'AEC 6/12/2022 19:30:45'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:32:13' prior: 50484427!
test05CheckoutCartWillAddSaleOnPurchaseListForCustomer

	| systemFacade cartID purchases |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	self
		assert: (systemFacade listCartWithID: cartID) equals: purchases key;
		assert: 10 equals: purchases value! !

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'AEC 6/12/2022 19:32:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 19:32:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 19:32:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:32:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 19:32:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'AEC 6/12/2022 19:32:16'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:36:01'!
test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer

	| systemFacade cartID purchases |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	self
		assert: (systemFacade listCartWithID: cartID) equals: purchases key;
		assert: 10 equals: purchases value! !

!methodRemoval: TusLibrosSystemFacadeTest #test05CheckoutCartWillAddSaleOnPurchaseListForCustomer stamp: 'AEC 6/12/2022 19:36:13'!
test05CheckoutCartWillAddSaleOnPurchaseListForCustomer

	| systemFacade cartID purchases |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	self
		assert: (systemFacade listCartWithID: cartID) equals: purchases key;
		assert: 10 equals: purchases value!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 19:36:44'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:43:41'!
test06

	| systemFacade cartID |
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog 
					withAuthenticator: FailingAuthenticator new
					andMerchantProcessor: WorkingMerchantProcessor new.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	self 
		should: [systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withMessageText: TusLibrosSystemFacade authenticationErrorMessage.
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:43:53' prior: 50484634!
test06

	| systemFacade |
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog 
					withAuthenticator: FailingAuthenticator new
					andMerchantProcessor: WorkingMerchantProcessor new.
	
	systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	self 
		should: [systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withMessageText: TusLibrosSystemFacade authenticationErrorMessage.
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:44:14' prior: 50484652!
test06

	| systemFacade |
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog 
					withAuthenticator: FailingAuthenticator new
					andMerchantProcessor: WorkingMerchantProcessor new.
	
	self 
		should: [systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withMessageText: TusLibrosSystemFacade authenticationErrorMessage.
		! !

!testRun: #TusLibrosSystemFacadeTest #test06 stamp: 'AEC 6/12/2022 19:44:15'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'cart-list purchases' stamp: 'AEC 6/12/2022 19:46:00' prior: 50484327!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	
	| customerPurchases totalAmount |
	
	
	self
		ifCanAuthenticateUsing: aCustomerID
		and: aPassword
		do: [ self getAllPurchasesFrom: aCustomerID ].
	
	
	
	customerPurchases := Bag new.
	totalAmount := 0.
	
	salesList do: [:aSale | (aSale belongsTo: aCustomerID) ifTrue: [
			customerPurchases addAll: aSale items.
			totalAmount := totalAmount + aSale price.
	]].

	^ customerPurchases -> totalAmount 
	
	! !
!TusLibrosSystemFacade methodsFor: 'cart-list purchases' stamp: 'AEC 6/12/2022 19:46:11' prior: 50484689!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	
	self
		ifCanAuthenticateUsing: aCustomerID
		and: aPassword
		do: [ self getAllPurchasesFrom: aCustomerID ].
	
	! !
!TusLibrosSystemFacade methodsFor: 'cart-list purchases' stamp: 'AEC 6/12/2022 19:46:16' prior: 50484708!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	
	self
		ifCanAuthenticateUsing: aCustomerID
		and: aPassword
		do: [ self getAllPurchasesFrom: aCustomerID ].
	
	! !
!TusLibrosSystemFacade methodsFor: 'cart-list purchases' stamp: 'AEC 6/12/2022 19:47:21'!
getAllPurchasesFrom: aCustomerID

	| customerPurchases totalAmount |
	customerPurchases := Bag new.
	totalAmount := 0.
	
	salesList do: [:aSale | (aSale belongsTo: aCustomerID) ifTrue: [
			customerPurchases addAll: aSale items.
			totalAmount := totalAmount + aSale price.
	]].

	^ customerPurchases -> totalAmount ! !
!TusLibrosSystemFacade methodsFor: 'cart-list purchases' stamp: 'AEC 6/12/2022 19:47:26' prior: 50484726!
getAllPurchasesFrom: aCustomerID

	| customerPurchases totalAmount |
	
	customerPurchases := Bag new.
	totalAmount := 0.
	
	salesList do: [:aSale | (aSale belongsTo: aCustomerID) ifTrue: [
			customerPurchases addAll: aSale items.
			totalAmount := totalAmount + aSale price.
	]].

	^ customerPurchases -> totalAmount ! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 19:47:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 19:47:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 19:47:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:47:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 19:47:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 19:47:49'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test06 stamp: 'AEC 6/12/2022 19:47:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 19:47:49'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'cart-list purchases' stamp: 'AEC 6/12/2022 19:48:01' prior: 50484717!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	
	self
		ifCanAuthenticateUsing: aCustomerID
		and: aPassword
		do: [ ^self getAllPurchasesFrom: aCustomerID ].
	
	! !

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 19:48:03'!
ERROR!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 19:48:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 19:48:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 19:48:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 19:48:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 19:48:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06 stamp: 'AEC 6/12/2022 19:48:10'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:48:30'!
test06CantListPurchasesWithInvalidCredentials

	| systemFacade |
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog 
					withAuthenticator: FailingAuthenticator new
					andMerchantProcessor: WorkingMerchantProcessor new.
	
	self 
		should: [systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withMessageText: TusLibrosSystemFacade authenticationErrorMessage.
		! !

!methodRemoval: TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 19:48:36'!
test06CantListPurchasesWithInvalidCredentials

	| systemFacade |
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog 
					withAuthenticator: FailingAuthenticator new
					andMerchantProcessor: WorkingMerchantProcessor new.
	
	self 
		should: [systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withMessageText: TusLibrosSystemFacade authenticationErrorMessage.
		!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 19:48:51'!
test06CantListPurchasesWithInvalidCredentials

	| systemFacade |
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog 
					withAuthenticator: FailingAuthenticator new
					andMerchantProcessor: WorkingMerchantProcessor new.
	
	self 
		should: [systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withMessageText: TusLibrosSystemFacade authenticationErrorMessage.
		! !

!methodRemoval: TusLibrosSystemFacadeTest #test06 stamp: 'AEC 6/12/2022 19:48:51'!
test06

	| systemFacade |
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog 
					withAuthenticator: FailingAuthenticator new
					andMerchantProcessor: WorkingMerchantProcessor new.
	
	self 
		should: [systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withMessageText: TusLibrosSystemFacade authenticationErrorMessage.
		!

FixedGregorianDate!
!Sale methodsFor: 'accessing' stamp: 'AEC 6/12/2022 20:24:34' prior: 50483264!
items

	^ items copy! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 20:57:19'!
test07CartIDIsNotValidAnymoreAfterCheckout

	| systemFacade cartID |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	
	self
		should: [systemFacade listCartWithID: 'ID']
		raise: Error
		withMessageText: TusLibrosSystemFacade invalidCartIDErrorMessage! !

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 20:57:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 20:57:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 20:57:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 20:57:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 20:57:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 20:57:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 20:57:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 20:57:26'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 20:57:36' prior: 50485010!
test07CartIDIsNotValidAnymoreAfterCheckout

	| systemFacade cartID |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	
	self
		should: [systemFacade listCartWithID: cartID ]
		raise: Error
		withMessageText: TusLibrosSystemFacade invalidCartIDErrorMessage! !

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 20:57:36'!
FAILURE!

----SNAPSHOT----(12 June 2022 21:21:47) CuisUniversity-5096.image priorSource: 4860931!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AEC 6/12/2022 21:22:22' prior: 50483744!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	
	lastCartID := 0.
	cartSessions := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cashier := Cashier debitingTo: aMerchantProcessor.
	salesList := OrderedCollection new! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 21:25:12' prior: 50481331!
createCartForCustomerID: aCustomerID andPassword: aPassword

	| newID |

	self
		ifCanAuthenticateUsing: aCustomerID
		and: aPassword
		do: [
			newID := self nextCartID.
			cartSessions at: newID put: (CartSession for: self emptyCart withID: newID belongingTo: aCustomerID)
		].

	^ newID! !
!TusLibrosSystemFacade methodsFor: 'accessing - private' stamp: 'AEC 6/12/2022 21:27:01' prior: 50481322!
cartSessionFromCartID: aCartID

	^ cartSessions at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage]! !
!TusLibrosSystemFacade methodsFor: 'accessing - private' stamp: 'AEC 6/12/2022 21:27:15'!
cartSessionForCartID: aCartID

	^ cartSessions at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 21:27:15' prior: 50483700!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionForCartID: aCartID.
	transactionID := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: FixedGregorianDate today registeringOn: salesList.
	
	^transactionID ! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 21:27:15' prior: 50481209!
listCartWithID: aCartID

	^ (self cartSessionForCartID: aCartID) cart listContents! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 21:27:15' prior: 50481200!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cartSession |
	
	cartSession := self cartSessionForCartID: aCartID.
	cartSession cart addBook: aBook quantity: aQuantity! !

!methodRemoval: TusLibrosSystemFacade #cartSessionFromCartID: stamp: 'AEC 6/12/2022 21:27:15'!
cartSessionFromCartID: aCartID

	^ cartSessions at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage]!
!TusLibrosSystemFacade methodsFor: 'accessing - private' stamp: 'AEC 6/12/2022 21:27:29'!
cartSessionFor: aCartID

	^ cartSessions at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 21:27:29' prior: 50485157!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cartSession |
	
	cartSession := self cartSessionFor: aCartID.
	cartSession cart addBook: aBook quantity: aQuantity! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 21:27:29' prior: 50485151!
listCartWithID: aCartID

	^ (self cartSessionFor: aCartID) cart listContents! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 21:27:29' prior: 50485131!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionFor: aCartID.
	transactionID := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: FixedGregorianDate today registeringOn: salesList.
	
	^transactionID ! !

!methodRemoval: TusLibrosSystemFacade #cartSessionForCartID: stamp: 'AEC 6/12/2022 21:27:29'!
cartSessionForCartID: aCartID

	^ cartSessions at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage]!

!methodRemoval: CartSession #cartID stamp: 'AEC 6/12/2022 21:32:11'!
cartID

	^ cartID!
!CartSession methodsFor: 'initialization' stamp: 'AEC 6/12/2022 21:32:36' prior: 50481074!
initializeFor: aCart withID: aCartID belongingTo: aCustomerID

	cart := aCart.
	customerID := aCustomerID! !
!CartSession methodsFor: 'initialization' stamp: 'AEC 6/12/2022 21:32:44'!
initializeFor: aCart belongingTo: aCustomerID

	cart := aCart.
	customerID := aCustomerID! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 21:32:44' prior: 50481003!
for: aCart withID: aCartID belongingTo: aCustomerID

	^ self new initializeFor: aCart belongingTo: aCustomerID! !

!methodRemoval: CartSession #initializeFor:withID:belongingTo: stamp: 'AEC 6/12/2022 21:32:44'!
initializeFor: aCart withID: aCartID belongingTo: aCustomerID

	cart := aCart.
	customerID := aCustomerID!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 21:33:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 21:33:37'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 21:33:37'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 21:38:10' prior: 50485195!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionForCartID: aCartID.
	transactionID := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: FixedGregorianDate today registeringOn: salesList.
	
	cartSessions remove: aCartID.
	
	^transactionID ! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 21:39:04' prior: 50485344!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionForCartID: aCartID.
	transactionID := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: FixedGregorianDate today registeringOn: salesList.
	
	cartSessions removeKey: aCartID.
	
	^transactionID ! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 21:39:33' prior: 50485365!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionFor: aCartID.
	transactionID := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: FixedGregorianDate today registeringOn: salesList.
	
	cartSessions removeKey: aCartID.
	
	^transactionID ! !

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 21:39:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 21:39:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 21:39:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 21:39:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 21:39:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 21:39:38'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 21:39:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 21:39:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 21:39:38'!
ERROR!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 21:39:52'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 21:39:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 21:39:52'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 21:40:08'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 21:40:08'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 21:43:08' prior: 50484504!
test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer

	| systemFacade cartID purchases expectedPurchasedItems |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYearString 
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	expectedPurchasedItems := Bag new.
	expectedPurchasedItems add: 1 withOccurrences: 2.
	
	self
		assert: expectedPurchasedItems equals: purchases key;
		assert: 10 equals: purchases value! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 21:43:13'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 21:44:41'!
test08

	| systemFacade cartID |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	self
		should: [ systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 21:44:46'!
ERROR!
!TusLibrosSystemFacade class methodsFor: 'error-description' stamp: 'AEC 6/12/2022 21:45:14'!
expiredCartErrorMessage
	self shouldBeImplemented.! !
!TusLibrosSystemFacade class methodsFor: 'error-description' stamp: 'AEC 6/12/2022 21:47:41' prior: 50485678!
expiredCartErrorMessage
	
	^'El carrito ha expirado.'! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 21:47:42'!
FAILURE!
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'AEC 6/12/2022 22:00:14'!
withCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock 
	
	^self new initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 22:00:14' prior: 50477111!
test02CannotCreateCartWithInvalidCredentials

	| systemFacade |
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: FailingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	self
		should:[systemFacade createCartForCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withExceptionDo:[:anError |
			self assert: anError messageText equals: TusLibrosSystemFacade authenticationErrorMessage.	
		]
	
	
	
	
	
	! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 22:00:14' prior: 50484974!
test06CantListPurchasesWithInvalidCredentials

	| systemFacade |
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog 
					withAuthenticator: FailingAuthenticator new
					andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	self 
		should: [systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withMessageText: TusLibrosSystemFacade authenticationErrorMessage.
		! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 22:00:14' prior: 50477102!
defaultSystemFacade

	^ TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock! !

!methodRemoval: TusLibrosSystemFacade class #withCatalog:withAuthenticator:andMerchantProcessor: stamp: 'AEC 6/12/2022 22:00:15'!
withCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	
	^self new initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AEC 6/12/2022 22:02:26'!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock 
	
	lastCartID := 0.
	cartSessions := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cashier := Cashier debitingTo: aMerchantProcessor.
	salesList := OrderedCollection new! !
!TusLibrosSystemFacade class methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 22:02:26' prior: 50485692!
withCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock 
	
	^self new initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: clock! !

!methodRemoval: TusLibrosSystemFacade #initializeWithCatalog:withAuthenticator:andMerchantProcessor: stamp: 'AEC 6/12/2022 22:02:26'!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor
	
	lastCartID := 0.
	cartSessions := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cashier := Cashier debitingTo: aMerchantProcessor.
	salesList := OrderedCollection new!

!classDefinition: #ClockTestDouble category: 'ClockTestDouble' stamp: 'AEC 6/12/2022 22:03:43'!
Object subclass: #ClockTestDouble
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ClockTestDouble'!
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/12/2022 22:03:35' prior: 50485740!
defaultSystemFacade

	^ TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: (ClockTestDouble withCurrentTime: GregorianDateTime now).! !

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 22:03:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 22:03:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 22:03:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 22:03:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 22:03:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 22:03:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 22:03:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:03:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 22:04:01'!
ERROR!
!ClockTestDouble class methodsFor: 'instance creation' stamp: 'AEC 6/12/2022 22:04:06'!
withCurrentTime: aGregorianDateTime 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCurrentTime: aGregorianDateTime ! !
!ClockTestDouble class methodsFor: 'instance creation' stamp: 'AEC 6/12/2022 22:04:25' prior: 50485852!
withCurrentTime: aGregorianDateTime 

	^self new initializeWithCurrentTime: aGregorianDateTime! !

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 22:04:28'!
ERROR!

!classDefinition: #ClockTestDouble category: 'ClockTestDouble' stamp: 'AEC 6/12/2022 22:04:35'!
Object subclass: #ClockTestDouble
	instanceVariableNames: 'gregorianDateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ClockTestDouble'!
!ClockTestDouble methodsFor: 'initialization' stamp: 'AEC 6/12/2022 22:04:35'!
initializeWithCurrentTime: aGregorianDateTime 
	self shouldBeImplemented.
	gregorianDateTime := aGregorianDateTime.! !

!classDefinition: #ClockTestDouble category: 'ClockTestDouble' stamp: 'AEC 6/12/2022 22:05:06'!
Object subclass: #ClockTestDouble
	instanceVariableNames: 'gregorianDateTime time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ClockTestDouble'!
!ClockTestDouble methodsFor: 'initialization' stamp: 'AEC 6/12/2022 22:05:02' prior: 50485880!
initializeWithCurrentTime: aGregorianDateTime 
	
	time := aGregorianDateTime.! !

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 22:05:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 22:05:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 22:05:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 22:05:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 22:05:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 22:05:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 22:05:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 22:05:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:05:09'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:05:09'!
FAILURE!

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NameOfSubclass category: 'TusLibros' stamp: 'AEC 6/12/2022 22:05:31'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #NameOfSubclass stamp: 'AEC 6/12/2022 22:05:50'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #ClockTestDouble
	instanceVariableNames: 'gregorianDateTime time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClockTestDouble category: 'TusLibros' stamp: 'AEC 6/12/2022 22:06:10'!
Object subclass: #ClockTestDouble
	instanceVariableNames: 'gregorianDateTime time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClockTestDouble methodsFor: 'initialization' stamp: 'AEC 6/12/2022 22:06:31'!
initializeWithTime: aGregorianDateTime 
	
	time := aGregorianDateTime.! !
!ClockTestDouble class methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 22:06:31' prior: 50485862!
withCurrentTime: aGregorianDateTime 

	^self new initializeWithTime: aGregorianDateTime! !

!methodRemoval: ClockTestDouble #initializeWithCurrentTime: stamp: 'AEC 6/12/2022 22:06:31'!
initializeWithCurrentTime: aGregorianDateTime 
	
	time := aGregorianDateTime.!
!ClockTestDouble class methodsFor: 'instance creation' stamp: 'AEC 6/12/2022 22:06:42'!
withTime: aGregorianDateTime 

	^self new initializeWithTime: aGregorianDateTime! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 22:06:42' prior: 50485807!
defaultSystemFacade

	^ TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: (ClockTestDouble withTime: GregorianDateTime now).! !

!methodRemoval: ClockTestDouble class #withCurrentTime: stamp: 'AEC 6/12/2022 22:06:42'!
withCurrentTime: aGregorianDateTime 

	^self new initializeWithTime: aGregorianDateTime!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 22:07:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 22:07:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 22:07:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 22:07:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 22:07:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 22:07:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 22:07:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:07:30'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:07:30'!
FAILURE!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AEC 6/12/2022 22:09:33'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'cartSessions lastCartID catalog authenticator cashier salesList clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 22:09:31' prior: 50485180!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cartSession |
	
	cartSession := self cartSessionFor: aCartID.
	
	(cartSession isExpiredAt: clock now) ifTrue: [ self error: self class expiredCartErrorMessage ].
	
	cartSession cart addBook: aBook quantity: aQuantity! !
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AEC 6/12/2022 22:09:54' prior: 50485760!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock 
	
	lastCartID := 0.
	cartSessions := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cashier := Cashier debitingTo: aMerchantProcessor.
	salesList := OrderedCollection new.
	clock := aClock! !

!classDefinition: #CartSession category: 'TusLibros' stamp: 'AEC 6/12/2022 22:17:36'!
Object subclass: #CartSession
	instanceVariableNames: 'customerID cart cartID lastAccessTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'nil' stamp: 'AEC 6/12/2022 22:17:34'!
isExpiredAt: aGregorianDateTime

	(aGregorianDateTime - lastAccessTime) minutes > 30! !
!CartSession methodsFor: 'initialization' stamp: 'AEC 6/12/2022 22:18:28'!
initializeFor: aCart belongingTo: aCustomerID at: aGregorianDateTime

	cart := aCart.
	customerID := aCustomerID.
	lastAccessTime := aGregorianDateTime ! !

!methodRemoval: CartSession #initializeFor:belongingTo:at: stamp: 'AEC 6/12/2022 22:18:34'!
initializeFor: aCart belongingTo: aCustomerID at: aGregorianDateTime

	cart := aCart.
	customerID := aCustomerID.
	lastAccessTime := aGregorianDateTime !
!CartSession methodsFor: 'initialization' stamp: 'AEC 6/12/2022 22:19:02'!
initializeFor: aCart belongingTo: aCustomerID at: aGregorianDateTime 

	cart := aCart.
	customerID := aCustomerID! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 22:19:02' prior: 50485237!
for: aCart withID: aCartID belongingTo: aCustomerID

	^ self new initializeFor: aCart belongingTo: aCustomerID at: clock now! !

!methodRemoval: CartSession #initializeFor:belongingTo: stamp: 'AEC 6/12/2022 22:19:02'!
initializeFor: aCart belongingTo: aCustomerID

	cart := aCart.
	customerID := aCustomerID!

pepe := GregorianDateTime now.!

pepepe := GregorianDateTime now.!

pepepe - pepe!

pepe distanceTo: pepepe!
!CartSession methodsFor: 'accessing' stamp: 'AEC 6/12/2022 22:29:36' prior: 50486083!
isExpiredAt: aGregorianDateTime

	lastAccessTime distanceTo: aGregorianDateTime > 30 * minute! !
!CartSession methodsFor: 'accessing' stamp: 'AEC 6/12/2022 22:30:00' prior: 50486127!
isExpiredAt: aGregorianDateTime

	lastAccessTime distanceTo: aGregorianDateTime > (30 * minute)! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 22:32:04'!
for: aCart withID: aCartID belongingTo: aCustomerID at: aGregorianDateTime 

	^ self new initializeFor: aCart belongingTo: aCustomerID at: clock now! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 22:32:05' prior: 50485103!
createCartForCustomerID: aCustomerID andPassword: aPassword

	| newID |

	self
		ifCanAuthenticateUsing: aCustomerID
		and: aPassword
		do: [
			newID := self nextCartID.
			cartSessions at: newID put: (CartSession for: self emptyCart withID: newID belongingTo: aCustomerID at: clock now)
		].

	^ newID! !

!methodRemoval: CartSession class #for:withID:belongingTo: stamp: 'AEC 6/12/2022 22:32:05'!
for: aCart withID: aCartID belongingTo: aCustomerID

	^ self new initializeFor: aCart belongingTo: aCustomerID at: clock now!
!CartSession class methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 22:32:12' prior: 50486139!
for: aCart withID: aCartID belongingTo: aCustomerID at: aGregorianDateTime 

	^ self new initializeFor: aCart belongingTo: aCustomerID at: aGregorianDateTime ! !
!CartSession methodsFor: 'initialization' stamp: 'AEC 6/12/2022 22:33:00' prior: 50486104!
initializeFor: aCart belongingTo: aCustomerID at: aGregorianDateTime 

	cart := aCart.
	customerID := aCustomerID.
	lastAccessTime := aGregorianDateTime ! !
!CartSession methodsFor: 'nil' stamp: 'AEC 6/12/2022 22:33:34'!
updateLastAccessTime: aGregorianDateTime

	lastAccessTime := aGregorianDateTime ! !
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'AEC 6/12/2022 22:34:51' prior: 50485774!
withCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock 
	
	^self new initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock! !
!ClockTestDouble methodsFor: 'nil' stamp: 'AEC 6/12/2022 22:35:18'!
now

	^ time! !
!ClockTestDouble methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 22:37:16'!
changeTime: aGregorianDateTime

	time := aGregorianDateTime! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 22:40:51' prior: 50486050!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cartSession currentTime |
	
	cartSession := self cartSessionFor: aCartID.
	
	currentTime := clock now.
	(cartSession isExpiredAt: currentTime) ifTrue: [ self error: self class expiredCartErrorMessage ].
	cartSession updateLastAccessTime: currentTime.
	
	cartSession cart addBook: aBook quantity: aQuantity! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:41:01'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:41:01'!
FAILURE!
!CartSession methodsFor: 'accessing' stamp: 'AEC 6/12/2022 22:41:46' prior: 50486133!
isExpiredAt: aGregorianDateTime

	^ lastAccessTime distanceTo: aGregorianDateTime > (30 * minute)! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:42:00'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:42:00'!
FAILURE!
!CartSession methodsFor: 'accessing' stamp: 'AEC 6/12/2022 22:42:27' prior: 50486230!
isExpiredAt: aGregorianDateTime

	^ (lastAccessTime distanceTo: aGregorianDateTime) > (30 * minute)! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:42:28'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 22:46:33' prior: 50485662!
test08

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock updateTime: (time next: 30 * minute).
	
	self
		should: [ systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 22:46:46' prior: 50486251!
test08

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 30 * minute).
	
	self
		should: [ systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:46:51'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:46:51'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 22:46:58' prior: 50486273!
test08

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:47:01'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 22:47:18'!
test08ExpiredCartCantBeUsed

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !

!methodRemoval: TusLibrosSystemFacadeTest #test08ExpiredCartCantBeUsed stamp: 'AEC 6/12/2022 22:47:22'!
test08ExpiredCartCantBeUsed

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 22:47:30'!
test08ExpiredCartCantBeUsed

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !

!methodRemoval: TusLibrosSystemFacadeTest #test08 stamp: 'AEC 6/12/2022 22:47:30'!
test08

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage!
!TusLibrosSystemFacade methodsFor: 'authenticating' stamp: 'AEC 6/12/2022 22:50:53'!
ifNotExpired: aCartSession at: aGregorianDateTime do: aBlock

	(aCartSession isExpiredAt: aGregorianDateTime)
		ifTrue: [ self error: self class expiredCartErrorMessage ]
		ifFalse: aBlock ! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 22:55:16' prior: 50486210!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cartSession currentTime |
	
	cartSession := self cartSessionFor: aCartID.
	currentTime := clock now.
	
	self ifNotExpired: cartSession at: currentTime do: [
		cartSession updateLastAccessTime: currentTime.
		cartSession cart addBook: aBook quantity: aQuantity
	]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 22:55:58'!
test08CantAddItemsToExpiredCart

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !

!methodRemoval: TusLibrosSystemFacadeTest #test08ExpiredCartCantBeUsed stamp: 'AEC 6/12/2022 22:55:58'!
test08ExpiredCartCantBeUsed

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 22:56:32'!
test09CantListExpiredCart

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade listCartWithID: cartID ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 22:56:35'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 22:58:18' prior: 50485189!
listCartWithID: aCartID
	
	| cartSession |
	cartSession := self cartSessionFor: aCartID. 
	self ifNotExpired: cartSession do: [
		 (self cartSessionFor: aCartID) cart listContents
	]
	
	! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 22:58:25' prior: 50486507!
listCartWithID: aCartID
	
	| cartSession |
	
	cartSession := self cartSessionFor: aCartID. 
	self ifNotExpired: cartSession do: [
		 (self cartSessionFor: aCartID) cart listContents
	]
	
	! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 22:59:09' prior: 50486424!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cartSession currentTime |
	
	cartSession := self cartSessionFor: aCartID.
	currentTime := clock now.
	
	self ifNotExpired: cartSession at: currentTime do: [
		cartSession cart addBook: aBook quantity: aQuantity
	]! !
!TusLibrosSystemFacade methodsFor: 'date management' stamp: 'AEC 6/12/2022 23:00:58' prior: 50486414!
ifNotExpired: aCartSession at: aGregorianDateTime do: aBlock

	| currentTime |
	currentTime := clock now.
	(aCartSession isExpiredAt: currentTime)
		ifTrue: [ self error: self class expiredCartErrorMessage ]
		ifFalse: [ 
			aCartSession updateLastAccessTime: currentTime.
			aBlock value
		]! !
!TusLibrosSystemFacade methodsFor: 'date management' stamp: 'AEC 6/12/2022 23:01:04' prior: 50486537!
ifNotExpired: aCartSession at: aGregorianDateTime do: aBlock

	| currentTime |
	
	currentTime := clock now.
	(aCartSession isExpiredAt: currentTime)
		ifTrue: [ self error: self class expiredCartErrorMessage ]
		ifFalse: [ 
			aCartSession updateLastAccessTime: currentTime.
			aBlock value
		]! !
!TusLibrosSystemFacade methodsFor: 'date management' stamp: 'AEC 6/12/2022 23:01:58'!
ifNotExpired: aCartSession do: aBlock

	| currentTime |
	
	currentTime := clock now.
	(aCartSession isExpiredAt: currentTime)
		ifTrue: [ self error: self class expiredCartErrorMessage ]
		ifFalse: [ 
			aCartSession updateLastAccessTime: currentTime.
			aBlock value
		]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 23:01:58' prior: 50486525!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cartSession currentTime |
	
	cartSession := self cartSessionFor: aCartID.
	currentTime := clock now.
	
	self ifNotExpired: cartSession do: [
		cartSession cart addBook: aBook quantity: aQuantity
	]! !

!methodRemoval: TusLibrosSystemFacade #ifNotExpired:at:do: stamp: 'AEC 6/12/2022 23:01:58'!
ifNotExpired: aCartSession at: aGregorianDateTime do: aBlock

	| currentTime |
	
	currentTime := clock now.
	(aCartSession isExpiredAt: currentTime)
		ifTrue: [ self error: self class expiredCartErrorMessage ]
		ifFalse: [ 
			aCartSession updateLastAccessTime: currentTime.
			aBlock value
		]!
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:03:58' prior: 50485386!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionFor: aCartID. 
	self ifNotExpired: cartSession do: [
		transactionID := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: FixedGregorianDate today registeringOn: salesList.
		
		cartSessions removeKey: aCartID.
		
		^transactionID
	] ! !

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:07:18'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:07:30'!
test10CantCheckoutExpiredCart

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade listCartWithID: cartID ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:07:54' prior: 50486623!
test10CantCheckoutExpiredCart

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade listCartWithID: cartID ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:08:42' prior: 50486645!
test10CantCheckoutExpiredCart

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble withTime: time.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade
				checkoutCartWithID: cartID 
				usingCreditCardNumber: self validCreditCardNumber 
				expiringOn: self nonExpiredMonthOfYearString 
				ownedBy: 'Alan Kay'. 
		]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:08:53' prior: 50486598!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionFor: aCartID.
	transactionID := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: FixedGregorianDate today registeringOn: salesList.
	
	cartSessions removeKey: aCartID.
	
	^transactionID ! !

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:08:55'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:09:05' prior: 50486697!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionFor: aCartID. 
	self ifNotExpired: cartSession do: [
		transactionID := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: clock now registeringOn: salesList.
		
		cartSessions removeKey: aCartID.
		
		^transactionID
	] ! !

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:09:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:09:07'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:09:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:09:07'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:09:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:09:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:09:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:09:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:09:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:09:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:09:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:09:19'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:09:19'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:09:36' prior: 50486516!
listCartWithID: aCartID
	
	| cartSession |
	
	cartSession := self cartSessionFor: aCartID. 
	self ifNotExpired: cartSession do: [
		 ^(self cartSessionFor: aCartID) cart listContents
	]
	
	! !

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:09:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:09:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:09:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:09:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:09:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:09:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:09:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:09:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:09:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:09:39'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:09:42'!
PASSED!
!CartSession class methodsFor: 'initialization' stamp: 'AEC 6/12/2022 23:10:35'!
for: aCart belongingTo: aCustomerID at: aGregorianDateTime 

	^ self new initializeFor: aCart belongingTo: aCustomerID at: aGregorianDateTime ! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 23:10:35' prior: 50486148!
createCartForCustomerID: aCustomerID andPassword: aPassword

	| newID |

	self
		ifCanAuthenticateUsing: aCustomerID
		and: aPassword
		do: [
			newID := self nextCartID.
			cartSessions at: newID put: (CartSession for: self emptyCart belongingTo: aCustomerID at: clock now)
		].

	^ newID! !

!methodRemoval: CartSession class #for:withID:belongingTo:at: stamp: 'AEC 6/12/2022 23:10:35'!
for: aCart withID: aCartID belongingTo: aCustomerID at: aGregorianDateTime 

	^ self new initializeFor: aCart belongingTo: aCustomerID at: aGregorianDateTime !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:11:38' prior: 50486792!
listCartWithID: aCartID
	
	| cartSession |
	
	cartSession := self cartSessionFor: aCartID. 
	self ifNotExpired: cartSession do: [
		 ^cartSession cart listContents
	]
	
	! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:11:57' prior: 50486574!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cartSession |
	
	cartSession := self cartSessionFor: aCartID.
	
	self ifNotExpired: cartSession do: [
		cartSession cart addBook: aBook quantity: aQuantity
	]! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:12:56'!
invalidateCartSessionFor: aCartID

	^ cartSessions removeKey: aCartID! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:12:56' prior: 50486721!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionFor: aCartID. 
	self ifNotExpired: cartSession do: [
		transactionID := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: clock now registeringOn: salesList.
		
		self invalidateCartSessionFor: aCartID.
		
		^transactionID
	] ! !
!TusLibrosSystemFacade methodsFor: 'date management' stamp: 'AEC 6/12/2022 23:15:14'!
ifSessionNotExpiredFor: aCartSession do: aBlock

	| currentTime |
	
	currentTime := clock now.
	(aCartSession isExpiredAt: currentTime)
		ifTrue: [ self error: self class expiredCartErrorMessage ]
		ifFalse: [ 
			aCartSession updateLastAccessTime: currentTime.
			aBlock value
		]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 23:15:14' prior: 50486993!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard cartSession transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	cartSession := self cartSessionFor: aCartID. 
	self ifSessionNotExpiredFor: cartSession do: [
		transactionID := cashier checkout: cartSession cart for: cartSession customerID withCard: creditCard on: clock now registeringOn: salesList.
		
		self invalidateCartSessionFor: aCartID.
		
		^transactionID
	] ! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 23:15:14' prior: 50486968!
listCartWithID: aCartID
	
	| cartSession |
	
	cartSession := self cartSessionFor: aCartID. 
	self ifSessionNotExpiredFor: cartSession do: [
		 ^cartSession cart listContents
	]
	
	! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 23:15:14' prior: 50486977!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	| cartSession |
	
	cartSession := self cartSessionFor: aCartID.
	
	self ifSessionNotExpiredFor: cartSession do: [
		cartSession cart addBook: aBook quantity: aQuantity
	]! !

!methodRemoval: TusLibrosSystemFacade #ifNotExpired:do: stamp: 'AEC 6/12/2022 23:15:14'!
ifNotExpired: aCartSession do: aBlock

	| currentTime |
	
	currentTime := clock now.
	(aCartSession isExpiredAt: currentTime)
		ifTrue: [ self error: self class expiredCartErrorMessage ]
		ifFalse: [ 
			aCartSession updateLastAccessTime: currentTime.
			aBlock value
		]!
!TusLibrosSystemFacade methodsFor: 'date management' stamp: 'AEC 6/12/2022 23:15:21' prior: 50487015!
ifSessionNotExpiredFor: aCartID do: aBlock

	| currentTime |
	
	currentTime := clock now.
	(aCartID isExpiredAt: currentTime)
		ifTrue: [ self error: self class expiredCartErrorMessage ]
		ifFalse: [ 
			aCartID updateLastAccessTime: currentTime.
			aBlock value
		]! !
!TusLibrosSystemFacade methodsFor: 'date management' stamp: 'AEC 6/12/2022 23:15:45' prior: 50487083!
ifSessionNotExpiredFor: aCartID do: aBlock

	| currentTime cartSession |
	
	cartSession := self cartSessionFor: aCartID. 
	currentTime := clock now.
	(cartSession isExpiredAt: currentTime)
		ifTrue: [ self error: self class expiredCartErrorMessage ]
		ifFalse: [ 
			aCartID updateLastAccessTime: currentTime.
			aBlock value
		]! !
!TusLibrosSystemFacade methodsFor: 'date management' stamp: 'AEC 6/12/2022 23:15:53' prior: 50487095!
ifSessionNotExpiredFor: aCartID do: aBlock

	| currentTime cartSession |
	
	cartSession := self cartSessionFor: aCartID. 
	currentTime := clock now.
	(cartSession isExpiredAt: currentTime)
		ifTrue: [ self error: self class expiredCartErrorMessage ]
		ifFalse: [ 
			aCartID updateLastAccessTime: currentTime.
			aBlock value: cartSession
		]! !
!TusLibrosSystemFacade methodsFor: 'date management' stamp: 'AEC 6/12/2022 23:16:08' prior: 50487109!
ifSessionNotExpiredFor: aCartID do: aBlock

	| currentTime cartSession |
	
	cartSession := self cartSessionFor: aCartID. 
	currentTime := clock now.
	(cartSession isExpiredAt: currentTime)
		ifTrue: [ self error: self class expiredCartErrorMessage ]
		ifFalse: [ 
			cartSession updateLastAccessTime: currentTime.
			aBlock value: cartSession
		]! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:16:32' prior: 50487051!
listCartWithID: aCartID
	
	| cartSession |
	
	cartSession := self cartSessionFor: aCartID. 
	self ifSessionNotExpiredFor: cartSession do: [:aCartSession |
		 ^aCartSession cart listContents
	]
	
	! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:16:51' prior: 50487137!
listCartWithID: aCartID

	self ifSessionNotExpiredFor: aCartID do: [:aCartSession |
		 ^aCartSession cart listContents
	]
	
	! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:17:23' prior: 50487061!
addToCartWithID: aCartID book: aBook quantity: aQuantity

	self ifSessionNotExpiredFor: aCartID do: [:aCartSession |
		aCartSession cart addBook: aBook quantity: aQuantity
	]! !
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:18:12' prior: 50487028!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYearString ownedBy: anOwner

	| creditCard transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYearString).
	
	self ifSessionNotExpiredFor: aCartID do: [:aCartSession |
		transactionID := cashier checkout: aCartSession cart for: aCartSession customerID withCard: creditCard on: clock now registeringOn: salesList.
		
		self invalidateCartSessionFor: aCartID.
		
		^transactionID
	] ! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:18:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:18:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:18:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:18:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:18:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:18:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:18:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:18:49'!
PASSED!

!classDefinition: #ClockTestDouble category: 'TusLibros' stamp: 'AEC 6/12/2022 23:21:11'!
Object subclass: #ClockTestDouble
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'AEC 6/12/2022 23:21:28'!
Object subclass: #CartSession
	instanceVariableNames: 'customerID cart lastAccessTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:22:01'!
PASSED!

clock!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:23:23' prior: 50485703!
test02CannotCreateCartWithInvalidCredentials

	| systemFacade |
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: FailingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: ClockTestDouble new.
	
	self
		should:[systemFacade createCartForCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withExceptionDo:[:anError |
			self assert: anError messageText equals: TusLibrosSystemFacade authenticationErrorMessage.	
		]
	
	
	
	
	
	! !
!ClockTestDouble methodsFor: 'nil' stamp: 'AEC 6/12/2022 23:25:08' overrides: 16920235!
initialize

	time := GregorianDateTime now.! !

!methodRemoval: ClockTestDouble #initializeWithTime: stamp: 'AEC 6/12/2022 23:25:16'!
initializeWithTime: aGregorianDateTime 
	
	time := aGregorianDateTime.!

!methodRemoval: ClockTestDouble class #withTime: stamp: 'AEC 6/12/2022 23:25:24'!
withTime: aGregorianDateTime 

	^self new initializeWithTime: aGregorianDateTime!
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/12/2022 23:25:33' prior: 50485991!
defaultSystemFacade

	^ TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: ClockTestDouble new.! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:25:39' prior: 50486437!
test08CantAddItemsToExpiredCart

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble new.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:25:43' prior: 50486482!
test09CantListExpiredCart

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble new.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade listCartWithID: cartID ]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:25:47' prior: 50486669!
test10CantCheckoutExpiredCart

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble new.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [ systemFacade
				checkoutCartWithID: cartID 
				usingCreditCardNumber: self validCreditCardNumber 
				expiringOn: self nonExpiredMonthOfYearString 
				ownedBy: 'Alan Kay'. 
		]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:26:36' prior: 50485722!
test06CantListPurchasesWithInvalidCredentials

	| systemFacade |
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog 
					withAuthenticator: FailingAuthenticator new
					andMerchantProcessor: WorkingMerchantProcessor new andClock: ClockTestDouble new.
	
	self 
		should: [systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withMessageText: TusLibrosSystemFacade authenticationErrorMessage.
		! !

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:26:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:26:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:26:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:26:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:26:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:26:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:26:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:26:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:26:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:26:48'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/12/2022 23:32:27'!
whenCartIDExpiredCantDo: aBlock

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble new.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: (aBlock value: systemFacade value: cartID)
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:33:08' prior: 50487444!
test08CantAddItemsToExpiredCart

	self whenCartIDExpiredCantDo: [ :systemFacade :cartID | 
		systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]! !

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:33:11'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:33:11'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/12/2022 23:33:28' prior: 50487572!
whenCartIDExpiredCantDo: aBlock

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble new.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [aBlock value: systemFacade value: cartID]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:33:32'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:34:01' prior: 50487467!
test09CantListExpiredCart

	self whenCartIDExpiredCantDo: [ :systemFacade :cartID | 
		systemFacade listCartWithID: cartID ]! !

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:34:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:34:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:34:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:34:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:34:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:34:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:34:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:34:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:34:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:34:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:34:02'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:34:31' prior: 50487489!
test10CantCheckoutExpiredCart

	self whenCartIDExpiredCantDo: [ :systemFacade :cartID | 
		systemFacade
				checkoutCartWithID: cartID 
				usingCreditCardNumber: self validCreditCardNumber 
				expiringOn: self nonExpiredMonthOfYearString 
				ownedBy: 'Alan Kay'.  
	]! !

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:34:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:34:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:34:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:34:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:34:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:34:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:34:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:34:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:34:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:34:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:34:32'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/12/2022 23:35:20'!
whenCartSessionExpiredCantDo: aBlock

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble new.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [aBlock value: systemFacade value: cartID]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 23:35:20' prior: 50487636!
test09CantListExpiredCart

	self whenCartSessionExpiredCantDo: [ :systemFacade :cartID | 
		systemFacade listCartWithID: cartID ]! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 23:35:20' prior: 50487594!
test08CantAddItemsToExpiredCart

	self whenCartSessionExpiredCantDo: [ :systemFacade :cartID | 
		systemFacade addToCartWithID: cartID book: 1 quantity: 2. ]! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 23:35:20' prior: 50487684!
test10CantCheckoutExpiredCart

	self whenCartSessionExpiredCantDo: [ :systemFacade :cartID | 
		systemFacade
				checkoutCartWithID: cartID 
				usingCreditCardNumber: self validCreditCardNumber 
				expiringOn: self nonExpiredMonthOfYearString 
				ownedBy: 'Alan Kay'.  
	]! !

!methodRemoval: TusLibrosSystemFacadeTest #whenCartIDExpiredCantDo: stamp: 'AEC 6/12/2022 23:35:20'!
whenCartIDExpiredCantDo: aBlock

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble new.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [aBlock value: systemFacade value: cartID]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage!
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:45:32' prior: 50487164!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYear ownedBy: anOwner

	| creditCard transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: (self createGregorianMonthOfYearFrom: aMonthOfYear).
	
	self ifSessionNotExpiredFor: aCartID do: [:aCartSession |
		transactionID := cashier checkout: aCartSession cart for: aCartSession customerID withCard: creditCard on: clock now registeringOn: salesList.
		
		self invalidateCartSessionFor: aCartID.
		
		^transactionID
	] ! !

----SNAPSHOT----(12 June 2022 23:46:38) CuisUniversity-5096.image priorSource: 4909936!
!TusLibrosSystemFacade methodsFor: 'interface' stamp: 'AEC 6/12/2022 23:46:54' prior: 50487811!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYear ownedBy: anOwner

	| creditCard transactionID |
	
	creditCard := CreditCard for: anOwner number: aCreditCardNumber expiringOn: aMonthOfYear.
	
	self ifSessionNotExpiredFor: aCartID do: [:aCartSession |
		transactionID := cashier checkout: aCartSession cart for: aCartSession customerID withCard: creditCard on: clock now registeringOn: salesList.
		
		self invalidateCartSessionFor: aCartID.
		
		^transactionID
	] ! !

----SNAPSHOT----(12 June 2022 23:46:56) CuisUniversity-5096.image priorSource: 4997767!

!methodRemoval: TusLibrosSystemFacade #createGregorianMonthOfYearFrom: stamp: 'AEC 6/12/2022 23:47:03'!
createGregorianMonthOfYearFrom: aMonthOfYearString

	month := Number readFrom: (aMonthOfYearString first: 2).
	year := Number readFrom: (aMonthOfYearString last: 4).
	
	^ GregorianMonthOfYear yearNumber: year monthNumber: month!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:50:20'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:50:20'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:50:20'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/12/2022 23:50:49'!
nonExpiredMonthOYearString
	
	| monthOfYear aMonth aYear |
	
	monthOfYear := FixedGregorianDate today monthOfYear next.
	aMonth := monthOfYear month number printStringBase:10 nDigits:2.
	aYear := monthOfYear year number printString.
	
	^aMonth,aYear! !
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/12/2022 23:50:53'!
nonExpiredMonthOYear
	
	| monthOfYear aMonth aYear |
	
	monthOfYear := FixedGregorianDate today monthOfYear next.
	aMonth := monthOfYear month number printStringBase:10 nDigits:2.
	aYear := monthOfYear year number printString.
	
	^aMonth,aYear! !

!methodRemoval: TusLibrosSystemFacadeTest #nonExpiredMonthOYearString stamp: 'AEC 6/12/2022 23:50:54'!
nonExpiredMonthOYearString
	
	| monthOfYear aMonth aYear |
	
	monthOfYear := FixedGregorianDate today monthOfYear next.
	aMonth := monthOfYear month number printStringBase:10 nDigits:2.
	aYear := monthOfYear year number printString.
	
	^aMonth,aYear!
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/12/2022 23:51:03'!
nonExpiredMonthOfYear
	
	| monthOfYear aMonth aYear |
	
	monthOfYear := FixedGregorianDate today monthOfYear next.
	aMonth := monthOfYear month number printStringBase:10 nDigits:2.
	aYear := monthOfYear year number printString.
	
	^aMonth,aYear! !

!methodRemoval: TusLibrosSystemFacadeTest #nonExpiredMonthOYear stamp: 'AEC 6/12/2022 23:51:03'!
nonExpiredMonthOYear
	
	| monthOfYear aMonth aYear |
	
	monthOfYear := FixedGregorianDate today monthOfYear next.
	aMonth := monthOfYear month number printStringBase:10 nDigits:2.
	aYear := monthOfYear year number printString.
	
	^aMonth,aYear!
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/12/2022 23:51:13' prior: 50488000!
nonExpiredMonthOfYear
	
	^FixedGregorianDate today monthOfYear next! !

!methodRemoval: TusLibrosSystemFacadeTest #nonExpiredMonthOfYearString stamp: 'AEC 6/12/2022 23:51:22'!
nonExpiredMonthOfYearString
	
	| monthOfYear aMonth aYear |
	
	monthOfYear := FixedGregorianDate today monthOfYear next.
	aMonth := monthOfYear month number printStringBase:10 nDigits:2.
	aYear := monthOfYear year number printString.
	
	^aMonth,aYear!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:51:27' prior: 50485546!
test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer

	| systemFacade cartID purchases expectedPurchasedItems |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYear
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	expectedPurchasedItems := Bag new.
	expectedPurchasedItems add: 1 withOccurrences: 2.
	
	self
		assert: expectedPurchasedItems equals: purchases key;
		assert: 10 equals: purchases value! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:51:32' prior: 50485062!
test07CartIDIsNotValidAnymoreAfterCheckout

	| systemFacade cartID |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := systemFacade createCartForCustomerID: 'ID' andPassword: 'Password'. 
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYear
		ownedBy: 'Alan Kay'.
	
	self
		should: [systemFacade listCartWithID: cartID ]
		raise: Error
		withMessageText: TusLibrosSystemFacade invalidCartIDErrorMessage! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/12/2022 23:51:37' prior: 50487777!
test10CantCheckoutExpiredCart

	self whenCartSessionExpiredCantDo: [ :systemFacade :cartID | 
		systemFacade
				checkoutCartWithID: cartID 
				usingCreditCardNumber: self validCreditCardNumber 
				expiringOn: self nonExpiredMonthOfYear
				ownedBy: 'Alan Kay'.  
	]! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:51:48'!
PASSED!
!Behavior method!
for: aCatalog
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aCatalog
			cover: (44 to: 51)
			declaredAt: (6 to: 13)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aCatalog
	(books _ [
	(Bag
		cover: (36 to: 38)
		declaredAt: (36 to: 38)) new ] valueCoveringAll:
		{40 to: 42})
		cover: (27 to: 31)
		declaredAt: (27 to: 31).
	(catalog _ aCatalog
		cover: (57 to: 64)
		declaredAt: (16 to: 23))
		cover: (46 to: 52)
		declaredAt: (46 to: 52).! !
!Behavior method!
isEmpty
	^ [
	(books
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
addBook: aBookISBN quantity: aQuantity
	[
	(self coverAll:
		{44 to: 47}) assertBookIsInCatalog:
		(aBookISBN
			cover: (72 to: 80)
			declaredAt: (10 to: 18)) ] valueCoveringAll:
		{49 to: 70}.
	[
	(self coverAll:
		{84 to: 87}) assertQuantityIsValid:
		(aQuantity
			cover: (112 to: 120)
			declaredAt: (30 to: 38)) ] valueCoveringAll:
		{89 to: 110}.
	[
	(books
		cover: (124 to: 128)
		declaredAt: (124 to: 128))
		add:
			(aBookISBN
				cover: (135 to: 143)
				declaredAt: (10 to: 18))
		withOccurrences:
			(aQuantity
				cover: (162 to: 170)
				declaredAt: (30 to: 38)) ] valueCoveringAll:
		{130 to: 133. 145 to: 160}.! !
!Behavior method!
assertBookIsInCatalog: aBookISBN
	[
	([
	(catalog
		cover: (37 to: 43)
		declaredAt: (37 to: 43)) includesKey:
		(aBookISBN
			cover: (58 to: 66)
			declaredAt: (24 to: 32)) ] valueCoveringAll:
		{45 to: 56}) ifFalse: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			([
			(self coverAll:
				{90 to: 93}) class ] valueCoveringAll:
				{95 to: 99}) bookNotInCatalogErrorDescription ] valueCoveringAll:
				{101 to: 132}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 76}.! !
!Behavior method!
assertQuantityIsValid: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) >
		(0 coverAll:
			{48 to: 48}) ] valueCoveringAll:
		{46 to: 46}) ifFalse: [
		[
		(self coverAll:
			{59 to: 62}) error:
			([
			([
			(self coverAll:
				{71 to: 74}) class ] valueCoveringAll:
				{76 to: 80}) nonPositiveBookQuantityErrorDescription ] valueCoveringAll:
				{82 to: 120}) ] valueCoveringAll:
			{64 to: 69} ]] valueCoveringAll:
		{50 to: 57}.
	[
	([
	(aQuantity
		cover: (126 to: 134)
		declaredAt: (24 to: 32)) isInteger ] valueCoveringAll:
		{136 to: 144}) ifFalse: [
		[
		(self coverAll:
			{155 to: 158}) error:
			([
			([
			(self coverAll:
				{167 to: 170}) class ] valueCoveringAll:
				{172 to: 176}) nonIntegerBookQuantityErrorDescription ] valueCoveringAll:
				{178 to: 215}) ] valueCoveringAll:
			{160 to: 165} ]] valueCoveringAll:
		{146 to: 153}.! !
!Behavior method!
hasBook: aBookISBN
	^ [
	(books
		cover: (25 to: 29)
		declaredAt: (25 to: 29)) includes:
		(aBookISBN
			cover: (41 to: 49)
			declaredAt: (10 to: 18)) ] valueCoveringAll:
		{31 to: 39}.! !

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
quantityOfBooksWithISBN: aBookISBN
	^ [
	(books
		cover: (42 to: 46)
		declaredAt: (42 to: 46)) occurrencesOf:
		(aBookISBN
			cover: (63 to: 71)
			declaredAt: (26 to: 34)) ] valueCoveringAll:
		{48 to: 61}.! !

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
bookNotInCatalogErrorDescription
	^ 'El libro no se encuentra en el catalogo.' coverAll:
		{38 to: 79}.! !

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
nonPositiveBookQuantityErrorDescription
	^ 'La cantidad de libros a agregar no es positiva.' coverAll:
		{45 to: 93}.! !

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
nonIntegerBookQuantityErrorDescription
	^ 'La cantidad de libros a agregar no es un numero entero.' coverAll:
		{44 to: 100}.! !

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
listContents
	^ [
	(books
		cover: (18 to: 22)
		declaredAt: (18 to: 22)) copy ] valueCoveringAll:
		{24 to: 27}.! !

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
emptyOwnerNameErrorDescription
	^ 'El nombre de titular de la tarjeta esta vacio' coverAll:
		{37 to: 83}.! !
!Behavior method!
for: anOwner number: aCreditCardNumber expiringOn: aGregorianMonthOfYear
	[
	(self coverAll:
		{77 to: 80}) assertNumberHas16Digits:
		(aCreditCardNumber
			cover: (107 to: 123)
			declaredAt: (22 to: 38)) ] valueCoveringAll:
		{82 to: 105}.
	[
	(self coverAll:
		{127 to: 130}) assertOwnerNameIsNotBlank:
		(anOwner
			cover: (159 to: 165)
			declaredAt: (6 to: 12)) ] valueCoveringAll:
		{132 to: 157}.
	^ [
	([
	(self coverAll:
		{173 to: 176}) new ] valueCoveringAll:
		{178 to: 180})
		initializeFor:
			(anOwner
				cover: (197 to: 203)
				declaredAt: (6 to: 12))
		number:
			(aCreditCardNumber
				cover: (213 to: 229)
				declaredAt: (22 to: 38))
		expiringOn:
			(aGregorianMonthOfYear
				cover: (243 to: 263)
				declaredAt: (52 to: 72)) ] valueCoveringAll:
		{182 to: 195. 205 to: 211. 231 to: 241}.! !
!Behavior method!
assertNumberHas16Digits: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (48 to: 64)
		declaredAt: (26 to: 42)) numberOfDigitsInBase:
		(10 coverAll:
			{88 to: 89}) ] valueCoveringAll:
		{66 to: 86}) =
		(16 coverAll:
			{94 to: 95}) ] valueCoveringAll:
		{92 to: 92}) ifFalse: [
		[
		(self coverAll:
			{108 to: 111}) error:
			([
			(self coverAll:
				{120 to: 123}) invalidNumberOfDigitsErrorDescription ] valueCoveringAll:
				{125 to: 161}) ] valueCoveringAll:
			{113 to: 118} ]] valueCoveringAll:
		{98 to: 105}.! !
!Behavior method!
assertOwnerNameIsNotBlank: anOwner
	[
	([
	([
	(anOwner
		cover: (38 to: 44)
		declaredAt: (28 to: 34)) withBlanksTrimmed ] valueCoveringAll:
		{46 to: 62}) isEmpty ] valueCoveringAll:
		{64 to: 70}) ifTrue: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(self coverAll:
				{93 to: 96}) emptyOwnerNameErrorDescription ] valueCoveringAll:
				{98 to: 127}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{72 to: 78}.! !

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
invalidNumberOfDigitsErrorDescription
	^ 'El numero de tarjeta no tiene 16 digitos.' coverAll:
		{43 to: 85}.! !

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
initialize
	(timesCalled _ 0 coverAll:
		{28 to: 29})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).! !
!Behavior method!
debitingTo: aMerchantProcessor
	^ [
	([
	(self coverAll:
		{36 to: 39}) new ] valueCoveringAll:
		{41 to: 43}) initializeDebitingTo:
		(aMerchantProcessor
			cover: (67 to: 84)
			declaredAt: (13 to: 30)) ] valueCoveringAll:
		{45 to: 65}.! !
!Behavior method!
initializeDebitingTo: aMerchantProcessor
	(merchantProcessor _ aMerchantProcessor
		cover: (67 to: 84)
		declaredAt: (23 to: 40))
		cover: (46 to: 62)
		declaredAt: (46 to: 62).
	(lastTransactionID _ 0 coverAll:
		{108 to: 109})
		cover: (88 to: 104)
		declaredAt: (88 to: 104).! !
!Behavior method!
initializeFor: anOwner number: aCreditCardNumber expiringOn: aGregorianMonthOfYear
	(owner _ anOwner
		cover: (96 to: 102)
		declaredAt: (16 to: 22))
		cover: (87 to: 91)
		declaredAt: (87 to: 91).
	(number _ aCreditCardNumber
		cover: (116 to: 132)
		declaredAt: (32 to: 48))
		cover: (106 to: 111)
		declaredAt: (106 to: 111).
	(expirationMonthOfYear _ aGregorianMonthOfYear
		cover: (161 to: 181)
		declaredAt: (62 to: 82))
		cover: (136 to: 156)
		declaredAt: (136 to: 156).! !
!Behavior method!
checkout: aCart for: aCustomerID withCard: aCreditCard on: aGregorianDate registeringOn: aSalesList
	| price transactionID |
	[
	(self coverAll:
		{131 to: 134}) assertCartIsNotEmpty:
		(aCart
			cover: (158 to: 162)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{136 to: 156}.
	(price _ [
	(aCart
		cover: (175 to: 179)
		declaredAt: (11 to: 15)) value ] valueCoveringAll:
		{181 to: 185})
		cover: (166 to: 170)
		declaredAt: (106 to: 110).
	[
	([
	(aCreditCard
		cover: (190 to: 200)
		declaredAt: (44 to: 54)) isExpiredOn:
		(aGregorianDate
			cover: (215 to: 228)
			declaredAt: (60 to: 73)) ] valueCoveringAll:
		{202 to: 213}) ifTrue: [
		[
		(self coverAll:
			{239 to: 242}) error:
			([
			([
			(self coverAll:
				{251 to: 254}) class ] valueCoveringAll:
				{256 to: 260}) expiredCreditCardErrorDescription ] valueCoveringAll:
				{262 to: 294}) ] valueCoveringAll:
			{244 to: 249} ]] valueCoveringAll:
		{231 to: 237}.
	[
	(self coverAll:
		{299 to: 302}) assertNameIsValidToSendToMerchantProcessor:
		(aCreditCard
			cover: (348 to: 358)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{304 to: 346}.
	[
	(self coverAll:
		{362 to: 365}) assertAmountIsValidToSendToMerchantProcessor:
		(price
			cover: (413 to: 417)
			declaredAt: (106 to: 110)) ] valueCoveringAll:
		{367 to: 411}.
	[
	(merchantProcessor
		cover: (423 to: 439)
		declaredAt: (423 to: 439))
		debit:
			([
			(self coverAll:
				{449 to: 452}) formatAmount:
				(price
					cover: (468 to: 472)
					declaredAt: (106 to: 110)) ] valueCoveringAll:
				{454 to: 466})
		from:
			(aCreditCard
				cover: (481 to: 491)
				declaredAt: (44 to: 54)) ] valueCoveringAll:
		{441 to: 446. 475 to: 479}.
	(transactionID _ [
	(self coverAll:
		{513 to: 516}) nextTransactionID ] valueCoveringAll:
		{518 to: 534})
		cover: (496 to: 508)
		declaredAt: (112 to: 124).
	[
	(aSalesList
		cover: (538 to: 547)
		declaredAt: (90 to: 99)) add:
		([
		(Sale
			cover: (555 to: 558)
			declaredAt: (555 to: 558))
			of:
				([
				(aCart
					cover: (564 to: 568)
					declaredAt: (11 to: 15)) listContents ] valueCoveringAll:
					{570 to: 581})
			totalling:
				(price
					cover: (594 to: 598)
					declaredAt: (106 to: 110))
			to:
				(aCustomerID
					cover: (604 to: 614)
					declaredAt: (22 to: 32))
			withTransactionID:
				(transactionID
					cover: (635 to: 647)
					declaredAt: (112 to: 124)) ] valueCoveringAll:
			{560 to: 562. 583 to: 592. 600 to: 602. 616 to: 633}) ] valueCoveringAll:
		{549 to: 552}.
	^ transactionID
		cover: (655 to: 667)
		declaredAt: (112 to: 124).! !
!Behavior method!
assertCartIsNotEmpty: aCart
	^ [
	([
	(aCart
		cover: (33 to: 37)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{39 to: 45}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			([
			(self coverAll:
				{67 to: 70}) class ] valueCoveringAll:
				{72 to: 76}) emptyCartErrorDescription ] valueCoveringAll:
				{78 to: 102}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{47 to: 53}.! !
!Behavior method!
emptyCartErrorDescription
	^ 'El carrito esta vacio.' coverAll:
		{32 to: 55}.! !

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
value
	^ [
	(books
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) sum: [ :aBookISBN |
		[
		(catalog
			cover: (36 to: 42)
			declaredAt: (36 to: 42)) at:
			(aBookISBN
				cover: (48 to: 56)
				declaredAt: (23 to: 31)) ] valueCoveringAll:
			{44 to: 46} ]] valueCoveringAll:
		{16 to: 19}.! !
!Behavior method!
isExpiredOn: aFixedGregorianDate
	^ [
	([
	(expirationMonthOfYear
		cover: (38 to: 58)
		declaredAt: (38 to: 58)) lastDate ] valueCoveringAll:
		{60 to: 67}) <
		(aFixedGregorianDate
			cover: (71 to: 89)
			declaredAt: (14 to: 32)) ] valueCoveringAll:
		{69 to: 69}.! !
!Behavior method!
expiredCreditCardErrorDescription
	^ 'La tarjeta de credito esta vencida.' coverAll:
		{39 to: 75}.! !

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
assertNameIsValidToSendToMerchantProcessor: aCreditCard
	[
	([
	([
	([
	([
	(aCreditCard
		cover: (59 to: 69)
		declaredAt: (45 to: 55)) owner ] valueCoveringAll:
		{71 to: 75}) withBlanksTrimmed ] valueCoveringAll:
		{77 to: 93}) size ] valueCoveringAll:
		{95 to: 98}) >
		(30 coverAll:
			{102 to: 103}) ] valueCoveringAll:
		{100 to: 100}) ifTrue: [
		[
		(self coverAll:
			{115 to: 118}) error:
			([
			([
			(self coverAll:
				{127 to: 130}) class ] valueCoveringAll:
				{132 to: 136}) nameTooLongToSendToMerchantProcessor ] valueCoveringAll:
				{138 to: 173}) ] valueCoveringAll:
			{120 to: 125} ]] valueCoveringAll:
		{105 to: 111}.! !
!Behavior method!
owner
	^ owner
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
assertAmountIsValidToSendToMerchantProcessor: anAmount
	[
	([
	([
	([
	(anAmount
		cover: (59 to: 66)
		declaredAt: (47 to: 54)) truncated ] valueCoveringAll:
		{68 to: 76}) numberOfDigitsInBase:
		(10 coverAll:
			{100 to: 101}) ] valueCoveringAll:
		{78 to: 98}) >
		(15 coverAll:
			{107 to: 108}) ] valueCoveringAll:
		{105 to: 105}) ifTrue: [
		[
		(self coverAll:
			{120 to: 123}) error:
			([
			([
			(self coverAll:
				{132 to: 135}) class ] valueCoveringAll:
				{137 to: 141}) amountTooBigToSendToMerchantProcessor ] valueCoveringAll:
				{143 to: 179}) ] valueCoveringAll:
			{125 to: 130} ]] valueCoveringAll:
		{110 to: 116}.! !
!Behavior method!
formatAmount: anAmount
	^ [
	(anAmount
		cover: (28 to: 35)
		declaredAt: (15 to: 22)) printStringFractionDigits:
		(2 coverAll:
			{63 to: 64}) ] valueCoveringAll:
		{37 to: 62}.! !
!Behavior method!
debit: anAmount from: aCreditCard
	(amountToDebit _ anAmount
		cover: (54 to: 61)
		declaredAt: (8 to: 15))
		cover: (37 to: 49)
		declaredAt: (37 to: 49).
	(timesCalled _ [
	(timesCalled
		cover: (65 to: 75)
		declaredAt: (65 to: 75)) +
		(1 coverAll:
			{93 to: 94}) ] valueCoveringAll:
		{92 to: 92})
		cover: (80 to: 90)
		declaredAt: (65 to: 75).! !
!Behavior method!
nextTransactionID
	(lastTransactionID _ [
	(lastTransactionID
		cover: (22 to: 38)
		declaredAt: (22 to: 38)) +
		(1 coverAll:
			{63 to: 63}) ] valueCoveringAll:
		{61 to: 61})
		cover: (43 to: 59)
		declaredAt: (22 to: 38).
	^ lastTransactionID
		cover: (68 to: 84)
		declaredAt: (22 to: 38).! !
!Behavior method!
of: itemsSold totalling: aPrice to: aCustomerID withTransactionID: aTransactionID
	^ [
	([
	(self coverAll:
		{89 to: 92}) new ] valueCoveringAll:
		{94 to: 96})
		initializeOf:
			(itemsSold
				cover: (112 to: 120)
				declaredAt: (5 to: 13))
		totalling:
			(aPrice
				cover: (133 to: 138)
				declaredAt: (26 to: 31))
		to:
			(aCustomerID
				cover: (144 to: 154)
				declaredAt: (37 to: 47))
		withTransactionID:
			(transactionID
				cover: (175 to: 187)
				declaredAt: (175 to: 187)) ] valueCoveringAll:
		{98 to: 110. 122 to: 131. 140 to: 142. 156 to: 173}.! !
!Behavior method!
initializeOf: itemsSold totalling: aPrice to: aCustomerID withTransactionID: aTransactionID
	(transactionID _ aTransactionID
		cover: (114 to: 127)
		declaredAt: (78 to: 91))
		cover: (97 to: 109)
		declaredAt: (97 to: 109).
	(items _ itemsSold
		cover: (140 to: 148)
		declaredAt: (15 to: 23))
		cover: (131 to: 135)
		declaredAt: (131 to: 135).
	(price _ aPrice
		cover: (161 to: 166)
		declaredAt: (36 to: 41))
		cover: (152 to: 156)
		declaredAt: (152 to: 156).
	(customerID _ aCustomerID
		cover: (184 to: 194)
		declaredAt: (47 to: 57))
		cover: (170 to: 179)
		declaredAt: (170 to: 179).! !
!Behavior method!
items
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) copy ] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
price
	^ price
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
belongsTo: aCustomerID
	^ [
	(aCustomerID
		cover: (28 to: 38)
		declaredAt: (12 to: 22)) =
		(customerID
			cover: (42 to: 51)
			declaredAt: (42 to: 51)) ] valueCoveringAll:
		{40 to: 40}.! !

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
nameTooLongToSendToMerchantProcessor
	^ 'El nombre del cliente debe tener como maximo 30 digitos.' coverAll:
		{42 to: 99}.! !
!Behavior method!
timesCalled
	^ timesCalled
		cover: (17 to: 27)
		declaredAt: (17 to: 27).! !

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
amountTooBigToSendToMerchantProcessor
	^ 'El monto puede tener hasta 15 digitos.' coverAll:
		{43 to: 82}.! !

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 23:51:52'!
PASSED!
!Behavior method!
amountToDebit
	^ amountToDebit
		cover: (19 to: 31)
		declaredAt: (19 to: 31).! !

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!
!Behavior method!
debit: anAmount from: aCreditCard
	[
	(self coverAll:
		{37 to: 40}) error:
		([
		([
		(self coverAll:
			{49 to: 52}) class ] valueCoveringAll:
			{54 to: 58}) cannotProcessDebit ] valueCoveringAll:
			{60 to: 77}) ] valueCoveringAll:
		{42 to: 47}.! !
!Behavior method!
cannotProcessDebit
	^ 'No se puede procesar el pago.' coverAll:
		{24 to: 54}.! !

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!
!Behavior method!
initialize
	(time _ [
	(GregorianDateTime
		cover: (22 to: 38)
		declaredAt: (22 to: 38)) now ] valueCoveringAll:
		{40 to: 42})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
withCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock
	^ [
	([
	(self coverAll:
		{121 to: 124}) new ] valueCoveringAll:
		{126 to: 128})
		initializeWithCatalog:
			(aCatalog
				cover: (153 to: 160)
				declaredAt: (14 to: 21))
		withAuthenticator:
			(anAuthenticator
				cover: (181 to: 195)
				declaredAt: (42 to: 56))
		andMerchantProcessor:
			(aMerchantProcessor
				cover: (219 to: 236)
				declaredAt: (80 to: 97))
		andClock:
			(aClock
				cover: (248 to: 253)
				declaredAt: (109 to: 114)) ] valueCoveringAll:
		{130 to: 151. 162 to: 179. 197 to: 217. 238 to: 246}.! !
!Behavior method!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock
	(lastCartID _ 0 coverAll:
		{144 to: 144})
		cover: (130 to: 139)
		declaredAt: (130 to: 139).
	(cartSessions _ [
	(Dictionary
		cover: (164 to: 173)
		declaredAt: (164 to: 173)) new ] valueCoveringAll:
		{175 to: 177})
		cover: (148 to: 159)
		declaredAt: (148 to: 159).
	(catalog _ aCatalog
		cover: (192 to: 199)
		declaredAt: (24 to: 31))
		cover: (181 to: 187)
		declaredAt: (181 to: 187).
	(authenticator _ anAuthenticator
		cover: (220 to: 234)
		declaredAt: (52 to: 66))
		cover: (203 to: 215)
		declaredAt: (203 to: 215).
	(cashier _ [
	(Cashier
		cover: (249 to: 255)
		declaredAt: (249 to: 255)) debitingTo:
		(aMerchantProcessor
			cover: (269 to: 286)
			declaredAt: (90 to: 107)) ] valueCoveringAll:
		{257 to: 267})
		cover: (238 to: 244)
		declaredAt: (238 to: 244).
	(salesList _ [
	(OrderedCollection
		cover: (303 to: 319)
		declaredAt: (303 to: 319)) new ] valueCoveringAll:
		{321 to: 323})
		cover: (290 to: 298)
		declaredAt: (290 to: 298).
	(clock _ aClock
		cover: (336 to: 341)
		declaredAt: (119 to: 124))
		cover: (327 to: 331)
		declaredAt: (327 to: 331).! !
!Behavior method!
createCartForCustomerID: aCustomerID andPassword: aPassword
	| newID |
	[
	(self coverAll:
		{75 to: 78})
		ifCanAuthenticateUsing:
			(aCustomerID
				cover: (106 to: 116)
				declaredAt: (26 to: 36))
		and:
			(aPassword
				cover: (125 to: 133)
				declaredAt: (51 to: 59))
		do: [
			(newID _ [
			(self coverAll:
				{155 to: 158}) nextCartID ] valueCoveringAll:
				{160 to: 169})
				cover: (146 to: 150)
				declaredAt: (65 to: 69).
			[
			(cartSessions
				cover: (175 to: 186)
				declaredAt: (175 to: 186))
				at:
					(newID
						cover: (192 to: 196)
						declaredAt: (65 to: 69))
				put:
					([
					(CartSession
						cover: (204 to: 214)
						declaredAt: (204 to: 214))
						for:
							([
							(self coverAll:
								{221 to: 224}) emptyCart ] valueCoveringAll:
								{226 to: 234})
						belongingTo:
							(aCustomerID
								cover: (249 to: 259)
								declaredAt: (26 to: 36))
						at:
							([
							(clock
								cover: (265 to: 269)
								declaredAt: (265 to: 269)) now ] valueCoveringAll:
								{271 to: 273}) ] valueCoveringAll:
						{216 to: 219. 236 to: 247. 261 to: 263}) ] valueCoveringAll:
				{188 to: 190. 198 to: 201} ]] valueCoveringAll:
		{82 to: 104. 120 to: 123. 137 to: 139}.
	^ newID
		cover: (285 to: 289)
		declaredAt: (65 to: 69).! !
!Behavior method!
ifCanAuthenticateUsing: aCustomerID and: aPassword do: aBlock
	[
	([
	(authenticator
		cover: (66 to: 78)
		declaredAt: (66 to: 78))
		authenticateUserID:
			(aCustomerID
				cover: (100 to: 110)
				declaredAt: (25 to: 35))
		withPassword:
			(aPassword
				cover: (126 to: 134)
				declaredAt: (42 to: 50)) ] valueCoveringAll:
		{80 to: 98. 112 to: 124})
		ifTrue:
			(aBlock
				cover: (147 to: 152)
				declaredAt: (56 to: 61))
		ifFalse: [
			[
			(self coverAll:
				{167 to: 170}) error:
				([
				([
				(self coverAll:
					{179 to: 182}) class ] valueCoveringAll:
					{184 to: 188}) authenticationErrorMessage ] valueCoveringAll:
					{190 to: 215}) ] valueCoveringAll:
				{172 to: 177} ]] valueCoveringAll:
		{139 to: 145. 156 to: 163}.! !
!Behavior method!
authenticateUserID: aCustomerID withPassword: aPassword
	^ true coverAll:
		{60 to: 63}.! !
!Behavior method!
nextCartID
	(lastCartID _ [
	(lastCartID
		cover: (15 to: 24)
		declaredAt: (15 to: 24)) +
		(1 coverAll:
			{42 to: 42}) ] valueCoveringAll:
		{40 to: 40})
		cover: (29 to: 38)
		declaredAt: (15 to: 24).
	^ lastCartID
		cover: (47 to: 56)
		declaredAt: (15 to: 24).! !
!Behavior method!
emptyCart
	^ [
	(Cart
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) for:
		(catalog
			cover: (25 to: 31)
			declaredAt: (25 to: 31)) ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
now
	^ time
		cover: (9 to: 12)
		declaredAt: (9 to: 12).! !
!Behavior method!
for: aCart belongingTo: aCustomerID at: aGregorianDateTime
	^ [
	([
	(self coverAll:
		{65 to: 68}) new ] valueCoveringAll:
		{70 to: 72})
		initializeFor:
			(aCart
				cover: (89 to: 93)
				declaredAt: (6 to: 10))
		belongingTo:
			(aCustomerID
				cover: (108 to: 118)
				declaredAt: (25 to: 35))
		at:
			(aGregorianDateTime
				cover: (124 to: 141)
				declaredAt: (41 to: 58)) ] valueCoveringAll:
		{74 to: 87. 95 to: 106. 120 to: 122}.! !
!Behavior method!
initializeFor: aCart belongingTo: aCustomerID at: aGregorianDateTime
	(cart _ aCart
		cover: (81 to: 85)
		declaredAt: (16 to: 20))
		cover: (73 to: 76)
		declaredAt: (73 to: 76).
	(customerID _ aCustomerID
		cover: (103 to: 113)
		declaredAt: (35 to: 45))
		cover: (89 to: 98)
		declaredAt: (89 to: 98).
	(lastAccessTime _ aGregorianDateTime
		cover: (135 to: 152)
		declaredAt: (51 to: 68))
		cover: (117 to: 130)
		declaredAt: (117 to: 130).! !
!Behavior method!
listCartWithID: aCartID
	[
	(self coverAll:
		{27 to: 30})
		ifSessionNotExpiredFor:
			(aCartID
				cover: (56 to: 62)
				declaredAt: (17 to: 23))
		do: [ :aCartSession |
			^ [
			([
			(aCartSession
				cover: (89 to: 100)
				declaredAt: (70 to: 81)) cart ] valueCoveringAll:
				{102 to: 105}) listContents ] valueCoveringAll:
				{107 to: 118} ]] valueCoveringAll:
		{32 to: 54. 64 to: 66}.! !
!Behavior method!
ifSessionNotExpiredFor: aCartID do: aBlock
	| currentTime cartSession |
	(cartSession _ [
	(self coverAll:
		{92 to: 95}) cartSessionFor:
		(aCartID
			cover: (113 to: 119)
			declaredAt: (25 to: 31)) ] valueCoveringAll:
		{97 to: 111})
		cover: (77 to: 87)
		declaredAt: (60 to: 70).
	(currentTime _ [
	(clock
		cover: (139 to: 143)
		declaredAt: (139 to: 143)) now ] valueCoveringAll:
		{145 to: 147})
		cover: (124 to: 134)
		declaredAt: (48 to: 58).
	[
	([
	(cartSession
		cover: (152 to: 162)
		declaredAt: (60 to: 70)) isExpiredAt:
		(currentTime
			cover: (177 to: 187)
			declaredAt: (48 to: 58)) ] valueCoveringAll:
		{164 to: 175})
		ifTrue: [
			[
			(self coverAll:
				{202 to: 205}) error:
				([
				([
				(self coverAll:
					{214 to: 217}) class ] valueCoveringAll:
					{219 to: 223}) expiredCartErrorMessage ] valueCoveringAll:
					{225 to: 247}) ] valueCoveringAll:
				{207 to: 212} ]
		ifFalse: [
			[
			(cartSession
				cover: (268 to: 278)
				declaredAt: (60 to: 70)) updateLastAccessTime:
				(currentTime
					cover: (302 to: 312)
					declaredAt: (48 to: 58)) ] valueCoveringAll:
				{280 to: 300}.
			[
			(aBlock
				cover: (318 to: 323)
				declaredAt: (37 to: 42)) value:
				(cartSession
					cover: (332 to: 342)
					declaredAt: (60 to: 70)) ] valueCoveringAll:
				{325 to: 330} ]] valueCoveringAll:
		{192 to: 198. 253 to: 260}.! !
!Behavior method!
cartSessionFor: aCartID
	^ [
	(cartSessions
		cover: (29 to: 40)
		declaredAt: (29 to: 40))
		at:
			(aCartID
				cover: (46 to: 52)
				declaredAt: (17 to: 23))
		ifAbsent: [
			[
			(self coverAll:
				{65 to: 68}) error:
				([
				([
				(self coverAll:
					{77 to: 80}) class ] valueCoveringAll:
					{82 to: 86}) invalidCartIDErrorMessage ] valueCoveringAll:
					{88 to: 112}) ] valueCoveringAll:
				{70 to: 75} ]] valueCoveringAll:
		{42 to: 44. 54 to: 62}.! !
!Behavior method!
isExpiredAt: aGregorianDateTime
	^ [
	([
	(lastAccessTime
		cover: (38 to: 51)
		declaredAt: (38 to: 51)) distanceTo:
		(aGregorianDateTime
			cover: (65 to: 82)
			declaredAt: (14 to: 31)) ] valueCoveringAll:
		{53 to: 63}) >
		([
		(30 coverAll:
			{88 to: 89}) *
			(minute
				cover: (93 to: 98)
				declaredAt: (93 to: 98)) ] valueCoveringAll:
			{91 to: 91}) ] valueCoveringAll:
		{85 to: 85}.! !
!Behavior method!
updateLastAccessTime: aGregorianDateTime
	(lastAccessTime _ aGregorianDateTime
		cover: (62 to: 79)
		declaredAt: (23 to: 40))
		cover: (44 to: 57)
		declaredAt: (44 to: 57).! !
!Behavior method!
cart
	^ cart
		cover: (10 to: 13)
		declaredAt: (10 to: 13).! !

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!
!Behavior method!
authenticateUserID: aCustomerID withPassword: aPassword
	^ false coverAll:
		{60 to: 64}.! !
!Behavior method!
authenticationErrorMessage
	^ 'Error al autenticarse.' coverAll:
		{31 to: 54}.! !

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!
!Behavior method!
addToCartWithID: aCartID book: aBook quantity: aQuantity
	[
	(self coverAll:
		{60 to: 63})
		ifSessionNotExpiredFor:
			(aCartID
				cover: (89 to: 95)
				declaredAt: (18 to: 24))
		do: [ :aCartSession |
			[
			([
			(aCartSession
				cover: (120 to: 131)
				declaredAt: (103 to: 114)) cart ] valueCoveringAll:
				{133 to: 136})
				addBook:
					(aBook
						cover: (147 to: 151)
						declaredAt: (32 to: 36))
				quantity:
					(aQuantity
						cover: (163 to: 171)
						declaredAt: (48 to: 56)) ] valueCoveringAll:
				{138 to: 145. 153 to: 161} ]] valueCoveringAll:
		{65 to: 87. 97 to: 99}.! !

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!
!Behavior method!
invalidCartIDErrorMessage
	^ 'El ID de carrito no es valido.' coverAll:
		{31 to: 62}.! !

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!
!Behavior method!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYear ownedBy: anOwner
	| creditCard transactionID |
	(creditCard _ [
	(CreditCard
		cover: (160 to: 169)
		declaredAt: (160 to: 169))
		for:
			(anOwner
				cover: (176 to: 182)
				declaredAt: (104 to: 110))
		number:
			(aCreditCardNumber
				cover: (192 to: 208)
				declaredAt: (52 to: 68))
		expiringOn:
			(aMonthOfYear
				cover: (222 to: 233)
				declaredAt: (82 to: 93)) ] valueCoveringAll:
		{171 to: 174. 184 to: 190. 210 to: 220})
		cover: (146 to: 155)
		declaredAt: (116 to: 125).
	[
	(self coverAll:
		{239 to: 242})
		ifSessionNotExpiredFor:
			(aCartID
				cover: (268 to: 274)
				declaredAt: (21 to: 27))
		do: [ :aCartSession |
			(transactionID _ [
			(cashier
				cover: (316 to: 322)
				declaredAt: (316 to: 322))
				checkout:
					([
					(aCartSession
						cover: (334 to: 345)
						declaredAt: (282 to: 293)) cart ] valueCoveringAll:
						{347 to: 350})
				for:
					([
					(aCartSession
						cover: (357 to: 368)
						declaredAt: (282 to: 293)) customerID ] valueCoveringAll:
						{370 to: 379})
				withCard:
					(creditCard
						cover: (391 to: 400)
						declaredAt: (116 to: 125))
				on:
					([
					(clock
						cover: (406 to: 410)
						declaredAt: (406 to: 410)) now ] valueCoveringAll:
						{412 to: 414})
				registeringOn:
					(salesList
						cover: (431 to: 439)
						declaredAt: (431 to: 439)) ] valueCoveringAll:
				{324 to: 332. 352 to: 355. 381 to: 389. 402 to: 404. 416 to: 429})
				cover: (299 to: 311)
				declaredAt: (127 to: 139).
			[
			(self coverAll:
				{447 to: 450}) invalidateCartSessionFor:
				(aCartID
					cover: (478 to: 484)
					declaredAt: (21 to: 27)) ] valueCoveringAll:
				{452 to: 476}.
			^ transactionID
				cover: (493 to: 505)
				declaredAt: (127 to: 139) ]] valueCoveringAll:
		{244 to: 266. 276 to: 278}.! !
!Behavior method!
customerID
	^ customerID
		cover: (16 to: 25)
		declaredAt: (16 to: 25).! !
!Behavior method!
invalidateCartSessionFor: aCartID
	^ [
	(cartSessions
		cover: (39 to: 50)
		declaredAt: (39 to: 50)) removeKey:
		(aCartID
			cover: (63 to: 69)
			declaredAt: (27 to: 33)) ] valueCoveringAll:
		{52 to: 61}.! !
!Behavior method!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	[
	(self coverAll:
		{66 to: 69})
		ifCanAuthenticateUsing:
			(aCustomerID
				cover: (97 to: 107)
				declaredAt: (28 to: 38))
		and:
			(aPassword
				cover: (116 to: 124)
				declaredAt: (53 to: 61))
		do: [ ^ [
			(self coverAll:
				{135 to: 138}) getAllPurchasesFrom:
				(aCustomerID
					cover: (161 to: 171)
					declaredAt: (28 to: 38)) ] valueCoveringAll:
				{140 to: 159} ]] valueCoveringAll:
		{73 to: 95. 111 to: 114. 128 to: 130}.! !
!Behavior method!
getAllPurchasesFrom: aCustomerID
	| customerPurchases totalAmount |
	(customerPurchases _ [
	(Bag
		cover: (94 to: 96)
		declaredAt: (94 to: 96)) new ] valueCoveringAll:
		{98 to: 100})
		cover: (73 to: 89)
		declaredAt: (38 to: 54).
	(totalAmount _ 0 coverAll:
		{119 to: 119})
		cover: (104 to: 114)
		declaredAt: (56 to: 66).
	[
	(salesList
		cover: (125 to: 133)
		declaredAt: (125 to: 133)) do: [ :aSale |
		[
		([
		(aSale
			cover: (150 to: 154)
			declaredAt: (141 to: 145)) belongsTo:
			(aCustomerID
				cover: (167 to: 177)
				declaredAt: (22 to: 32)) ] valueCoveringAll:
			{156 to: 165}) ifTrue: [
			[
			(customerPurchases
				cover: (193 to: 209)
				declaredAt: (38 to: 54)) addAll:
				([
				(aSale
					cover: (219 to: 223)
					declaredAt: (141 to: 145)) items ] valueCoveringAll:
					{225 to: 229}) ] valueCoveringAll:
				{211 to: 217}.
			(totalAmount _ [
			(totalAmount
				cover: (235 to: 245)
				declaredAt: (56 to: 66)) +
				([
				(aSale
					cover: (264 to: 268)
					declaredAt: (141 to: 145)) price ] valueCoveringAll:
					{270 to: 274}) ] valueCoveringAll:
				{262 to: 262})
				cover: (250 to: 260)
				declaredAt: (56 to: 66) ]] valueCoveringAll:
			{180 to: 186} ]] valueCoveringAll:
		{135 to: 137}.
	^ [
	(customerPurchases
		cover: (286 to: 302)
		declaredAt: (38 to: 54)) ->
		(totalAmount
			cover: (307 to: 317)
			declaredAt: (56 to: 66)) ] valueCoveringAll:
		{304 to: 305}.! !

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!
!Behavior method!
changeTime: aGregorianDateTime
	(time _ aGregorianDateTime
		cover: (42 to: 59)
		declaredAt: (13 to: 30))
		cover: (34 to: 37)
		declaredAt: (34 to: 37).! !
!Behavior method!
expiredCartErrorMessage
	^ 'El carrito ha expirado.' coverAll:
		{29 to: 53}.! !

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:51:53'!
PASSED!
!Sale class methodsFor: 'as yet unclassified' stamp: 'AEC 6/12/2022 23:54:15' prior: 50483619!
of: itemsSold totalling: aPrice to: aCustomerID withTransactionID: aTransactionID  

	^ self new initializeOf: itemsSold totalling: aPrice to: aCustomerID withTransactionID: aTransactionID ! !
!Behavior method!
for: aCatalog
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aCatalog
			cover: (44 to: 51)
			declaredAt: (6 to: 13)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aCatalog
	(books _ [
	(Bag
		cover: (36 to: 38)
		declaredAt: (36 to: 38)) new ] valueCoveringAll:
		{40 to: 42})
		cover: (27 to: 31)
		declaredAt: (27 to: 31).
	(catalog _ aCatalog
		cover: (57 to: 64)
		declaredAt: (16 to: 23))
		cover: (46 to: 52)
		declaredAt: (46 to: 52).! !
!Behavior method!
isEmpty
	^ [
	(books
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/12/2022 23:55:28'!
PASSED!
!Behavior method!
addBook: aBookISBN quantity: aQuantity
	[
	(self coverAll:
		{44 to: 47}) assertBookIsInCatalog:
		(aBookISBN
			cover: (72 to: 80)
			declaredAt: (10 to: 18)) ] valueCoveringAll:
		{49 to: 70}.
	[
	(self coverAll:
		{84 to: 87}) assertQuantityIsValid:
		(aQuantity
			cover: (112 to: 120)
			declaredAt: (30 to: 38)) ] valueCoveringAll:
		{89 to: 110}.
	[
	(books
		cover: (124 to: 128)
		declaredAt: (124 to: 128))
		add:
			(aBookISBN
				cover: (135 to: 143)
				declaredAt: (10 to: 18))
		withOccurrences:
			(aQuantity
				cover: (162 to: 170)
				declaredAt: (30 to: 38)) ] valueCoveringAll:
		{130 to: 133. 145 to: 160}.! !
!Behavior method!
assertBookIsInCatalog: aBookISBN
	[
	([
	(catalog
		cover: (37 to: 43)
		declaredAt: (37 to: 43)) includesKey:
		(aBookISBN
			cover: (58 to: 66)
			declaredAt: (24 to: 32)) ] valueCoveringAll:
		{45 to: 56}) ifFalse: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			([
			(self coverAll:
				{90 to: 93}) class ] valueCoveringAll:
				{95 to: 99}) bookNotInCatalogErrorDescription ] valueCoveringAll:
				{101 to: 132}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 76}.! !
!Behavior method!
assertQuantityIsValid: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) >
		(0 coverAll:
			{48 to: 48}) ] valueCoveringAll:
		{46 to: 46}) ifFalse: [
		[
		(self coverAll:
			{59 to: 62}) error:
			([
			([
			(self coverAll:
				{71 to: 74}) class ] valueCoveringAll:
				{76 to: 80}) nonPositiveBookQuantityErrorDescription ] valueCoveringAll:
				{82 to: 120}) ] valueCoveringAll:
			{64 to: 69} ]] valueCoveringAll:
		{50 to: 57}.
	[
	([
	(aQuantity
		cover: (126 to: 134)
		declaredAt: (24 to: 32)) isInteger ] valueCoveringAll:
		{136 to: 144}) ifFalse: [
		[
		(self coverAll:
			{155 to: 158}) error:
			([
			([
			(self coverAll:
				{167 to: 170}) class ] valueCoveringAll:
				{172 to: 176}) nonIntegerBookQuantityErrorDescription ] valueCoveringAll:
				{178 to: 215}) ] valueCoveringAll:
			{160 to: 165} ]] valueCoveringAll:
		{146 to: 153}.! !
!Behavior method!
hasBook: aBookISBN
	^ [
	(books
		cover: (25 to: 29)
		declaredAt: (25 to: 29)) includes:
		(aBookISBN
			cover: (41 to: 49)
			declaredAt: (10 to: 18)) ] valueCoveringAll:
		{31 to: 39}.! !

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/12/2022 23:55:28'!
PASSED!
!Behavior method!
quantityOfBooksWithISBN: aBookISBN
	^ [
	(books
		cover: (42 to: 46)
		declaredAt: (42 to: 46)) occurrencesOf:
		(aBookISBN
			cover: (63 to: 71)
			declaredAt: (26 to: 34)) ] valueCoveringAll:
		{48 to: 61}.! !

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/12/2022 23:55:28'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/12/2022 23:55:28'!
PASSED!
!Behavior method!
bookNotInCatalogErrorDescription
	^ 'El libro no se encuentra en el catalogo.' coverAll:
		{38 to: 79}.! !

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/12/2022 23:55:28'!
PASSED!
!Behavior method!
nonPositiveBookQuantityErrorDescription
	^ 'La cantidad de libros a agregar no es positiva.' coverAll:
		{45 to: 93}.! !

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/12/2022 23:55:28'!
PASSED!
!Behavior method!
nonIntegerBookQuantityErrorDescription
	^ 'La cantidad de libros a agregar no es un numero entero.' coverAll:
		{44 to: 100}.! !

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/12/2022 23:55:28'!
PASSED!
!Behavior method!
listContents
	^ [
	(books
		cover: (18 to: 22)
		declaredAt: (18 to: 22)) copy ] valueCoveringAll:
		{24 to: 27}.! !

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/12/2022 23:55:28'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
emptyOwnerNameErrorDescription
	^ 'El nombre de titular de la tarjeta esta vacio' coverAll:
		{37 to: 83}.! !
!Behavior method!
for: anOwner number: aCreditCardNumber expiringOn: aGregorianMonthOfYear
	[
	(self coverAll:
		{77 to: 80}) assertNumberHas16Digits:
		(aCreditCardNumber
			cover: (107 to: 123)
			declaredAt: (22 to: 38)) ] valueCoveringAll:
		{82 to: 105}.
	[
	(self coverAll:
		{127 to: 130}) assertOwnerNameIsNotBlank:
		(anOwner
			cover: (159 to: 165)
			declaredAt: (6 to: 12)) ] valueCoveringAll:
		{132 to: 157}.
	^ [
	([
	(self coverAll:
		{173 to: 176}) new ] valueCoveringAll:
		{178 to: 180})
		initializeFor:
			(anOwner
				cover: (197 to: 203)
				declaredAt: (6 to: 12))
		number:
			(aCreditCardNumber
				cover: (213 to: 229)
				declaredAt: (22 to: 38))
		expiringOn:
			(aGregorianMonthOfYear
				cover: (243 to: 263)
				declaredAt: (52 to: 72)) ] valueCoveringAll:
		{182 to: 195. 205 to: 211. 231 to: 241}.! !
!Behavior method!
assertNumberHas16Digits: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (48 to: 64)
		declaredAt: (26 to: 42)) numberOfDigitsInBase:
		(10 coverAll:
			{88 to: 89}) ] valueCoveringAll:
		{66 to: 86}) =
		(16 coverAll:
			{94 to: 95}) ] valueCoveringAll:
		{92 to: 92}) ifFalse: [
		[
		(self coverAll:
			{108 to: 111}) error:
			([
			(self coverAll:
				{120 to: 123}) invalidNumberOfDigitsErrorDescription ] valueCoveringAll:
				{125 to: 161}) ] valueCoveringAll:
			{113 to: 118} ]] valueCoveringAll:
		{98 to: 105}.! !
!Behavior method!
assertOwnerNameIsNotBlank: anOwner
	[
	([
	([
	(anOwner
		cover: (38 to: 44)
		declaredAt: (28 to: 34)) withBlanksTrimmed ] valueCoveringAll:
		{46 to: 62}) isEmpty ] valueCoveringAll:
		{64 to: 70}) ifTrue: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(self coverAll:
				{93 to: 96}) emptyOwnerNameErrorDescription ] valueCoveringAll:
				{98 to: 127}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{72 to: 78}.! !

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
invalidNumberOfDigitsErrorDescription
	^ 'El numero de tarjeta no tiene 16 digitos.' coverAll:
		{43 to: 85}.! !

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
initialize
	(timesCalled _ 0 coverAll:
		{28 to: 29})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).! !
!Behavior method!
debitingTo: aMerchantProcessor
	^ [
	([
	(self coverAll:
		{36 to: 39}) new ] valueCoveringAll:
		{41 to: 43}) initializeDebitingTo:
		(aMerchantProcessor
			cover: (67 to: 84)
			declaredAt: (13 to: 30)) ] valueCoveringAll:
		{45 to: 65}.! !
!Behavior method!
initializeDebitingTo: aMerchantProcessor
	(merchantProcessor _ aMerchantProcessor
		cover: (67 to: 84)
		declaredAt: (23 to: 40))
		cover: (46 to: 62)
		declaredAt: (46 to: 62).
	(lastTransactionID _ 0 coverAll:
		{108 to: 109})
		cover: (88 to: 104)
		declaredAt: (88 to: 104).! !
!Behavior method!
initializeFor: anOwner number: aCreditCardNumber expiringOn: aGregorianMonthOfYear
	(owner _ anOwner
		cover: (96 to: 102)
		declaredAt: (16 to: 22))
		cover: (87 to: 91)
		declaredAt: (87 to: 91).
	(number _ aCreditCardNumber
		cover: (116 to: 132)
		declaredAt: (32 to: 48))
		cover: (106 to: 111)
		declaredAt: (106 to: 111).
	(expirationMonthOfYear _ aGregorianMonthOfYear
		cover: (161 to: 181)
		declaredAt: (62 to: 82))
		cover: (136 to: 156)
		declaredAt: (136 to: 156).! !
!Behavior method!
checkout: aCart for: aCustomerID withCard: aCreditCard on: aGregorianDate registeringOn: aSalesList
	| price transactionID |
	[
	(self coverAll:
		{131 to: 134}) assertCartIsNotEmpty:
		(aCart
			cover: (158 to: 162)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{136 to: 156}.
	(price _ [
	(aCart
		cover: (175 to: 179)
		declaredAt: (11 to: 15)) value ] valueCoveringAll:
		{181 to: 185})
		cover: (166 to: 170)
		declaredAt: (106 to: 110).
	[
	([
	(aCreditCard
		cover: (190 to: 200)
		declaredAt: (44 to: 54)) isExpiredOn:
		(aGregorianDate
			cover: (215 to: 228)
			declaredAt: (60 to: 73)) ] valueCoveringAll:
		{202 to: 213}) ifTrue: [
		[
		(self coverAll:
			{239 to: 242}) error:
			([
			([
			(self coverAll:
				{251 to: 254}) class ] valueCoveringAll:
				{256 to: 260}) expiredCreditCardErrorDescription ] valueCoveringAll:
				{262 to: 294}) ] valueCoveringAll:
			{244 to: 249} ]] valueCoveringAll:
		{231 to: 237}.
	[
	(self coverAll:
		{299 to: 302}) assertNameIsValidToSendToMerchantProcessor:
		(aCreditCard
			cover: (348 to: 358)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{304 to: 346}.
	[
	(self coverAll:
		{362 to: 365}) assertAmountIsValidToSendToMerchantProcessor:
		(price
			cover: (413 to: 417)
			declaredAt: (106 to: 110)) ] valueCoveringAll:
		{367 to: 411}.
	[
	(merchantProcessor
		cover: (423 to: 439)
		declaredAt: (423 to: 439))
		debit:
			([
			(self coverAll:
				{449 to: 452}) formatAmount:
				(price
					cover: (468 to: 472)
					declaredAt: (106 to: 110)) ] valueCoveringAll:
				{454 to: 466})
		from:
			(aCreditCard
				cover: (481 to: 491)
				declaredAt: (44 to: 54)) ] valueCoveringAll:
		{441 to: 446. 475 to: 479}.
	(transactionID _ [
	(self coverAll:
		{513 to: 516}) nextTransactionID ] valueCoveringAll:
		{518 to: 534})
		cover: (496 to: 508)
		declaredAt: (112 to: 124).
	[
	(aSalesList
		cover: (538 to: 547)
		declaredAt: (90 to: 99)) add:
		([
		(Sale
			cover: (555 to: 558)
			declaredAt: (555 to: 558))
			of:
				([
				(aCart
					cover: (564 to: 568)
					declaredAt: (11 to: 15)) listContents ] valueCoveringAll:
					{570 to: 581})
			totalling:
				(price
					cover: (594 to: 598)
					declaredAt: (106 to: 110))
			to:
				(aCustomerID
					cover: (604 to: 614)
					declaredAt: (22 to: 32))
			withTransactionID:
				(transactionID
					cover: (635 to: 647)
					declaredAt: (112 to: 124)) ] valueCoveringAll:
			{560 to: 562. 583 to: 592. 600 to: 602. 616 to: 633}) ] valueCoveringAll:
		{549 to: 552}.
	^ transactionID
		cover: (655 to: 667)
		declaredAt: (112 to: 124).! !
!Behavior method!
assertCartIsNotEmpty: aCart
	^ [
	([
	(aCart
		cover: (33 to: 37)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{39 to: 45}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			([
			(self coverAll:
				{67 to: 70}) class ] valueCoveringAll:
				{72 to: 76}) emptyCartErrorDescription ] valueCoveringAll:
				{78 to: 102}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{47 to: 53}.! !
!Behavior method!
emptyCartErrorDescription
	^ 'El carrito esta vacio.' coverAll:
		{32 to: 55}.! !

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
value
	^ [
	(books
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) sum: [ :aBookISBN |
		[
		(catalog
			cover: (36 to: 42)
			declaredAt: (36 to: 42)) at:
			(aBookISBN
				cover: (48 to: 56)
				declaredAt: (23 to: 31)) ] valueCoveringAll:
			{44 to: 46} ]] valueCoveringAll:
		{16 to: 19}.! !
!Behavior method!
isExpiredOn: aFixedGregorianDate
	^ [
	([
	(expirationMonthOfYear
		cover: (38 to: 58)
		declaredAt: (38 to: 58)) lastDate ] valueCoveringAll:
		{60 to: 67}) <
		(aFixedGregorianDate
			cover: (71 to: 89)
			declaredAt: (14 to: 32)) ] valueCoveringAll:
		{69 to: 69}.! !
!Behavior method!
expiredCreditCardErrorDescription
	^ 'La tarjeta de credito esta vencida.' coverAll:
		{39 to: 75}.! !

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
assertNameIsValidToSendToMerchantProcessor: aCreditCard
	[
	([
	([
	([
	([
	(aCreditCard
		cover: (59 to: 69)
		declaredAt: (45 to: 55)) owner ] valueCoveringAll:
		{71 to: 75}) withBlanksTrimmed ] valueCoveringAll:
		{77 to: 93}) size ] valueCoveringAll:
		{95 to: 98}) >
		(30 coverAll:
			{102 to: 103}) ] valueCoveringAll:
		{100 to: 100}) ifTrue: [
		[
		(self coverAll:
			{115 to: 118}) error:
			([
			([
			(self coverAll:
				{127 to: 130}) class ] valueCoveringAll:
				{132 to: 136}) nameTooLongToSendToMerchantProcessor ] valueCoveringAll:
				{138 to: 173}) ] valueCoveringAll:
			{120 to: 125} ]] valueCoveringAll:
		{105 to: 111}.! !
!Behavior method!
owner
	^ owner
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
assertAmountIsValidToSendToMerchantProcessor: anAmount
	[
	([
	([
	([
	(anAmount
		cover: (59 to: 66)
		declaredAt: (47 to: 54)) truncated ] valueCoveringAll:
		{68 to: 76}) numberOfDigitsInBase:
		(10 coverAll:
			{100 to: 101}) ] valueCoveringAll:
		{78 to: 98}) >
		(15 coverAll:
			{107 to: 108}) ] valueCoveringAll:
		{105 to: 105}) ifTrue: [
		[
		(self coverAll:
			{120 to: 123}) error:
			([
			([
			(self coverAll:
				{132 to: 135}) class ] valueCoveringAll:
				{137 to: 141}) amountTooBigToSendToMerchantProcessor ] valueCoveringAll:
				{143 to: 179}) ] valueCoveringAll:
			{125 to: 130} ]] valueCoveringAll:
		{110 to: 116}.! !
!Behavior method!
formatAmount: anAmount
	^ [
	(anAmount
		cover: (28 to: 35)
		declaredAt: (15 to: 22)) printStringFractionDigits:
		(2 coverAll:
			{63 to: 64}) ] valueCoveringAll:
		{37 to: 62}.! !
!Behavior method!
debit: anAmount from: aCreditCard
	(amountToDebit _ anAmount
		cover: (54 to: 61)
		declaredAt: (8 to: 15))
		cover: (37 to: 49)
		declaredAt: (37 to: 49).
	(timesCalled _ [
	(timesCalled
		cover: (65 to: 75)
		declaredAt: (65 to: 75)) +
		(1 coverAll:
			{93 to: 94}) ] valueCoveringAll:
		{92 to: 92})
		cover: (80 to: 90)
		declaredAt: (65 to: 75).! !
!Behavior method!
nextTransactionID
	(lastTransactionID _ [
	(lastTransactionID
		cover: (22 to: 38)
		declaredAt: (22 to: 38)) +
		(1 coverAll:
			{63 to: 63}) ] valueCoveringAll:
		{61 to: 61})
		cover: (43 to: 59)
		declaredAt: (22 to: 38).
	^ lastTransactionID
		cover: (68 to: 84)
		declaredAt: (22 to: 38).! !
!Behavior method!
of: itemsSold totalling: aPrice to: aCustomerID withTransactionID: aTransactionID
	^ [
	([
	(self coverAll:
		{89 to: 92}) new ] valueCoveringAll:
		{94 to: 96})
		initializeOf:
			(itemsSold
				cover: (112 to: 120)
				declaredAt: (5 to: 13))
		totalling:
			(aPrice
				cover: (133 to: 138)
				declaredAt: (26 to: 31))
		to:
			(aCustomerID
				cover: (144 to: 154)
				declaredAt: (37 to: 47))
		withTransactionID:
			(aTransactionID
				cover: (175 to: 188)
				declaredAt: (68 to: 81)) ] valueCoveringAll:
		{98 to: 110. 122 to: 131. 140 to: 142. 156 to: 173}.! !
!Behavior method!
initializeOf: itemsSold totalling: aPrice to: aCustomerID withTransactionID: aTransactionID
	(transactionID _ aTransactionID
		cover: (114 to: 127)
		declaredAt: (78 to: 91))
		cover: (97 to: 109)
		declaredAt: (97 to: 109).
	(items _ itemsSold
		cover: (140 to: 148)
		declaredAt: (15 to: 23))
		cover: (131 to: 135)
		declaredAt: (131 to: 135).
	(price _ aPrice
		cover: (161 to: 166)
		declaredAt: (36 to: 41))
		cover: (152 to: 156)
		declaredAt: (152 to: 156).
	(customerID _ aCustomerID
		cover: (184 to: 194)
		declaredAt: (47 to: 57))
		cover: (170 to: 179)
		declaredAt: (170 to: 179).! !
!Behavior method!
items
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) copy ] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
price
	^ price
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
belongsTo: aCustomerID
	^ [
	(aCustomerID
		cover: (28 to: 38)
		declaredAt: (12 to: 22)) =
		(customerID
			cover: (42 to: 51)
			declaredAt: (42 to: 51)) ] valueCoveringAll:
		{40 to: 40}.! !

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
nameTooLongToSendToMerchantProcessor
	^ 'El nombre del cliente debe tener como maximo 30 digitos.' coverAll:
		{42 to: 99}.! !
!Behavior method!
timesCalled
	^ timesCalled
		cover: (17 to: 27)
		declaredAt: (17 to: 27).! !

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
amountTooBigToSendToMerchantProcessor
	^ 'El monto puede tener hasta 15 digitos.' coverAll:
		{43 to: 82}.! !

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
amountToDebit
	^ amountToDebit
		cover: (19 to: 31)
		declaredAt: (19 to: 31).! !

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
debit: anAmount from: aCreditCard
	[
	(self coverAll:
		{37 to: 40}) error:
		([
		([
		(self coverAll:
			{49 to: 52}) class ] valueCoveringAll:
			{54 to: 58}) cannotProcessDebit ] valueCoveringAll:
			{60 to: 77}) ] valueCoveringAll:
		{42 to: 47}.! !
!Behavior method!
cannotProcessDebit
	^ 'No se puede procesar el pago.' coverAll:
		{24 to: 54}.! !

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
initialize
	(time _ [
	(GregorianDateTime
		cover: (22 to: 38)
		declaredAt: (22 to: 38)) now ] valueCoveringAll:
		{40 to: 42})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
withCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock
	^ [
	([
	(self coverAll:
		{121 to: 124}) new ] valueCoveringAll:
		{126 to: 128})
		initializeWithCatalog:
			(aCatalog
				cover: (153 to: 160)
				declaredAt: (14 to: 21))
		withAuthenticator:
			(anAuthenticator
				cover: (181 to: 195)
				declaredAt: (42 to: 56))
		andMerchantProcessor:
			(aMerchantProcessor
				cover: (219 to: 236)
				declaredAt: (80 to: 97))
		andClock:
			(aClock
				cover: (248 to: 253)
				declaredAt: (109 to: 114)) ] valueCoveringAll:
		{130 to: 151. 162 to: 179. 197 to: 217. 238 to: 246}.! !
!Behavior method!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock
	(lastCartID _ 0 coverAll:
		{144 to: 144})
		cover: (130 to: 139)
		declaredAt: (130 to: 139).
	(cartSessions _ [
	(Dictionary
		cover: (164 to: 173)
		declaredAt: (164 to: 173)) new ] valueCoveringAll:
		{175 to: 177})
		cover: (148 to: 159)
		declaredAt: (148 to: 159).
	(catalog _ aCatalog
		cover: (192 to: 199)
		declaredAt: (24 to: 31))
		cover: (181 to: 187)
		declaredAt: (181 to: 187).
	(authenticator _ anAuthenticator
		cover: (220 to: 234)
		declaredAt: (52 to: 66))
		cover: (203 to: 215)
		declaredAt: (203 to: 215).
	(cashier _ [
	(Cashier
		cover: (249 to: 255)
		declaredAt: (249 to: 255)) debitingTo:
		(aMerchantProcessor
			cover: (269 to: 286)
			declaredAt: (90 to: 107)) ] valueCoveringAll:
		{257 to: 267})
		cover: (238 to: 244)
		declaredAt: (238 to: 244).
	(salesList _ [
	(OrderedCollection
		cover: (303 to: 319)
		declaredAt: (303 to: 319)) new ] valueCoveringAll:
		{321 to: 323})
		cover: (290 to: 298)
		declaredAt: (290 to: 298).
	(clock _ aClock
		cover: (336 to: 341)
		declaredAt: (119 to: 124))
		cover: (327 to: 331)
		declaredAt: (327 to: 331).! !
!Behavior method!
createCartForCustomerID: aCustomerID andPassword: aPassword
	| newID |
	[
	(self coverAll:
		{75 to: 78})
		ifCanAuthenticateUsing:
			(aCustomerID
				cover: (106 to: 116)
				declaredAt: (26 to: 36))
		and:
			(aPassword
				cover: (125 to: 133)
				declaredAt: (51 to: 59))
		do: [
			(newID _ [
			(self coverAll:
				{155 to: 158}) nextCartID ] valueCoveringAll:
				{160 to: 169})
				cover: (146 to: 150)
				declaredAt: (65 to: 69).
			[
			(cartSessions
				cover: (175 to: 186)
				declaredAt: (175 to: 186))
				at:
					(newID
						cover: (192 to: 196)
						declaredAt: (65 to: 69))
				put:
					([
					(CartSession
						cover: (204 to: 214)
						declaredAt: (204 to: 214))
						for:
							([
							(self coverAll:
								{221 to: 224}) emptyCart ] valueCoveringAll:
								{226 to: 234})
						belongingTo:
							(aCustomerID
								cover: (249 to: 259)
								declaredAt: (26 to: 36))
						at:
							([
							(clock
								cover: (265 to: 269)
								declaredAt: (265 to: 269)) now ] valueCoveringAll:
								{271 to: 273}) ] valueCoveringAll:
						{216 to: 219. 236 to: 247. 261 to: 263}) ] valueCoveringAll:
				{188 to: 190. 198 to: 201} ]] valueCoveringAll:
		{82 to: 104. 120 to: 123. 137 to: 139}.
	^ newID
		cover: (285 to: 289)
		declaredAt: (65 to: 69).! !
!Behavior method!
ifCanAuthenticateUsing: aCustomerID and: aPassword do: aBlock
	[
	([
	(authenticator
		cover: (66 to: 78)
		declaredAt: (66 to: 78))
		authenticateUserID:
			(aCustomerID
				cover: (100 to: 110)
				declaredAt: (25 to: 35))
		withPassword:
			(aPassword
				cover: (126 to: 134)
				declaredAt: (42 to: 50)) ] valueCoveringAll:
		{80 to: 98. 112 to: 124})
		ifTrue:
			(aBlock
				cover: (147 to: 152)
				declaredAt: (56 to: 61))
		ifFalse: [
			[
			(self coverAll:
				{167 to: 170}) error:
				([
				([
				(self coverAll:
					{179 to: 182}) class ] valueCoveringAll:
					{184 to: 188}) authenticationErrorMessage ] valueCoveringAll:
					{190 to: 215}) ] valueCoveringAll:
				{172 to: 177} ]] valueCoveringAll:
		{139 to: 145. 156 to: 163}.! !
!Behavior method!
authenticateUserID: aCustomerID withPassword: aPassword
	^ true coverAll:
		{60 to: 63}.! !
!Behavior method!
nextCartID
	(lastCartID _ [
	(lastCartID
		cover: (15 to: 24)
		declaredAt: (15 to: 24)) +
		(1 coverAll:
			{42 to: 42}) ] valueCoveringAll:
		{40 to: 40})
		cover: (29 to: 38)
		declaredAt: (15 to: 24).
	^ lastCartID
		cover: (47 to: 56)
		declaredAt: (15 to: 24).! !
!Behavior method!
emptyCart
	^ [
	(Cart
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) for:
		(catalog
			cover: (25 to: 31)
			declaredAt: (25 to: 31)) ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
now
	^ time
		cover: (9 to: 12)
		declaredAt: (9 to: 12).! !
!Behavior method!
for: aCart belongingTo: aCustomerID at: aGregorianDateTime
	^ [
	([
	(self coverAll:
		{65 to: 68}) new ] valueCoveringAll:
		{70 to: 72})
		initializeFor:
			(aCart
				cover: (89 to: 93)
				declaredAt: (6 to: 10))
		belongingTo:
			(aCustomerID
				cover: (108 to: 118)
				declaredAt: (25 to: 35))
		at:
			(aGregorianDateTime
				cover: (124 to: 141)
				declaredAt: (41 to: 58)) ] valueCoveringAll:
		{74 to: 87. 95 to: 106. 120 to: 122}.! !
!Behavior method!
initializeFor: aCart belongingTo: aCustomerID at: aGregorianDateTime
	(cart _ aCart
		cover: (81 to: 85)
		declaredAt: (16 to: 20))
		cover: (73 to: 76)
		declaredAt: (73 to: 76).
	(customerID _ aCustomerID
		cover: (103 to: 113)
		declaredAt: (35 to: 45))
		cover: (89 to: 98)
		declaredAt: (89 to: 98).
	(lastAccessTime _ aGregorianDateTime
		cover: (135 to: 152)
		declaredAt: (51 to: 68))
		cover: (117 to: 130)
		declaredAt: (117 to: 130).! !
!Behavior method!
listCartWithID: aCartID
	[
	(self coverAll:
		{27 to: 30})
		ifSessionNotExpiredFor:
			(aCartID
				cover: (56 to: 62)
				declaredAt: (17 to: 23))
		do: [ :aCartSession |
			^ [
			([
			(aCartSession
				cover: (89 to: 100)
				declaredAt: (70 to: 81)) cart ] valueCoveringAll:
				{102 to: 105}) listContents ] valueCoveringAll:
				{107 to: 118} ]] valueCoveringAll:
		{32 to: 54. 64 to: 66}.! !
!Behavior method!
ifSessionNotExpiredFor: aCartID do: aBlock
	| currentTime cartSession |
	(cartSession _ [
	(self coverAll:
		{92 to: 95}) cartSessionFor:
		(aCartID
			cover: (113 to: 119)
			declaredAt: (25 to: 31)) ] valueCoveringAll:
		{97 to: 111})
		cover: (77 to: 87)
		declaredAt: (60 to: 70).
	(currentTime _ [
	(clock
		cover: (139 to: 143)
		declaredAt: (139 to: 143)) now ] valueCoveringAll:
		{145 to: 147})
		cover: (124 to: 134)
		declaredAt: (48 to: 58).
	[
	([
	(cartSession
		cover: (152 to: 162)
		declaredAt: (60 to: 70)) isExpiredAt:
		(currentTime
			cover: (177 to: 187)
			declaredAt: (48 to: 58)) ] valueCoveringAll:
		{164 to: 175})
		ifTrue: [
			[
			(self coverAll:
				{202 to: 205}) error:
				([
				([
				(self coverAll:
					{214 to: 217}) class ] valueCoveringAll:
					{219 to: 223}) expiredCartErrorMessage ] valueCoveringAll:
					{225 to: 247}) ] valueCoveringAll:
				{207 to: 212} ]
		ifFalse: [
			[
			(cartSession
				cover: (268 to: 278)
				declaredAt: (60 to: 70)) updateLastAccessTime:
				(currentTime
					cover: (302 to: 312)
					declaredAt: (48 to: 58)) ] valueCoveringAll:
				{280 to: 300}.
			[
			(aBlock
				cover: (318 to: 323)
				declaredAt: (37 to: 42)) value:
				(cartSession
					cover: (332 to: 342)
					declaredAt: (60 to: 70)) ] valueCoveringAll:
				{325 to: 330} ]] valueCoveringAll:
		{192 to: 198. 253 to: 260}.! !
!Behavior method!
cartSessionFor: aCartID
	^ [
	(cartSessions
		cover: (29 to: 40)
		declaredAt: (29 to: 40))
		at:
			(aCartID
				cover: (46 to: 52)
				declaredAt: (17 to: 23))
		ifAbsent: [
			[
			(self coverAll:
				{65 to: 68}) error:
				([
				([
				(self coverAll:
					{77 to: 80}) class ] valueCoveringAll:
					{82 to: 86}) invalidCartIDErrorMessage ] valueCoveringAll:
					{88 to: 112}) ] valueCoveringAll:
				{70 to: 75} ]] valueCoveringAll:
		{42 to: 44. 54 to: 62}.! !
!Behavior method!
isExpiredAt: aGregorianDateTime
	^ [
	([
	(lastAccessTime
		cover: (38 to: 51)
		declaredAt: (38 to: 51)) distanceTo:
		(aGregorianDateTime
			cover: (65 to: 82)
			declaredAt: (14 to: 31)) ] valueCoveringAll:
		{53 to: 63}) >
		([
		(30 coverAll:
			{88 to: 89}) *
			(minute
				cover: (93 to: 98)
				declaredAt: (93 to: 98)) ] valueCoveringAll:
			{91 to: 91}) ] valueCoveringAll:
		{85 to: 85}.! !
!Behavior method!
updateLastAccessTime: aGregorianDateTime
	(lastAccessTime _ aGregorianDateTime
		cover: (62 to: 79)
		declaredAt: (23 to: 40))
		cover: (44 to: 57)
		declaredAt: (44 to: 57).! !
!Behavior method!
cart
	^ cart
		cover: (10 to: 13)
		declaredAt: (10 to: 13).! !

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
authenticateUserID: aCustomerID withPassword: aPassword
	^ false coverAll:
		{60 to: 64}.! !
!Behavior method!
authenticationErrorMessage
	^ 'Error al autenticarse.' coverAll:
		{31 to: 54}.! !

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
addToCartWithID: aCartID book: aBook quantity: aQuantity
	[
	(self coverAll:
		{60 to: 63})
		ifSessionNotExpiredFor:
			(aCartID
				cover: (89 to: 95)
				declaredAt: (18 to: 24))
		do: [ :aCartSession |
			[
			([
			(aCartSession
				cover: (120 to: 131)
				declaredAt: (103 to: 114)) cart ] valueCoveringAll:
				{133 to: 136})
				addBook:
					(aBook
						cover: (147 to: 151)
						declaredAt: (32 to: 36))
				quantity:
					(aQuantity
						cover: (163 to: 171)
						declaredAt: (48 to: 56)) ] valueCoveringAll:
				{138 to: 145. 153 to: 161} ]] valueCoveringAll:
		{65 to: 87. 97 to: 99}.! !

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
invalidCartIDErrorMessage
	^ 'El ID de carrito no es valido.' coverAll:
		{31 to: 62}.! !

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/12/2022 23:55:29'!
PASSED!
!Behavior method!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYear ownedBy: anOwner
	| creditCard transactionID |
	(creditCard _ [
	(CreditCard
		cover: (160 to: 169)
		declaredAt: (160 to: 169))
		for:
			(anOwner
				cover: (176 to: 182)
				declaredAt: (104 to: 110))
		number:
			(aCreditCardNumber
				cover: (192 to: 208)
				declaredAt: (52 to: 68))
		expiringOn:
			(aMonthOfYear
				cover: (222 to: 233)
				declaredAt: (82 to: 93)) ] valueCoveringAll:
		{171 to: 174. 184 to: 190. 210 to: 220})
		cover: (146 to: 155)
		declaredAt: (116 to: 125).
	[
	(self coverAll:
		{239 to: 242})
		ifSessionNotExpiredFor:
			(aCartID
				cover: (268 to: 274)
				declaredAt: (21 to: 27))
		do: [ :aCartSession |
			(transactionID _ [
			(cashier
				cover: (316 to: 322)
				declaredAt: (316 to: 322))
				checkout:
					([
					(aCartSession
						cover: (334 to: 345)
						declaredAt: (282 to: 293)) cart ] valueCoveringAll:
						{347 to: 350})
				for:
					([
					(aCartSession
						cover: (357 to: 368)
						declaredAt: (282 to: 293)) customerID ] valueCoveringAll:
						{370 to: 379})
				withCard:
					(creditCard
						cover: (391 to: 400)
						declaredAt: (116 to: 125))
				on:
					([
					(clock
						cover: (406 to: 410)
						declaredAt: (406 to: 410)) now ] valueCoveringAll:
						{412 to: 414})
				registeringOn:
					(salesList
						cover: (431 to: 439)
						declaredAt: (431 to: 439)) ] valueCoveringAll:
				{324 to: 332. 352 to: 355. 381 to: 389. 402 to: 404. 416 to: 429})
				cover: (299 to: 311)
				declaredAt: (127 to: 139).
			[
			(self coverAll:
				{447 to: 450}) invalidateCartSessionFor:
				(aCartID
					cover: (478 to: 484)
					declaredAt: (21 to: 27)) ] valueCoveringAll:
				{452 to: 476}.
			^ transactionID
				cover: (493 to: 505)
				declaredAt: (127 to: 139) ]] valueCoveringAll:
		{244 to: 266. 276 to: 278}.! !
!Behavior method!
customerID
	^ customerID
		cover: (16 to: 25)
		declaredAt: (16 to: 25).! !
!Behavior method!
invalidateCartSessionFor: aCartID
	^ [
	(cartSessions
		cover: (39 to: 50)
		declaredAt: (39 to: 50)) removeKey:
		(aCartID
			cover: (63 to: 69)
			declaredAt: (27 to: 33)) ] valueCoveringAll:
		{52 to: 61}.! !
!Behavior method!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	[
	(self coverAll:
		{66 to: 69})
		ifCanAuthenticateUsing:
			(aCustomerID
				cover: (97 to: 107)
				declaredAt: (28 to: 38))
		and:
			(aPassword
				cover: (116 to: 124)
				declaredAt: (53 to: 61))
		do: [ ^ [
			(self coverAll:
				{135 to: 138}) getAllPurchasesFrom:
				(aCustomerID
					cover: (161 to: 171)
					declaredAt: (28 to: 38)) ] valueCoveringAll:
				{140 to: 159} ]] valueCoveringAll:
		{73 to: 95. 111 to: 114. 128 to: 130}.! !
!Behavior method!
getAllPurchasesFrom: aCustomerID
	| customerPurchases totalAmount |
	(customerPurchases _ [
	(Bag
		cover: (94 to: 96)
		declaredAt: (94 to: 96)) new ] valueCoveringAll:
		{98 to: 100})
		cover: (73 to: 89)
		declaredAt: (38 to: 54).
	(totalAmount _ 0 coverAll:
		{119 to: 119})
		cover: (104 to: 114)
		declaredAt: (56 to: 66).
	[
	(salesList
		cover: (125 to: 133)
		declaredAt: (125 to: 133)) do: [ :aSale |
		[
		([
		(aSale
			cover: (150 to: 154)
			declaredAt: (141 to: 145)) belongsTo:
			(aCustomerID
				cover: (167 to: 177)
				declaredAt: (22 to: 32)) ] valueCoveringAll:
			{156 to: 165}) ifTrue: [
			[
			(customerPurchases
				cover: (193 to: 209)
				declaredAt: (38 to: 54)) addAll:
				([
				(aSale
					cover: (219 to: 223)
					declaredAt: (141 to: 145)) items ] valueCoveringAll:
					{225 to: 229}) ] valueCoveringAll:
				{211 to: 217}.
			(totalAmount _ [
			(totalAmount
				cover: (235 to: 245)
				declaredAt: (56 to: 66)) +
				([
				(aSale
					cover: (264 to: 268)
					declaredAt: (141 to: 145)) price ] valueCoveringAll:
					{270 to: 274}) ] valueCoveringAll:
				{262 to: 262})
				cover: (250 to: 260)
				declaredAt: (56 to: 66) ]] valueCoveringAll:
			{180 to: 186} ]] valueCoveringAll:
		{135 to: 137}.
	^ [
	(customerPurchases
		cover: (286 to: 302)
		declaredAt: (38 to: 54)) ->
		(totalAmount
			cover: (307 to: 317)
			declaredAt: (56 to: 66)) ] valueCoveringAll:
		{304 to: 305}.! !

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/12/2022 23:55:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/12/2022 23:55:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/12/2022 23:55:30'!
PASSED!
!Behavior method!
changeTime: aGregorianDateTime
	(time _ aGregorianDateTime
		cover: (42 to: 59)
		declaredAt: (13 to: 30))
		cover: (34 to: 37)
		declaredAt: (34 to: 37).! !
!Behavior method!
expiredCartErrorMessage
	^ 'El carrito ha expirado.' coverAll:
		{29 to: 53}.! !

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/12/2022 23:55:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/12/2022 23:55:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/12/2022 23:55:30'!
PASSED!
!Cart methodsFor: 'valuating' stamp: 'AEC 6/13/2022 00:02:03'!
totalPrice

	^books sum:[ :aBookISBN |  catalog at: aBookISBN ]! !

!methodRemoval: Cart #value stamp: 'AEC 6/13/2022 00:02:20'!
value

	^books sum:[ :aBookISBN |  catalog at: aBookISBN ]!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/13/2022 00:03:08'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/13/2022 00:03:09'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/13/2022 00:03:09'!
ERROR!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/13/2022 00:03:09'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/13/2022 00:03:09'!
FAILURE!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/13/2022 00:03:09'!
ERROR!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/13/2022 00:03:09'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/13/2022 00:03:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/13/2022 00:03:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/13/2022 00:03:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/13/2022 00:03:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/13/2022 00:03:09'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/13/2022 00:03:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/13/2022 00:03:09'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/13/2022 00:03:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/13/2022 00:03:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/13/2022 00:03:09'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/13/2022 00:03:24'!
ERROR!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/13/2022 00:03:24'!
FAILURE!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/13/2022 00:03:24'!
ERROR!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/13/2022 00:03:24'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/13/2022 00:03:24'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/13/2022 00:03:24'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/13/2022 00:03:24'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/13/2022 00:03:34'!
ERROR!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/13/2022 00:03:34'!
ERROR!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/13/2022 00:04:09'!
ERROR!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/13/2022 00:04:09'!
ERROR!
!Cashier methodsFor: 'paying' stamp: 'AEC 6/13/2022 00:04:31' prior: 50483657!
checkout: aCart for: aCustomerID withCard: aCreditCard on: aGregorianDate registeringOn: aSalesList 

	| price transactionID |
	
	self assertCartIsNotEmpty: aCart.
	price := aCart totalPrice.
	(aCreditCard isExpiredOn: aGregorianDate) ifTrue:[self error: self class expiredCreditCardErrorDescription].
	self assertNameIsValidToSendToMerchantProcessor: aCreditCard.
	self assertAmountIsValidToSendToMerchantProcessor: price.
	
	merchantProcessor debit: (self formatAmount: price) from: aCreditCard.

	transactionID := self nextTransactionID.
	aSalesList add: (Sale of: aCart listContents totalling: price to: aCustomerID withTransactionID: transactionID).
	
	^transactionID! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/13/2022 00:04:35'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/13/2022 00:04:35'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/13/2022 00:04:35'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/13/2022 00:04:35'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/13/2022 00:04:35'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/13/2022 00:04:35'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/13/2022 00:04:35'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/13/2022 00:04:35'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/13/2022 00:04:35'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/13/2022 00:04:35'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/13/2022 00:04:35'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/13/2022 00:04:36'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/13/2022 00:17:02' prior: 50487400!
test02CannotCreateCartWithInvalidCredentials

	| systemFacade |
	
	systemFacade := self systemFacadeWithFailingAuthenticator.
	
	self
		should:[systemFacade createCartForCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withExceptionDo:[:anError |
			self assert: anError messageText equals: TusLibrosSystemFacade authenticationErrorMessage.	
		]
	
	
	
	
	
	! !
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/13/2022 00:17:32'!
systemFacadeWithFailingAuthenticator

	^ TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: FailingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: ClockTestDouble new.! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/13/2022 00:17:47' prior: 50487517!
test06CantListPurchasesWithInvalidCredentials

	| systemFacade |
	
	systemFacade := self systemFacadeWithFailingAuthenticator.
	
	self 
		should: [systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password']
		raise: Error
		withMessageText: TusLibrosSystemFacade authenticationErrorMessage.
		! !
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/13/2022 00:21:39'!
createCartWithDefaultCredentialsOn: aSystemFacade

	^ aSystemFacade createCartForCustomerID: self defaultID andPassword: self defaultPassword.! !
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/13/2022 00:22:12'!
defaultID

	^ 'ID'! !
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/13/2022 00:22:19'!
defaultPassword

	^ 'Password'! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/13/2022 00:23:02' prior: 50484080!
test01ListCartOfNewlyCreatedCartIsEmpty

	| cartID systemFacade |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := self createCartWithDefaultCredentialsOn: systemFacade.
	
	self assert: Bag new equals: (systemFacade listCartWithID: cartID).
	
	
	
	
	
	
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/13/2022 00:23:18' prior: 50490691!
test02CannotCreateCartWithInvalidCredentials

	| systemFacade |
	
	systemFacade := self systemFacadeWithFailingAuthenticator.
	
	self
		should:[self createCartWithDefaultCredentialsOn: systemFacade]
		raise: Error
		withExceptionDo:[:anError |
			self assert: anError messageText equals: TusLibrosSystemFacade authenticationErrorMessage.	
		]
	
	
	
	
	
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/13/2022 00:23:38' prior: 50484211!
test03ListCartWithBooksAddedWillShowThem

	| systemFacade cartID expectedResult |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := self createCartWithDefaultCredentialsOn: systemFacade.
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	
	expectedResult := Bag new.
	expectedResult add: 1 withOccurrences: 2.
	
	self assert: expectedResult equals: (systemFacade listCartWithID: cartID)
	
	
	
	
	
	
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/13/2022 00:23:46' prior: 50488039!
test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer

	| systemFacade cartID purchases expectedPurchasedItems |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := self createCartWithDefaultCredentialsOn: systemFacade.
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYear
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: 'ID' andPassword: 'Password'.
	
	expectedPurchasedItems := Bag new.
	expectedPurchasedItems add: 1 withOccurrences: 2.
	
	self
		assert: expectedPurchasedItems equals: purchases key;
		assert: 10 equals: purchases value! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/13/2022 00:23:56' prior: 50488066!
test07CartIDIsNotValidAnymoreAfterCheckout

	| systemFacade cartID |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := self createCartWithDefaultCredentialsOn: systemFacade.
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYear
		ownedBy: 'Alan Kay'.
	
	self
		should: [systemFacade listCartWithID: cartID ]
		raise: Error
		withMessageText: TusLibrosSystemFacade invalidCartIDErrorMessage! !
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/13/2022 00:24:06' prior: 50487737!
whenCartSessionExpiredCantDo: aBlock

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble new.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := self createCartWithDefaultCredentialsOn: systemFacade.. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [aBlock value: systemFacade value: cartID]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !
!TusLibrosSystemFacadeTest methodsFor: 'test-support' stamp: 'AEC 6/13/2022 00:24:18' prior: 50490838!
whenCartSessionExpiredCantDo: aBlock

	| systemFacade cartID clock time |
	
	time := GregorianDateTime now.
	clock := ClockTestDouble new.
	
	systemFacade := TusLibrosSystemFacade withCatalog: self defaultCatalog withAuthenticator: WorkingAuthenticator new andMerchantProcessor: WorkingMerchantProcessor new andClock: clock.
	
	cartID := self createCartWithDefaultCredentialsOn: systemFacade. 
	
	clock changeTime: (time next: 31 * minute).
	
	self
		should: [aBlock value: systemFacade value: cartID]
		raise: Error
		withMessageText: TusLibrosSystemFacade expiredCartErrorMessage! !

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/13/2022 00:24:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/13/2022 00:24:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/13/2022 00:24:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/13/2022 00:24:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/13/2022 00:24:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/13/2022 00:24:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/13/2022 00:24:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/13/2022 00:24:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/13/2022 00:24:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/13/2022 00:24:20'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/13/2022 00:24:46' prior: 50490791!
test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer

	| systemFacade cartID purchases expectedPurchasedItems |
	
	systemFacade := self defaultSystemFacade.
	
	cartID := self createCartWithDefaultCredentialsOn: systemFacade.
	systemFacade addToCartWithID: cartID book: 1 quantity: 2.
	systemFacade
		checkoutCartWithID: cartID 
		usingCreditCardNumber: self validCreditCardNumber 
		expiringOn: self nonExpiredMonthOfYear
		ownedBy: 'Alan Kay'.
	purchases := systemFacade listPurchasesOfCustomerID: self defaultID andPassword: self defaultPassword.
	
	expectedPurchasedItems := Bag new.
	expectedPurchasedItems add: 1 withOccurrences: 2.
	
	self
		assert: expectedPurchasedItems equals: purchases key;
		assert: 10 equals: purchases value! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'AEC 6/13/2022 00:25:18' prior: 50490717!
test06CantListPurchasesWithInvalidCredentials

	| systemFacade |
	
	systemFacade := self systemFacadeWithFailingAuthenticator.
	
	self 
		should: [systemFacade listPurchasesOfCustomerID: self defaultID andPassword: self defaultPassword ]
		raise: Error
		withMessageText: TusLibrosSystemFacade authenticationErrorMessage.
		! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/13/2022 00:28:13'!
PASSED!

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/13/2022 00:28:14'!
PASSED!
!Behavior method!
for: aCatalog
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aCatalog
			cover: (44 to: 51)
			declaredAt: (6 to: 13)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aCatalog
	(books _ [
	(Bag
		cover: (36 to: 38)
		declaredAt: (36 to: 38)) new ] valueCoveringAll:
		{40 to: 42})
		cover: (27 to: 31)
		declaredAt: (27 to: 31).
	(catalog _ aCatalog
		cover: (57 to: 64)
		declaredAt: (16 to: 23))
		cover: (46 to: 52)
		declaredAt: (46 to: 52).! !
!Behavior method!
isEmpty
	^ [
	(books
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
addBook: aBookISBN quantity: aQuantity
	[
	(self coverAll:
		{44 to: 47}) assertBookIsInCatalog:
		(aBookISBN
			cover: (72 to: 80)
			declaredAt: (10 to: 18)) ] valueCoveringAll:
		{49 to: 70}.
	[
	(self coverAll:
		{84 to: 87}) assertQuantityIsValid:
		(aQuantity
			cover: (112 to: 120)
			declaredAt: (30 to: 38)) ] valueCoveringAll:
		{89 to: 110}.
	[
	(books
		cover: (124 to: 128)
		declaredAt: (124 to: 128))
		add:
			(aBookISBN
				cover: (135 to: 143)
				declaredAt: (10 to: 18))
		withOccurrences:
			(aQuantity
				cover: (162 to: 170)
				declaredAt: (30 to: 38)) ] valueCoveringAll:
		{130 to: 133. 145 to: 160}.! !
!Behavior method!
assertBookIsInCatalog: aBookISBN
	[
	([
	(catalog
		cover: (37 to: 43)
		declaredAt: (37 to: 43)) includesKey:
		(aBookISBN
			cover: (58 to: 66)
			declaredAt: (24 to: 32)) ] valueCoveringAll:
		{45 to: 56}) ifFalse: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			([
			(self coverAll:
				{90 to: 93}) class ] valueCoveringAll:
				{95 to: 99}) bookNotInCatalogErrorDescription ] valueCoveringAll:
				{101 to: 132}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 76}.! !
!Behavior method!
assertQuantityIsValid: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) >
		(0 coverAll:
			{48 to: 48}) ] valueCoveringAll:
		{46 to: 46}) ifFalse: [
		[
		(self coverAll:
			{59 to: 62}) error:
			([
			([
			(self coverAll:
				{71 to: 74}) class ] valueCoveringAll:
				{76 to: 80}) nonPositiveBookQuantityErrorDescription ] valueCoveringAll:
				{82 to: 120}) ] valueCoveringAll:
			{64 to: 69} ]] valueCoveringAll:
		{50 to: 57}.
	[
	([
	(aQuantity
		cover: (126 to: 134)
		declaredAt: (24 to: 32)) isInteger ] valueCoveringAll:
		{136 to: 144}) ifFalse: [
		[
		(self coverAll:
			{155 to: 158}) error:
			([
			([
			(self coverAll:
				{167 to: 170}) class ] valueCoveringAll:
				{172 to: 176}) nonIntegerBookQuantityErrorDescription ] valueCoveringAll:
				{178 to: 215}) ] valueCoveringAll:
			{160 to: 165} ]] valueCoveringAll:
		{146 to: 153}.! !
!Behavior method!
hasBook: aBookISBN
	^ [
	(books
		cover: (25 to: 29)
		declaredAt: (25 to: 29)) includes:
		(aBookISBN
			cover: (41 to: 49)
			declaredAt: (10 to: 18)) ] valueCoveringAll:
		{31 to: 39}.! !

!testRun: #CartTest #test02CartOnlyHasTheBookWhenAddingIt stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
quantityOfBooksWithISBN: aBookISBN
	^ [
	(books
		cover: (42 to: 46)
		declaredAt: (42 to: 46)) occurrencesOf:
		(aBookISBN
			cover: (63 to: 71)
			declaredAt: (26 to: 34)) ] valueCoveringAll:
		{48 to: 61}.! !

!testRun: #CartTest #test03BooksCanBeAddedMultipleTimes stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!

!testRun: #CartTest #test04BooksCanBeAddedMultipleTimesInDifferentMoments stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
bookNotInCatalogErrorDescription
	^ 'El libro no se encuentra en el catalogo.' coverAll:
		{38 to: 79}.! !

!testRun: #CartTest #test05BookCannotBeAddedIfNotInCatalog stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
nonPositiveBookQuantityErrorDescription
	^ 'La cantidad de libros a agregar no es positiva.' coverAll:
		{45 to: 93}.! !

!testRun: #CartTest #test06BookCannotBeAddedWithNonPositiveQuantity stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
nonIntegerBookQuantityErrorDescription
	^ 'La cantidad de libros a agregar no es un numero entero.' coverAll:
		{44 to: 100}.! !

!testRun: #CartTest #test07NonIntegerQuantityOfBookCantBeAdded stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
listContents
	^ [
	(books
		cover: (18 to: 22)
		declaredAt: (18 to: 22)) copy ] valueCoveringAll:
		{24 to: 27}.! !

!testRun: #CartTest #test08ListOfEmptyCartIsEmpty stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!

!testRun: #CartTest #test09ListOfCartWithBooksReturnsBooksAndQuantities stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
emptyOwnerNameErrorDescription
	^ 'El nombre de titular de la tarjeta esta vacio' coverAll:
		{37 to: 83}.! !
!Behavior method!
for: anOwner number: aCreditCardNumber expiringOn: aGregorianMonthOfYear
	[
	(self coverAll:
		{77 to: 80}) assertNumberHas16Digits:
		(aCreditCardNumber
			cover: (107 to: 123)
			declaredAt: (22 to: 38)) ] valueCoveringAll:
		{82 to: 105}.
	[
	(self coverAll:
		{127 to: 130}) assertOwnerNameIsNotBlank:
		(anOwner
			cover: (159 to: 165)
			declaredAt: (6 to: 12)) ] valueCoveringAll:
		{132 to: 157}.
	^ [
	([
	(self coverAll:
		{173 to: 176}) new ] valueCoveringAll:
		{178 to: 180})
		initializeFor:
			(anOwner
				cover: (197 to: 203)
				declaredAt: (6 to: 12))
		number:
			(aCreditCardNumber
				cover: (213 to: 229)
				declaredAt: (22 to: 38))
		expiringOn:
			(aGregorianMonthOfYear
				cover: (243 to: 263)
				declaredAt: (52 to: 72)) ] valueCoveringAll:
		{182 to: 195. 205 to: 211. 231 to: 241}.! !
!Behavior method!
assertNumberHas16Digits: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (48 to: 64)
		declaredAt: (26 to: 42)) numberOfDigitsInBase:
		(10 coverAll:
			{88 to: 89}) ] valueCoveringAll:
		{66 to: 86}) =
		(16 coverAll:
			{94 to: 95}) ] valueCoveringAll:
		{92 to: 92}) ifFalse: [
		[
		(self coverAll:
			{108 to: 111}) error:
			([
			(self coverAll:
				{120 to: 123}) invalidNumberOfDigitsErrorDescription ] valueCoveringAll:
				{125 to: 161}) ] valueCoveringAll:
			{113 to: 118} ]] valueCoveringAll:
		{98 to: 105}.! !
!Behavior method!
assertOwnerNameIsNotBlank: anOwner
	[
	([
	([
	(anOwner
		cover: (38 to: 44)
		declaredAt: (28 to: 34)) withBlanksTrimmed ] valueCoveringAll:
		{46 to: 62}) isEmpty ] valueCoveringAll:
		{64 to: 70}) ifTrue: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(self coverAll:
				{93 to: 96}) emptyOwnerNameErrorDescription ] valueCoveringAll:
				{98 to: 127}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{72 to: 78}.! !

!testRun: #CheckoutTest #test01CantCreateCreditCardWithBlankOwnerName stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
invalidNumberOfDigitsErrorDescription
	^ 'El numero de tarjeta no tiene 16 digitos.' coverAll:
		{43 to: 85}.! !

!testRun: #CheckoutTest #test02CantCreateCreditCardWithInvalidNumberOfDigits stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
initialize
	(timesCalled _ 0 coverAll:
		{28 to: 29})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).! !
!Behavior method!
debitingTo: aMerchantProcessor
	^ [
	([
	(self coverAll:
		{36 to: 39}) new ] valueCoveringAll:
		{41 to: 43}) initializeDebitingTo:
		(aMerchantProcessor
			cover: (67 to: 84)
			declaredAt: (13 to: 30)) ] valueCoveringAll:
		{45 to: 65}.! !
!Behavior method!
initializeDebitingTo: aMerchantProcessor
	(merchantProcessor _ aMerchantProcessor
		cover: (67 to: 84)
		declaredAt: (23 to: 40))
		cover: (46 to: 62)
		declaredAt: (46 to: 62).
	(lastTransactionID _ 0 coverAll:
		{108 to: 109})
		cover: (88 to: 104)
		declaredAt: (88 to: 104).! !
!Behavior method!
initializeFor: anOwner number: aCreditCardNumber expiringOn: aGregorianMonthOfYear
	(owner _ anOwner
		cover: (96 to: 102)
		declaredAt: (16 to: 22))
		cover: (87 to: 91)
		declaredAt: (87 to: 91).
	(number _ aCreditCardNumber
		cover: (116 to: 132)
		declaredAt: (32 to: 48))
		cover: (106 to: 111)
		declaredAt: (106 to: 111).
	(expirationMonthOfYear _ aGregorianMonthOfYear
		cover: (161 to: 181)
		declaredAt: (62 to: 82))
		cover: (136 to: 156)
		declaredAt: (136 to: 156).! !
!Behavior method!
checkout: aCart for: aCustomerID withCard: aCreditCard on: aGregorianDate registeringOn: aSalesList
	| price transactionID |
	[
	(self coverAll:
		{131 to: 134}) assertCartIsNotEmpty:
		(aCart
			cover: (158 to: 162)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{136 to: 156}.
	(price _ [
	(aCart
		cover: (175 to: 179)
		declaredAt: (11 to: 15)) totalPrice ] valueCoveringAll:
		{181 to: 190})
		cover: (166 to: 170)
		declaredAt: (106 to: 110).
	[
	([
	(aCreditCard
		cover: (195 to: 205)
		declaredAt: (44 to: 54)) isExpiredOn:
		(aGregorianDate
			cover: (220 to: 233)
			declaredAt: (60 to: 73)) ] valueCoveringAll:
		{207 to: 218}) ifTrue: [
		[
		(self coverAll:
			{244 to: 247}) error:
			([
			([
			(self coverAll:
				{256 to: 259}) class ] valueCoveringAll:
				{261 to: 265}) expiredCreditCardErrorDescription ] valueCoveringAll:
				{267 to: 299}) ] valueCoveringAll:
			{249 to: 254} ]] valueCoveringAll:
		{236 to: 242}.
	[
	(self coverAll:
		{304 to: 307}) assertNameIsValidToSendToMerchantProcessor:
		(aCreditCard
			cover: (353 to: 363)
			declaredAt: (44 to: 54)) ] valueCoveringAll:
		{309 to: 351}.
	[
	(self coverAll:
		{367 to: 370}) assertAmountIsValidToSendToMerchantProcessor:
		(price
			cover: (418 to: 422)
			declaredAt: (106 to: 110)) ] valueCoveringAll:
		{372 to: 416}.
	[
	(merchantProcessor
		cover: (428 to: 444)
		declaredAt: (428 to: 444))
		debit:
			([
			(self coverAll:
				{454 to: 457}) formatAmount:
				(price
					cover: (473 to: 477)
					declaredAt: (106 to: 110)) ] valueCoveringAll:
				{459 to: 471})
		from:
			(aCreditCard
				cover: (486 to: 496)
				declaredAt: (44 to: 54)) ] valueCoveringAll:
		{446 to: 451. 480 to: 484}.
	(transactionID _ [
	(self coverAll:
		{518 to: 521}) nextTransactionID ] valueCoveringAll:
		{523 to: 539})
		cover: (501 to: 513)
		declaredAt: (112 to: 124).
	[
	(aSalesList
		cover: (543 to: 552)
		declaredAt: (90 to: 99)) add:
		([
		(Sale
			cover: (560 to: 563)
			declaredAt: (560 to: 563))
			of:
				([
				(aCart
					cover: (569 to: 573)
					declaredAt: (11 to: 15)) listContents ] valueCoveringAll:
					{575 to: 586})
			totalling:
				(price
					cover: (599 to: 603)
					declaredAt: (106 to: 110))
			to:
				(aCustomerID
					cover: (609 to: 619)
					declaredAt: (22 to: 32))
			withTransactionID:
				(transactionID
					cover: (640 to: 652)
					declaredAt: (112 to: 124)) ] valueCoveringAll:
			{565 to: 567. 588 to: 597. 605 to: 607. 621 to: 638}) ] valueCoveringAll:
		{554 to: 557}.
	^ transactionID
		cover: (660 to: 672)
		declaredAt: (112 to: 124).! !
!Behavior method!
assertCartIsNotEmpty: aCart
	^ [
	([
	(aCart
		cover: (33 to: 37)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{39 to: 45}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			([
			(self coverAll:
				{67 to: 70}) class ] valueCoveringAll:
				{72 to: 76}) emptyCartErrorDescription ] valueCoveringAll:
				{78 to: 102}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{47 to: 53}.! !
!Behavior method!
emptyCartErrorDescription
	^ 'El carrito esta vacio.' coverAll:
		{32 to: 55}.! !

!testRun: #CheckoutTest #test03SaleIsNotRegisteredWhenCartIsEmpty stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
totalPrice
	^ [
	(books
		cover: (15 to: 19)
		declaredAt: (15 to: 19)) sum: [ :aBookISBN |
		[
		(catalog
			cover: (41 to: 47)
			declaredAt: (41 to: 47)) at:
			(aBookISBN
				cover: (53 to: 61)
				declaredAt: (28 to: 36)) ] valueCoveringAll:
			{49 to: 51} ]] valueCoveringAll:
		{21 to: 24}.! !
!Behavior method!
isExpiredOn: aFixedGregorianDate
	^ [
	([
	(expirationMonthOfYear
		cover: (38 to: 58)
		declaredAt: (38 to: 58)) lastDate ] valueCoveringAll:
		{60 to: 67}) <
		(aFixedGregorianDate
			cover: (71 to: 89)
			declaredAt: (14 to: 32)) ] valueCoveringAll:
		{69 to: 69}.! !
!Behavior method!
expiredCreditCardErrorDescription
	^ 'La tarjeta de credito esta vencida.' coverAll:
		{39 to: 75}.! !

!testRun: #CheckoutTest #test04SaleIsNotRegisteredWhenCreditCardIsExpired stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
assertNameIsValidToSendToMerchantProcessor: aCreditCard
	[
	([
	([
	([
	([
	(aCreditCard
		cover: (59 to: 69)
		declaredAt: (45 to: 55)) owner ] valueCoveringAll:
		{71 to: 75}) withBlanksTrimmed ] valueCoveringAll:
		{77 to: 93}) size ] valueCoveringAll:
		{95 to: 98}) >
		(30 coverAll:
			{102 to: 103}) ] valueCoveringAll:
		{100 to: 100}) ifTrue: [
		[
		(self coverAll:
			{115 to: 118}) error:
			([
			([
			(self coverAll:
				{127 to: 130}) class ] valueCoveringAll:
				{132 to: 136}) nameTooLongToSendToMerchantProcessor ] valueCoveringAll:
				{138 to: 173}) ] valueCoveringAll:
			{120 to: 125} ]] valueCoveringAll:
		{105 to: 111}.! !
!Behavior method!
owner
	^ owner
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
assertAmountIsValidToSendToMerchantProcessor: anAmount
	[
	([
	([
	([
	(anAmount
		cover: (59 to: 66)
		declaredAt: (47 to: 54)) truncated ] valueCoveringAll:
		{68 to: 76}) numberOfDigitsInBase:
		(10 coverAll:
			{100 to: 101}) ] valueCoveringAll:
		{78 to: 98}) >
		(15 coverAll:
			{107 to: 108}) ] valueCoveringAll:
		{105 to: 105}) ifTrue: [
		[
		(self coverAll:
			{120 to: 123}) error:
			([
			([
			(self coverAll:
				{132 to: 135}) class ] valueCoveringAll:
				{137 to: 141}) amountTooBigToSendToMerchantProcessor ] valueCoveringAll:
				{143 to: 179}) ] valueCoveringAll:
			{125 to: 130} ]] valueCoveringAll:
		{110 to: 116}.! !
!Behavior method!
formatAmount: anAmount
	^ [
	(anAmount
		cover: (28 to: 35)
		declaredAt: (15 to: 22)) printStringFractionDigits:
		(2 coverAll:
			{63 to: 64}) ] valueCoveringAll:
		{37 to: 62}.! !
!Behavior method!
debit: anAmount from: aCreditCard
	(amountToDebit _ anAmount
		cover: (54 to: 61)
		declaredAt: (8 to: 15))
		cover: (37 to: 49)
		declaredAt: (37 to: 49).
	(timesCalled _ [
	(timesCalled
		cover: (65 to: 75)
		declaredAt: (65 to: 75)) +
		(1 coverAll:
			{93 to: 94}) ] valueCoveringAll:
		{92 to: 92})
		cover: (80 to: 90)
		declaredAt: (65 to: 75).! !
!Behavior method!
nextTransactionID
	(lastTransactionID _ [
	(lastTransactionID
		cover: (22 to: 38)
		declaredAt: (22 to: 38)) +
		(1 coverAll:
			{63 to: 63}) ] valueCoveringAll:
		{61 to: 61})
		cover: (43 to: 59)
		declaredAt: (22 to: 38).
	^ lastTransactionID
		cover: (68 to: 84)
		declaredAt: (22 to: 38).! !
!Behavior method!
of: itemsSold totalling: aPrice to: aCustomerID withTransactionID: aTransactionID
	^ [
	([
	(self coverAll:
		{89 to: 92}) new ] valueCoveringAll:
		{94 to: 96})
		initializeOf:
			(itemsSold
				cover: (112 to: 120)
				declaredAt: (5 to: 13))
		totalling:
			(aPrice
				cover: (133 to: 138)
				declaredAt: (26 to: 31))
		to:
			(aCustomerID
				cover: (144 to: 154)
				declaredAt: (37 to: 47))
		withTransactionID:
			(aTransactionID
				cover: (175 to: 188)
				declaredAt: (68 to: 81)) ] valueCoveringAll:
		{98 to: 110. 122 to: 131. 140 to: 142. 156 to: 173}.! !
!Behavior method!
initializeOf: itemsSold totalling: aPrice to: aCustomerID withTransactionID: aTransactionID
	(transactionID _ aTransactionID
		cover: (114 to: 127)
		declaredAt: (78 to: 91))
		cover: (97 to: 109)
		declaredAt: (97 to: 109).
	(items _ itemsSold
		cover: (140 to: 148)
		declaredAt: (15 to: 23))
		cover: (131 to: 135)
		declaredAt: (131 to: 135).
	(price _ aPrice
		cover: (161 to: 166)
		declaredAt: (36 to: 41))
		cover: (152 to: 156)
		declaredAt: (152 to: 156).
	(customerID _ aCustomerID
		cover: (184 to: 194)
		declaredAt: (47 to: 57))
		cover: (170 to: 179)
		declaredAt: (170 to: 179).! !
!Behavior method!
items
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) copy ] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
price
	^ price
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
belongsTo: aCustomerID
	^ [
	(aCustomerID
		cover: (28 to: 38)
		declaredAt: (12 to: 22)) =
		(customerID
			cover: (42 to: 51)
			declaredAt: (42 to: 51)) ] valueCoveringAll:
		{40 to: 40}.! !

!testRun: #CheckoutTest #test05SaleIsRegisteredOnSalesListWithContentsAndPrice stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
nameTooLongToSendToMerchantProcessor
	^ 'El nombre del cliente debe tener como maximo 30 digitos.' coverAll:
		{42 to: 99}.! !
!Behavior method!
timesCalled
	^ timesCalled
		cover: (17 to: 27)
		declaredAt: (17 to: 27).! !

!testRun: #CheckoutTest #test06ShouldNotSendToMerchantProcessorWhenNameIsTooLong stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
amountTooBigToSendToMerchantProcessor
	^ 'El monto puede tener hasta 15 digitos.' coverAll:
		{43 to: 82}.! !

!testRun: #CheckoutTest #test07ShouldNotSendToMerchantProcessorWhenAmountIsTooBig stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
amountToDebit
	^ amountToDebit
		cover: (19 to: 31)
		declaredAt: (19 to: 31).! !

!testRun: #CheckoutTest #test08AmountIsSentFormattedToMerchantProcessor stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
debit: anAmount from: aCreditCard
	[
	(self coverAll:
		{37 to: 40}) error:
		([
		([
		(self coverAll:
			{49 to: 52}) class ] valueCoveringAll:
			{54 to: 58}) cannotProcessDebit ] valueCoveringAll:
			{60 to: 77}) ] valueCoveringAll:
		{42 to: 47}.! !
!Behavior method!
cannotProcessDebit
	^ 'No se puede procesar el pago.' coverAll:
		{24 to: 54}.! !

!testRun: #CheckoutTest #test09CannotCheckoutWhenMerchantProcessorCannotProcessDebit stamp: 'AEC 6/13/2022 00:28:18'!
PASSED!
!Behavior method!
initialize
	(time _ [
	(GregorianDateTime
		cover: (22 to: 38)
		declaredAt: (22 to: 38)) now ] valueCoveringAll:
		{40 to: 42})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
withCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock
	^ [
	([
	(self coverAll:
		{121 to: 124}) new ] valueCoveringAll:
		{126 to: 128})
		initializeWithCatalog:
			(aCatalog
				cover: (153 to: 160)
				declaredAt: (14 to: 21))
		withAuthenticator:
			(anAuthenticator
				cover: (181 to: 195)
				declaredAt: (42 to: 56))
		andMerchantProcessor:
			(aMerchantProcessor
				cover: (219 to: 236)
				declaredAt: (80 to: 97))
		andClock:
			(aClock
				cover: (248 to: 253)
				declaredAt: (109 to: 114)) ] valueCoveringAll:
		{130 to: 151. 162 to: 179. 197 to: 217. 238 to: 246}.! !
!Behavior method!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator andMerchantProcessor: aMerchantProcessor andClock: aClock
	(lastCartID _ 0 coverAll:
		{144 to: 144})
		cover: (130 to: 139)
		declaredAt: (130 to: 139).
	(cartSessions _ [
	(Dictionary
		cover: (164 to: 173)
		declaredAt: (164 to: 173)) new ] valueCoveringAll:
		{175 to: 177})
		cover: (148 to: 159)
		declaredAt: (148 to: 159).
	(catalog _ aCatalog
		cover: (192 to: 199)
		declaredAt: (24 to: 31))
		cover: (181 to: 187)
		declaredAt: (181 to: 187).
	(authenticator _ anAuthenticator
		cover: (220 to: 234)
		declaredAt: (52 to: 66))
		cover: (203 to: 215)
		declaredAt: (203 to: 215).
	(cashier _ [
	(Cashier
		cover: (249 to: 255)
		declaredAt: (249 to: 255)) debitingTo:
		(aMerchantProcessor
			cover: (269 to: 286)
			declaredAt: (90 to: 107)) ] valueCoveringAll:
		{257 to: 267})
		cover: (238 to: 244)
		declaredAt: (238 to: 244).
	(salesList _ [
	(OrderedCollection
		cover: (303 to: 319)
		declaredAt: (303 to: 319)) new ] valueCoveringAll:
		{321 to: 323})
		cover: (290 to: 298)
		declaredAt: (290 to: 298).
	(clock _ aClock
		cover: (336 to: 341)
		declaredAt: (119 to: 124))
		cover: (327 to: 331)
		declaredAt: (327 to: 331).! !
!Behavior method!
createCartForCustomerID: aCustomerID andPassword: aPassword
	| newID |
	[
	(self coverAll:
		{75 to: 78})
		ifCanAuthenticateUsing:
			(aCustomerID
				cover: (106 to: 116)
				declaredAt: (26 to: 36))
		and:
			(aPassword
				cover: (125 to: 133)
				declaredAt: (51 to: 59))
		do: [
			(newID _ [
			(self coverAll:
				{155 to: 158}) nextCartID ] valueCoveringAll:
				{160 to: 169})
				cover: (146 to: 150)
				declaredAt: (65 to: 69).
			[
			(cartSessions
				cover: (175 to: 186)
				declaredAt: (175 to: 186))
				at:
					(newID
						cover: (192 to: 196)
						declaredAt: (65 to: 69))
				put:
					([
					(CartSession
						cover: (204 to: 214)
						declaredAt: (204 to: 214))
						for:
							([
							(self coverAll:
								{221 to: 224}) emptyCart ] valueCoveringAll:
								{226 to: 234})
						belongingTo:
							(aCustomerID
								cover: (249 to: 259)
								declaredAt: (26 to: 36))
						at:
							([
							(clock
								cover: (265 to: 269)
								declaredAt: (265 to: 269)) now ] valueCoveringAll:
								{271 to: 273}) ] valueCoveringAll:
						{216 to: 219. 236 to: 247. 261 to: 263}) ] valueCoveringAll:
				{188 to: 190. 198 to: 201} ]] valueCoveringAll:
		{82 to: 104. 120 to: 123. 137 to: 139}.
	^ newID
		cover: (285 to: 289)
		declaredAt: (65 to: 69).! !
!Behavior method!
ifCanAuthenticateUsing: aCustomerID and: aPassword do: aBlock
	[
	([
	(authenticator
		cover: (66 to: 78)
		declaredAt: (66 to: 78))
		authenticateUserID:
			(aCustomerID
				cover: (100 to: 110)
				declaredAt: (25 to: 35))
		withPassword:
			(aPassword
				cover: (126 to: 134)
				declaredAt: (42 to: 50)) ] valueCoveringAll:
		{80 to: 98. 112 to: 124})
		ifTrue:
			(aBlock
				cover: (147 to: 152)
				declaredAt: (56 to: 61))
		ifFalse: [
			[
			(self coverAll:
				{167 to: 170}) error:
				([
				([
				(self coverAll:
					{179 to: 182}) class ] valueCoveringAll:
					{184 to: 188}) authenticationErrorMessage ] valueCoveringAll:
					{190 to: 215}) ] valueCoveringAll:
				{172 to: 177} ]] valueCoveringAll:
		{139 to: 145. 156 to: 163}.! !
!Behavior method!
authenticateUserID: aCustomerID withPassword: aPassword
	^ true coverAll:
		{60 to: 63}.! !
!Behavior method!
nextCartID
	(lastCartID _ [
	(lastCartID
		cover: (15 to: 24)
		declaredAt: (15 to: 24)) +
		(1 coverAll:
			{42 to: 42}) ] valueCoveringAll:
		{40 to: 40})
		cover: (29 to: 38)
		declaredAt: (15 to: 24).
	^ lastCartID
		cover: (47 to: 56)
		declaredAt: (15 to: 24).! !
!Behavior method!
emptyCart
	^ [
	(Cart
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) for:
		(catalog
			cover: (25 to: 31)
			declaredAt: (25 to: 31)) ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
now
	^ time
		cover: (9 to: 12)
		declaredAt: (9 to: 12).! !
!Behavior method!
for: aCart belongingTo: aCustomerID at: aGregorianDateTime
	^ [
	([
	(self coverAll:
		{65 to: 68}) new ] valueCoveringAll:
		{70 to: 72})
		initializeFor:
			(aCart
				cover: (89 to: 93)
				declaredAt: (6 to: 10))
		belongingTo:
			(aCustomerID
				cover: (108 to: 118)
				declaredAt: (25 to: 35))
		at:
			(aGregorianDateTime
				cover: (124 to: 141)
				declaredAt: (41 to: 58)) ] valueCoveringAll:
		{74 to: 87. 95 to: 106. 120 to: 122}.! !
!Behavior method!
initializeFor: aCart belongingTo: aCustomerID at: aGregorianDateTime
	(cart _ aCart
		cover: (81 to: 85)
		declaredAt: (16 to: 20))
		cover: (73 to: 76)
		declaredAt: (73 to: 76).
	(customerID _ aCustomerID
		cover: (103 to: 113)
		declaredAt: (35 to: 45))
		cover: (89 to: 98)
		declaredAt: (89 to: 98).
	(lastAccessTime _ aGregorianDateTime
		cover: (135 to: 152)
		declaredAt: (51 to: 68))
		cover: (117 to: 130)
		declaredAt: (117 to: 130).! !
!Behavior method!
listCartWithID: aCartID
	[
	(self coverAll:
		{27 to: 30})
		ifSessionNotExpiredFor:
			(aCartID
				cover: (56 to: 62)
				declaredAt: (17 to: 23))
		do: [ :aCartSession |
			^ [
			([
			(aCartSession
				cover: (89 to: 100)
				declaredAt: (70 to: 81)) cart ] valueCoveringAll:
				{102 to: 105}) listContents ] valueCoveringAll:
				{107 to: 118} ]] valueCoveringAll:
		{32 to: 54. 64 to: 66}.! !
!Behavior method!
ifSessionNotExpiredFor: aCartID do: aBlock
	| currentTime cartSession |
	(cartSession _ [
	(self coverAll:
		{92 to: 95}) cartSessionFor:
		(aCartID
			cover: (113 to: 119)
			declaredAt: (25 to: 31)) ] valueCoveringAll:
		{97 to: 111})
		cover: (77 to: 87)
		declaredAt: (60 to: 70).
	(currentTime _ [
	(clock
		cover: (139 to: 143)
		declaredAt: (139 to: 143)) now ] valueCoveringAll:
		{145 to: 147})
		cover: (124 to: 134)
		declaredAt: (48 to: 58).
	[
	([
	(cartSession
		cover: (152 to: 162)
		declaredAt: (60 to: 70)) isExpiredAt:
		(currentTime
			cover: (177 to: 187)
			declaredAt: (48 to: 58)) ] valueCoveringAll:
		{164 to: 175})
		ifTrue: [
			[
			(self coverAll:
				{202 to: 205}) error:
				([
				([
				(self coverAll:
					{214 to: 217}) class ] valueCoveringAll:
					{219 to: 223}) expiredCartErrorMessage ] valueCoveringAll:
					{225 to: 247}) ] valueCoveringAll:
				{207 to: 212} ]
		ifFalse: [
			[
			(cartSession
				cover: (268 to: 278)
				declaredAt: (60 to: 70)) updateLastAccessTime:
				(currentTime
					cover: (302 to: 312)
					declaredAt: (48 to: 58)) ] valueCoveringAll:
				{280 to: 300}.
			[
			(aBlock
				cover: (318 to: 323)
				declaredAt: (37 to: 42)) value:
				(cartSession
					cover: (332 to: 342)
					declaredAt: (60 to: 70)) ] valueCoveringAll:
				{325 to: 330} ]] valueCoveringAll:
		{192 to: 198. 253 to: 260}.! !
!Behavior method!
cartSessionFor: aCartID
	^ [
	(cartSessions
		cover: (29 to: 40)
		declaredAt: (29 to: 40))
		at:
			(aCartID
				cover: (46 to: 52)
				declaredAt: (17 to: 23))
		ifAbsent: [
			[
			(self coverAll:
				{65 to: 68}) error:
				([
				([
				(self coverAll:
					{77 to: 80}) class ] valueCoveringAll:
					{82 to: 86}) invalidCartIDErrorMessage ] valueCoveringAll:
					{88 to: 112}) ] valueCoveringAll:
				{70 to: 75} ]] valueCoveringAll:
		{42 to: 44. 54 to: 62}.! !
!Behavior method!
isExpiredAt: aGregorianDateTime
	^ [
	([
	(lastAccessTime
		cover: (38 to: 51)
		declaredAt: (38 to: 51)) distanceTo:
		(aGregorianDateTime
			cover: (65 to: 82)
			declaredAt: (14 to: 31)) ] valueCoveringAll:
		{53 to: 63}) >
		([
		(30 coverAll:
			{88 to: 89}) *
			(minute
				cover: (93 to: 98)
				declaredAt: (93 to: 98)) ] valueCoveringAll:
			{91 to: 91}) ] valueCoveringAll:
		{85 to: 85}.! !
!Behavior method!
updateLastAccessTime: aGregorianDateTime
	(lastAccessTime _ aGregorianDateTime
		cover: (62 to: 79)
		declaredAt: (23 to: 40))
		cover: (44 to: 57)
		declaredAt: (44 to: 57).! !
!Behavior method!
cart
	^ cart
		cover: (10 to: 13)
		declaredAt: (10 to: 13).! !

!testRun: #TusLibrosSystemFacadeTest #test01ListCartOfNewlyCreatedCartIsEmpty stamp: 'AEC 6/13/2022 00:28:19'!
PASSED!
!Behavior method!
authenticateUserID: aCustomerID withPassword: aPassword
	^ false coverAll:
		{60 to: 64}.! !
!Behavior method!
authenticationErrorMessage
	^ 'Error al autenticarse.' coverAll:
		{31 to: 54}.! !

!testRun: #TusLibrosSystemFacadeTest #test02CannotCreateCartWithInvalidCredentials stamp: 'AEC 6/13/2022 00:28:19'!
PASSED!
!Behavior method!
addToCartWithID: aCartID book: aBook quantity: aQuantity
	[
	(self coverAll:
		{60 to: 63})
		ifSessionNotExpiredFor:
			(aCartID
				cover: (89 to: 95)
				declaredAt: (18 to: 24))
		do: [ :aCartSession |
			[
			([
			(aCartSession
				cover: (120 to: 131)
				declaredAt: (103 to: 114)) cart ] valueCoveringAll:
				{133 to: 136})
				addBook:
					(aBook
						cover: (147 to: 151)
						declaredAt: (32 to: 36))
				quantity:
					(aQuantity
						cover: (163 to: 171)
						declaredAt: (48 to: 56)) ] valueCoveringAll:
				{138 to: 145. 153 to: 161} ]] valueCoveringAll:
		{65 to: 87. 97 to: 99}.! !

!testRun: #TusLibrosSystemFacadeTest #test03ListCartWithBooksAddedWillShowThem stamp: 'AEC 6/13/2022 00:28:19'!
PASSED!
!Behavior method!
invalidCartIDErrorMessage
	^ 'El ID de carrito no es valido.' coverAll:
		{31 to: 62}.! !

!testRun: #TusLibrosSystemFacadeTest #test04CannotAddBooksToInvalidCartID stamp: 'AEC 6/13/2022 00:28:19'!
PASSED!
!Behavior method!
checkoutCartWithID: aCartID usingCreditCardNumber: aCreditCardNumber expiringOn: aMonthOfYear ownedBy: anOwner
	| creditCard transactionID |
	(creditCard _ [
	(CreditCard
		cover: (160 to: 169)
		declaredAt: (160 to: 169))
		for:
			(anOwner
				cover: (176 to: 182)
				declaredAt: (104 to: 110))
		number:
			(aCreditCardNumber
				cover: (192 to: 208)
				declaredAt: (52 to: 68))
		expiringOn:
			(aMonthOfYear
				cover: (222 to: 233)
				declaredAt: (82 to: 93)) ] valueCoveringAll:
		{171 to: 174. 184 to: 190. 210 to: 220})
		cover: (146 to: 155)
		declaredAt: (116 to: 125).
	[
	(self coverAll:
		{239 to: 242})
		ifSessionNotExpiredFor:
			(aCartID
				cover: (268 to: 274)
				declaredAt: (21 to: 27))
		do: [ :aCartSession |
			(transactionID _ [
			(cashier
				cover: (316 to: 322)
				declaredAt: (316 to: 322))
				checkout:
					([
					(aCartSession
						cover: (334 to: 345)
						declaredAt: (282 to: 293)) cart ] valueCoveringAll:
						{347 to: 350})
				for:
					([
					(aCartSession
						cover: (357 to: 368)
						declaredAt: (282 to: 293)) customerID ] valueCoveringAll:
						{370 to: 379})
				withCard:
					(creditCard
						cover: (391 to: 400)
						declaredAt: (116 to: 125))
				on:
					([
					(clock
						cover: (406 to: 410)
						declaredAt: (406 to: 410)) now ] valueCoveringAll:
						{412 to: 414})
				registeringOn:
					(salesList
						cover: (431 to: 439)
						declaredAt: (431 to: 439)) ] valueCoveringAll:
				{324 to: 332. 352 to: 355. 381 to: 389. 402 to: 404. 416 to: 429})
				cover: (299 to: 311)
				declaredAt: (127 to: 139).
			[
			(self coverAll:
				{447 to: 450}) invalidateCartSessionFor:
				(aCartID
					cover: (478 to: 484)
					declaredAt: (21 to: 27)) ] valueCoveringAll:
				{452 to: 476}.
			^ transactionID
				cover: (493 to: 505)
				declaredAt: (127 to: 139) ]] valueCoveringAll:
		{244 to: 266. 276 to: 278}.! !
!Behavior method!
customerID
	^ customerID
		cover: (16 to: 25)
		declaredAt: (16 to: 25).! !
!Behavior method!
invalidateCartSessionFor: aCartID
	^ [
	(cartSessions
		cover: (39 to: 50)
		declaredAt: (39 to: 50)) removeKey:
		(aCartID
			cover: (63 to: 69)
			declaredAt: (27 to: 33)) ] valueCoveringAll:
		{52 to: 61}.! !
!Behavior method!
listPurchasesOfCustomerID: aCustomerID andPassword: aPassword
	[
	(self coverAll:
		{66 to: 69})
		ifCanAuthenticateUsing:
			(aCustomerID
				cover: (97 to: 107)
				declaredAt: (28 to: 38))
		and:
			(aPassword
				cover: (116 to: 124)
				declaredAt: (53 to: 61))
		do: [ ^ [
			(self coverAll:
				{135 to: 138}) getAllPurchasesFrom:
				(aCustomerID
					cover: (161 to: 171)
					declaredAt: (28 to: 38)) ] valueCoveringAll:
				{140 to: 159} ]] valueCoveringAll:
		{73 to: 95. 111 to: 114. 128 to: 130}.! !
!Behavior method!
getAllPurchasesFrom: aCustomerID
	| customerPurchases totalAmount |
	(customerPurchases _ [
	(Bag
		cover: (94 to: 96)
		declaredAt: (94 to: 96)) new ] valueCoveringAll:
		{98 to: 100})
		cover: (73 to: 89)
		declaredAt: (38 to: 54).
	(totalAmount _ 0 coverAll:
		{119 to: 119})
		cover: (104 to: 114)
		declaredAt: (56 to: 66).
	[
	(salesList
		cover: (125 to: 133)
		declaredAt: (125 to: 133)) do: [ :aSale |
		[
		([
		(aSale
			cover: (150 to: 154)
			declaredAt: (141 to: 145)) belongsTo:
			(aCustomerID
				cover: (167 to: 177)
				declaredAt: (22 to: 32)) ] valueCoveringAll:
			{156 to: 165}) ifTrue: [
			[
			(customerPurchases
				cover: (193 to: 209)
				declaredAt: (38 to: 54)) addAll:
				([
				(aSale
					cover: (219 to: 223)
					declaredAt: (141 to: 145)) items ] valueCoveringAll:
					{225 to: 229}) ] valueCoveringAll:
				{211 to: 217}.
			(totalAmount _ [
			(totalAmount
				cover: (235 to: 245)
				declaredAt: (56 to: 66)) +
				([
				(aSale
					cover: (264 to: 268)
					declaredAt: (141 to: 145)) price ] valueCoveringAll:
					{270 to: 274}) ] valueCoveringAll:
				{262 to: 262})
				cover: (250 to: 260)
				declaredAt: (56 to: 66) ]] valueCoveringAll:
			{180 to: 186} ]] valueCoveringAll:
		{135 to: 137}.
	^ [
	(customerPurchases
		cover: (286 to: 302)
		declaredAt: (38 to: 54)) ->
		(totalAmount
			cover: (307 to: 317)
			declaredAt: (56 to: 66)) ] valueCoveringAll:
		{304 to: 305}.! !

!testRun: #TusLibrosSystemFacadeTest #test05SaleDoneThroughCheckoutCartAppearsOnListPurchasesOfCustomer stamp: 'AEC 6/13/2022 00:28:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CantListPurchasesWithInvalidCredentials stamp: 'AEC 6/13/2022 00:28:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CartIDIsNotValidAnymoreAfterCheckout stamp: 'AEC 6/13/2022 00:28:19'!
PASSED!
!Behavior method!
changeTime: aGregorianDateTime
	(time _ aGregorianDateTime
		cover: (42 to: 59)
		declaredAt: (13 to: 30))
		cover: (34 to: 37)
		declaredAt: (34 to: 37).! !
!Behavior method!
expiredCartErrorMessage
	^ 'El carrito ha expirado.' coverAll:
		{29 to: 53}.! !

!testRun: #TusLibrosSystemFacadeTest #test08CantAddItemsToExpiredCart stamp: 'AEC 6/13/2022 00:28:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CantListExpiredCart stamp: 'AEC 6/13/2022 00:28:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CantCheckoutExpiredCart stamp: 'AEC 6/13/2022 00:28:19'!
PASSED!

----SNAPSHOT----(13 June 2022 00:29:24) CuisUniversity-5096.image priorSource: 4998496!

----QUIT----(13 June 2022 00:29:28) CuisUniversity-5096.image priorSource: 5135224!